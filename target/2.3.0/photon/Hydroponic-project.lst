
c:/Users/anes_/Documents/Hidroponicos/Hydroponic-project/target/2.3.0/photon/Hydroponic-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000039e0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3a00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a3a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005bc  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3a74  080a3a74  00023a74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3a9c  080a3a9c  00023a9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011a5ff  00000000  00000000  00023aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000144b2  00000000  00000000  0013e09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014725  00000000  00000000  00152551  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d38  00000000  00000000  00166c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004448  00000000  00000000  001689ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027ff2  00000000  00000000  0016cdf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c094  00000000  00000000  00194de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000abe7a  00000000  00000000  001c0e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004d08  00000000  00000000  0026ccf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fb3f 	bl	80a36b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fb47 	bl	80a36d0 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3a04 	.word	0x080a3a04
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000629 	.word	0x20000629
 80a005c:	20000629 	.word	0x20000629

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 ff05 	bl	80a0e70 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a39e0 	.word	0x080a39e0
 80a0084:	080a3a00 	.word	0x080a3a00

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8c1 	bl	80a0214 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f000 bea3 	b.w	80a0de0 <_post_loop>

080a009a <_Znaj>:
 80a009a:	f000 bccb 	b.w	80a0a34 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bcd1 	b.w	80a0a44 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
float rawRange = 1024; // 3.3v
float logRange = 5.0; // 3.3v = 10^5 lux


// setup() runs once, when the device is first turned on.
void setup() {
 80a00b4:	b508      	push	{r3, lr}
	Serial.begin(9600); 
 80a00b6:	f000 ffdd 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f000 ffbf 	bl	80a1040 <_ZN9USBSerial5beginEl>
	Serial.println("Sensor reading test!");
 80a00c2:	f000 ffd7 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a00c6:	4904      	ldr	r1, [pc, #16]	; (80a00d8 <setup+0x24>)
 80a00c8:	f000 fd2f 	bl	80a0b2a <_ZN5Print7printlnEPKc>

	dht1.begin();
}
 80a00cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dht1.begin();
 80a00d0:	4802      	ldr	r0, [pc, #8]	; (80a00dc <setup+0x28>)
 80a00d2:	f000 b913 	b.w	80a02fc <_ZN3DHT5beginEv>
 80a00d6:	bf00      	nop
 80a00d8:	080a381c 	.word	0x080a381c
 80a00dc:	20000070 	.word	0x20000070

080a00e0 <_Z8tempReadv>:

	delay(5000);

}

void tempRead(){
 80a00e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float averageT = 0;


	for (int i = 0 ; i < DHTSIZE ; i++){

		h = dhtSensors[i].getHumidity();
 80a00e2:	4d29      	ldr	r5, [pc, #164]	; (80a0188 <_Z8tempReadv+0xa8>)
		sumH = sumH + h;
		sumT = sumT + t;
	}

	averageT = sumT/DHTSIZE;
	Serial.print("Promedio temperatura: ");
 80a00e4:	4f29      	ldr	r7, [pc, #164]	; (80a018c <_Z8tempReadv+0xac>)
		h = dhtSensors[i].getHumidity();
 80a00e6:	4628      	mov	r0, r5
 80a00e8:	f000 faf4 	bl	80a06d4 <_ZN3DHT11getHumidityEv>
 80a00ec:	4604      	mov	r4, r0
		t = dhtSensors[i].getTempCelcius();
 80a00ee:	4628      	mov	r0, r5
 80a00f0:	f000 fac6 	bl	80a0680 <_ZN3DHT14getTempCelciusEv>
 80a00f4:	4605      	mov	r5, r0
		Serial.print("Sensor DHT: ");
 80a00f6:	f000 ffbd 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a00fa:	4925      	ldr	r1, [pc, #148]	; (80a0190 <_Z8tempReadv+0xb0>)
 80a00fc:	f000 fd02 	bl	80a0b04 <_ZN5Print5printEPKc>
		Serial.println(i);
 80a0100:	f000 ffb8 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a0104:	4606      	mov	r6, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0106:	220a      	movs	r2, #10
 80a0108:	2100      	movs	r1, #0
 80a010a:	f000 fd18 	bl	80a0b3e <_ZN5Print11printNumberEmh>
        n += println();
 80a010e:	4630      	mov	r0, r6
 80a0110:	f000 fcff 	bl	80a0b12 <_ZN5Print7printlnEv>
		Serial.print("Humedad: ");
 80a0114:	f000 ffae 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a0118:	491e      	ldr	r1, [pc, #120]	; (80a0194 <_Z8tempReadv+0xb4>)
 80a011a:	f000 fcf3 	bl	80a0b04 <_ZN5Print5printEPKc>
		Serial.println(h); 
 80a011e:	f000 ffa9 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a0122:	2202      	movs	r2, #2
 80a0124:	4621      	mov	r1, r4
 80a0126:	f000 fdf5 	bl	80a0d14 <_ZN5Print7printlnEfi>
		Serial.print("Temperatura: ");
 80a012a:	f000 ffa3 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a012e:	491a      	ldr	r1, [pc, #104]	; (80a0198 <_Z8tempReadv+0xb8>)
 80a0130:	f000 fce8 	bl	80a0b04 <_ZN5Print5printEPKc>
		Serial.println(t); 
 80a0134:	f000 ff9e 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a0138:	2202      	movs	r2, #2
 80a013a:	4629      	mov	r1, r5
 80a013c:	f000 fdea 	bl	80a0d14 <_ZN5Print7printlnEfi>
	Serial.print("Promedio temperatura: ");
 80a0140:	f000 ff98 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a0144:	4639      	mov	r1, r7
 80a0146:	f000 fcdd 	bl	80a0b04 <_ZN5Print5printEPKc>
	Serial.println(averageT);
 80a014a:	f000 ff93 	bl	80a1074 <_Z16_fetch_usbserialv>
		sumT = sumT + t;
 80a014e:	2100      	movs	r1, #0
	Serial.println(averageT);
 80a0150:	4606      	mov	r6, r0
		sumT = sumT + t;
 80a0152:	4628      	mov	r0, r5
 80a0154:	f003 f850 	bl	80a31f8 <__addsf3>
	Serial.println(averageT);
 80a0158:	2202      	movs	r2, #2
		sumT = sumT + t;
 80a015a:	4601      	mov	r1, r0
	Serial.println(averageT);
 80a015c:	4630      	mov	r0, r6
 80a015e:	f000 fdd9 	bl	80a0d14 <_ZN5Print7printlnEfi>

	averageH = sumH/DHTSIZE;
	Serial.print("Promedio temperatura: ");
 80a0162:	f000 ff87 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a0166:	4639      	mov	r1, r7
 80a0168:	f000 fccc 	bl	80a0b04 <_ZN5Print5printEPKc>
	Serial.println(averageH);
 80a016c:	f000 ff82 	bl	80a1074 <_Z16_fetch_usbserialv>
		sumH = sumH + h;
 80a0170:	2100      	movs	r1, #0
	Serial.println(averageH);
 80a0172:	4605      	mov	r5, r0
		sumH = sumH + h;
 80a0174:	4620      	mov	r0, r4
 80a0176:	f003 f83f 	bl	80a31f8 <__addsf3>
	Serial.println(averageH);
 80a017a:	2202      	movs	r2, #2
		sumH = sumH + h;
 80a017c:	4601      	mov	r1, r0
	Serial.println(averageH);
 80a017e:	4628      	mov	r0, r5

	//Send averages to the cloud
}
 80a0180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Serial.println(averageH);
 80a0184:	f000 bdc6 	b.w	80a0d14 <_ZN5Print7printlnEfi>
 80a0188:	20000084 	.word	0x20000084
 80a018c:	080a3856 	.word	0x080a3856
 80a0190:	080a3831 	.word	0x080a3831
 80a0194:	080a383e 	.word	0x080a383e
 80a0198:	080a3848 	.word	0x080a3848

080a019c <_Z9lightReadv>:

void lightRead(){
 80a019c:	b538      	push	{r3, r4, r5, lr}
	float l = 0;
	float sumL = 0;
	float averageL = 0;

	for (int i = 0 ; i < LUXSIZE ; i++){
		l = luxSensors[i].getLux(true);
 80a019e:	2101      	movs	r1, #1
 80a01a0:	4818      	ldr	r0, [pc, #96]	; (80a0204 <_Z9lightReadv+0x68>)
 80a01a2:	f000 f889 	bl	80a02b8 <_ZN10GA1A12S2026getLuxEb>
 80a01a6:	4604      	mov	r4, r0

		Serial.print("Sensor LUX: ");
 80a01a8:	f000 ff64 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a01ac:	4916      	ldr	r1, [pc, #88]	; (80a0208 <_Z9lightReadv+0x6c>)
 80a01ae:	f000 fca9 	bl	80a0b04 <_ZN5Print5printEPKc>
		Serial.println(i);
 80a01b2:	f000 ff5f 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a01b6:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80a01b8:	220a      	movs	r2, #10
 80a01ba:	2100      	movs	r1, #0
 80a01bc:	f000 fcbf 	bl	80a0b3e <_ZN5Print11printNumberEmh>
        n += println();
 80a01c0:	4628      	mov	r0, r5
 80a01c2:	f000 fca6 	bl	80a0b12 <_ZN5Print7printlnEv>
		Serial.print("Luz: ");
 80a01c6:	f000 ff55 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a01ca:	4910      	ldr	r1, [pc, #64]	; (80a020c <_Z9lightReadv+0x70>)
 80a01cc:	f000 fc9a 	bl	80a0b04 <_ZN5Print5printEPKc>
		Serial.println(l); 
 80a01d0:	f000 ff50 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a01d4:	2202      	movs	r2, #2
 80a01d6:	4621      	mov	r1, r4
 80a01d8:	f000 fd9c 	bl	80a0d14 <_ZN5Print7printlnEfi>

		sumL = sumL + l;
	}

	averageL = sumL/LUXSIZE;
	Serial.print("Promedio temperatura: ");
 80a01dc:	f000 ff4a 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a01e0:	490b      	ldr	r1, [pc, #44]	; (80a0210 <_Z9lightReadv+0x74>)
 80a01e2:	f000 fc8f 	bl	80a0b04 <_ZN5Print5printEPKc>
	Serial.println(averageL);
 80a01e6:	f000 ff45 	bl	80a1074 <_Z16_fetch_usbserialv>
		sumL = sumL + l;
 80a01ea:	2100      	movs	r1, #0
	Serial.println(averageL);
 80a01ec:	4605      	mov	r5, r0
		sumL = sumL + l;
 80a01ee:	4620      	mov	r0, r4
 80a01f0:	f003 f802 	bl	80a31f8 <__addsf3>
	Serial.println(averageL);
 80a01f4:	2202      	movs	r2, #2
		sumL = sumL + l;
 80a01f6:	4601      	mov	r1, r0
	Serial.println(averageL);
 80a01f8:	4628      	mov	r0, r5
}
 80a01fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Serial.println(averageL);
 80a01fe:	f000 bd89 	b.w	80a0d14 <_ZN5Print7printlnEfi>
 80a0202:	bf00      	nop
 80a0204:	200000a4 	.word	0x200000a4
 80a0208:	080a386d 	.word	0x080a386d
 80a020c:	080a387a 	.word	0x080a387a
 80a0210:	080a3856 	.word	0x080a3856

080a0214 <loop>:
void loop() {
 80a0214:	b508      	push	{r3, lr}
	tempRead();
 80a0216:	f7ff ff63 	bl	80a00e0 <_Z8tempReadv>
	lightRead();
 80a021a:	f7ff ffbf 	bl	80a019c <_Z9lightReadv>
}
 80a021e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay(5000);
 80a0222:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0226:	f000 bd9b 	b.w	80a0d60 <delay>
	...

080a022c <_GLOBAL__sub_I_dht1>:
}
 80a022c:	b538      	push	{r3, r4, r5, lr}
DHT dht1(DHTPIN, DHTYPE);
 80a022e:	4c0b      	ldr	r4, [pc, #44]	; (80a025c <_GLOBAL__sub_I_dht1+0x30>)
DHT dhtSensors[] = {dht1};
 80a0230:	4d0b      	ldr	r5, [pc, #44]	; (80a0260 <_GLOBAL__sub_I_dht1+0x34>)
DHT dht1(DHTPIN, DHTYPE);
 80a0232:	2306      	movs	r3, #6
 80a0234:	220b      	movs	r2, #11
 80a0236:	2108      	movs	r1, #8
 80a0238:	4620      	mov	r0, r4
 80a023a:	f000 f857 	bl	80a02ec <_ZN3DHTC1Ehhh>
DHT dhtSensors[] = {dht1};
 80a023e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0242:	6823      	ldr	r3, [r4, #0]
GA1A12S202 lux1(A5);
 80a0244:	4c07      	ldr	r4, [pc, #28]	; (80a0264 <_GLOBAL__sub_I_dht1+0x38>)
 80a0246:	210f      	movs	r1, #15
 80a0248:	4620      	mov	r0, r4
DHT dhtSensors[] = {dht1};
 80a024a:	602b      	str	r3, [r5, #0]
GA1A12S202 lux1(A5);
 80a024c:	f000 f80e 	bl	80a026c <_ZN10GA1A12S202C1Ei>
GA1A12S202 luxSensors[] = {lux1};
 80a0250:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80a0254:	4b04      	ldr	r3, [pc, #16]	; (80a0268 <_GLOBAL__sub_I_dht1+0x3c>)
 80a0256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80a025a:	bd38      	pop	{r3, r4, r5, pc}
 80a025c:	20000070 	.word	0x20000070
 80a0260:	20000084 	.word	0x20000084
 80a0264:	20000098 	.word	0x20000098
 80a0268:	200000a4 	.word	0x200000a4

080a026c <_ZN10GA1A12S202C1Ei>:
#include "GA1A12S202.h"

GA1A12S202::GA1A12S202(int pin) {
 80a026c:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80a0270:	6042      	str	r2, [r0, #4]
 80a0272:	4a02      	ldr	r2, [pc, #8]	; (80a027c <_ZN10GA1A12S202C1Ei+0x10>)
    _pin = pin;
 80a0274:	6001      	str	r1, [r0, #0]
GA1A12S202::GA1A12S202(int pin) {
 80a0276:	6082      	str	r2, [r0, #8]
}
 80a0278:	4770      	bx	lr
 80a027a:	bf00      	nop
 80a027c:	40a00000 	.word	0x40a00000

080a0280 <_ZN10GA1A12S2026getRawEb>:
int GA1A12S202::getRaw() {
    return getRaw(false);
}


int GA1A12S202::getRaw(bool smooth=false) {
 80a0280:	b570      	push	{r4, r5, r6, lr}
 80a0282:	460c      	mov	r4, r1
 80a0284:	4605      	mov	r5, r0
    delay(1);
 80a0286:	2001      	movs	r0, #1
 80a0288:	f000 fd6a 	bl	80a0d60 <delay>
    
    if(smooth==true) {
 80a028c:	b174      	cbz	r4, 80a02ac <_ZN10GA1A12S2026getRawEb+0x2c>
 80a028e:	2664      	movs	r6, #100	; 0x64
        int total = 0;
 80a0290:	2400      	movs	r4, #0
        
        for(int i=0; i<100; i++) {
            total += analogRead(_pin);
 80a0292:	8828      	ldrh	r0, [r5, #0]
 80a0294:	f001 f927 	bl	80a14e6 <analogRead>
 80a0298:	4404      	add	r4, r0
            delay(1);
 80a029a:	2001      	movs	r0, #1
 80a029c:	f000 fd60 	bl	80a0d60 <delay>
        for(int i=0; i<100; i++) {
 80a02a0:	3e01      	subs	r6, #1
 80a02a2:	d1f6      	bne.n	80a0292 <_ZN10GA1A12S2026getRawEb+0x12>
        }
        
        return(total/100);
 80a02a4:	2064      	movs	r0, #100	; 0x64
 80a02a6:	fb94 f0f0 	sdiv	r0, r4, r0
    } else
        return analogRead(_pin);
}
 80a02aa:	bd70      	pop	{r4, r5, r6, pc}
        return analogRead(_pin);
 80a02ac:	8828      	ldrh	r0, [r5, #0]
}
 80a02ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return analogRead(_pin);
 80a02b2:	f001 b918 	b.w	80a14e6 <analogRead>
	...

080a02b8 <_ZN10GA1A12S2026getLuxEb>:
float GA1A12S202::getLux() {
    return getLux(false);
}


float GA1A12S202::getLux(bool smooth=false) {
 80a02b8:	b510      	push	{r4, lr}
 80a02ba:	4604      	mov	r4, r0
    int raw = getRaw(smooth);
 80a02bc:	f7ff ffe0 	bl	80a0280 <_ZN10GA1A12S2026getRawEb>
    float logLux = raw * _logRange / _rawRange;
 80a02c0:	f003 f84e 	bl	80a3360 <__aeabi_i2f>
 80a02c4:	68a1      	ldr	r1, [r4, #8]
 80a02c6:	f003 f89f 	bl	80a3408 <__aeabi_fmul>
 80a02ca:	6861      	ldr	r1, [r4, #4]
 80a02cc:	f003 f950 	bl	80a3570 <__aeabi_fdiv>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80a02d0:	f002 fbec 	bl	80a2aac <__aeabi_f2d>
 80a02d4:	4602      	mov	r2, r0
 80a02d6:	460b      	mov	r3, r1
 80a02d8:	2000      	movs	r0, #0
 80a02da:	4903      	ldr	r1, [pc, #12]	; (80a02e8 <_ZN10GA1A12S2026getLuxEb+0x30>)
 80a02dc:	f001 f96a 	bl	80a15b4 <pow>
    
    return pow(10, logLux);
 80a02e0:	f002 ff34 	bl	80a314c <__aeabi_d2f>
}
 80a02e4:	bd10      	pop	{r4, pc}
 80a02e6:	bf00      	nop
 80a02e8:	40240000 	.word	0x40240000

080a02ec <_ZN3DHTC1Ehhh>:
#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
	_type = type;
	_count = count;
 80a02ec:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 80a02ee:	2301      	movs	r3, #1
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 80a02f0:	b510      	push	{r4, lr}
	_pin = pin;
 80a02f2:	7181      	strb	r1, [r0, #6]
	_type = type;
 80a02f4:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
 80a02f6:	7403      	strb	r3, [r0, #16]
}
 80a02f8:	bd10      	pop	{r4, pc}
	...

080a02fc <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a02fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0300:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0302:	4c1a      	ldr	r4, [pc, #104]	; (80a036c <_ZN3DHT5beginEv+0x70>)
// set up the pins!
	pinMode(_pin, INPUT);
 80a0304:	2100      	movs	r1, #0
 80a0306:	7980      	ldrb	r0, [r0, #6]
 80a0308:	f001 f8dc 	bl	80a14c4 <pinMode>
	pinSetFast(_pin);
 80a030c:	79ae      	ldrb	r6, [r5, #6]
 80a030e:	7823      	ldrb	r3, [r4, #0]
 80a0310:	4f17      	ldr	r7, [pc, #92]	; (80a0370 <_ZN3DHT5beginEv+0x74>)
 80a0312:	f013 0f01 	tst.w	r3, #1
 80a0316:	f3bf 8f5b 	dmb	ish
 80a031a:	d109      	bne.n	80a0330 <_ZN3DHT5beginEv+0x34>
 80a031c:	4620      	mov	r0, r4
 80a031e:	f7ff fec0 	bl	80a00a2 <__cxa_guard_acquire>
 80a0322:	b128      	cbz	r0, 80a0330 <_ZN3DHT5beginEv+0x34>
 80a0324:	f000 f9d8 	bl	80a06d8 <HAL_Pin_Map>
 80a0328:	6038      	str	r0, [r7, #0]
 80a032a:	4620      	mov	r0, r4
 80a032c:	f7ff febe 	bl	80a00ac <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0330:	231c      	movs	r3, #28
 80a0332:	435e      	muls	r6, r3
 80a0334:	683b      	ldr	r3, [r7, #0]
 80a0336:	eb03 0806 	add.w	r8, r3, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a033a:	7823      	ldrb	r3, [r4, #0]
 80a033c:	f3bf 8f5b 	dmb	ish
 80a0340:	07db      	lsls	r3, r3, #31
 80a0342:	d409      	bmi.n	80a0358 <_ZN3DHT5beginEv+0x5c>
 80a0344:	4809      	ldr	r0, [pc, #36]	; (80a036c <_ZN3DHT5beginEv+0x70>)
 80a0346:	f7ff feac 	bl	80a00a2 <__cxa_guard_acquire>
 80a034a:	b128      	cbz	r0, 80a0358 <_ZN3DHT5beginEv+0x5c>
 80a034c:	f000 f9c4 	bl	80a06d8 <HAL_Pin_Map>
 80a0350:	6038      	str	r0, [r7, #0]
 80a0352:	4806      	ldr	r0, [pc, #24]	; (80a036c <_ZN3DHT5beginEv+0x70>)
 80a0354:	f7ff feaa 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0358:	683b      	ldr	r3, [r7, #0]
 80a035a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a035e:	599b      	ldr	r3, [r3, r6]
 80a0360:	831a      	strh	r2, [r3, #24]
	_lastreadtime = 0;
 80a0362:	2300      	movs	r3, #0
 80a0364:	60eb      	str	r3, [r5, #12]
}
 80a0366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a036a:	bf00      	nop
 80a036c:	200000b0 	.word	0x200000b0
 80a0370:	200000b4 	.word	0x200000b4

080a0374 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
 80a0374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0378:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a037a:	f000 f9ed 	bl	80a0758 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 80a037e:	68e3      	ldr	r3, [r4, #12]
 80a0380:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 80a0382:	bf84      	itt	hi
 80a0384:	2300      	movhi	r3, #0
 80a0386:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a0388:	7c23      	ldrb	r3, [r4, #16]
 80a038a:	b92b      	cbnz	r3, 80a0398 <_ZN3DHT4readEv+0x24>
 80a038c:	68e3      	ldr	r3, [r4, #12]
 80a038e:	1ac0      	subs	r0, r0, r3
 80a0390:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a0394:	f0c0 813e 	bcc.w	80a0614 <_ZN3DHT4readEv+0x2a0>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 80a0398:	2500      	movs	r5, #0
 80a039a:	7425      	strb	r5, [r4, #16]
 80a039c:	f000 f9dc 	bl	80a0758 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a03a0:	4e9e      	ldr	r6, [pc, #632]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a03a2:	6025      	str	r5, [r4, #0]
 80a03a4:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
 80a03a6:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
 80a03a8:	79a7      	ldrb	r7, [r4, #6]
 80a03aa:	7833      	ldrb	r3, [r6, #0]
 80a03ac:	4d9c      	ldr	r5, [pc, #624]	; (80a0620 <_ZN3DHT4readEv+0x2ac>)
 80a03ae:	f013 0f01 	tst.w	r3, #1
 80a03b2:	f3bf 8f5b 	dmb	ish
 80a03b6:	d109      	bne.n	80a03cc <_ZN3DHT4readEv+0x58>
 80a03b8:	4630      	mov	r0, r6
 80a03ba:	f7ff fe72 	bl	80a00a2 <__cxa_guard_acquire>
 80a03be:	b128      	cbz	r0, 80a03cc <_ZN3DHT4readEv+0x58>
 80a03c0:	f000 f98a 	bl	80a06d8 <HAL_Pin_Map>
 80a03c4:	6028      	str	r0, [r5, #0]
 80a03c6:	4630      	mov	r0, r6
 80a03c8:	f7ff fe70 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a03cc:	231c      	movs	r3, #28
 80a03ce:	435f      	muls	r7, r3
 80a03d0:	682b      	ldr	r3, [r5, #0]
 80a03d2:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a03d6:	7833      	ldrb	r3, [r6, #0]
 80a03d8:	f3bf 8f5b 	dmb	ish
 80a03dc:	07d9      	lsls	r1, r3, #31
 80a03de:	d409      	bmi.n	80a03f4 <_ZN3DHT4readEv+0x80>
 80a03e0:	488e      	ldr	r0, [pc, #568]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a03e2:	f7ff fe5e 	bl	80a00a2 <__cxa_guard_acquire>
 80a03e6:	b128      	cbz	r0, 80a03f4 <_ZN3DHT4readEv+0x80>
 80a03e8:	f000 f976 	bl	80a06d8 <HAL_Pin_Map>
 80a03ec:	6028      	str	r0, [r5, #0]
 80a03ee:	488b      	ldr	r0, [pc, #556]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a03f0:	f7ff fe5c 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a03f4:	682b      	ldr	r3, [r5, #0]
 80a03f6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a03fa:	59db      	ldr	r3, [r3, r7]
	delay(250);
 80a03fc:	20fa      	movs	r0, #250	; 0xfa
 80a03fe:	831a      	strh	r2, [r3, #24]
 80a0400:	f000 fcae 	bl	80a0d60 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 80a0404:	2101      	movs	r1, #1
 80a0406:	79a0      	ldrb	r0, [r4, #6]
 80a0408:	f001 f85c 	bl	80a14c4 <pinMode>
	pinResetFast(_pin);
 80a040c:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a040e:	7833      	ldrb	r3, [r6, #0]
 80a0410:	f3bf 8f5b 	dmb	ish
 80a0414:	07da      	lsls	r2, r3, #31
 80a0416:	d409      	bmi.n	80a042c <_ZN3DHT4readEv+0xb8>
 80a0418:	4880      	ldr	r0, [pc, #512]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a041a:	f7ff fe42 	bl	80a00a2 <__cxa_guard_acquire>
 80a041e:	b128      	cbz	r0, 80a042c <_ZN3DHT4readEv+0xb8>
 80a0420:	f000 f95a 	bl	80a06d8 <HAL_Pin_Map>
 80a0424:	6028      	str	r0, [r5, #0]
 80a0426:	487d      	ldr	r0, [pc, #500]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a0428:	f7ff fe40 	bl	80a00ac <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a042c:	231c      	movs	r3, #28
 80a042e:	435f      	muls	r7, r3
 80a0430:	682b      	ldr	r3, [r5, #0]
 80a0432:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0436:	7833      	ldrb	r3, [r6, #0]
 80a0438:	f3bf 8f5b 	dmb	ish
 80a043c:	07db      	lsls	r3, r3, #31
 80a043e:	d409      	bmi.n	80a0454 <_ZN3DHT4readEv+0xe0>
 80a0440:	4876      	ldr	r0, [pc, #472]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a0442:	f7ff fe2e 	bl	80a00a2 <__cxa_guard_acquire>
 80a0446:	b128      	cbz	r0, 80a0454 <_ZN3DHT4readEv+0xe0>
 80a0448:	f000 f946 	bl	80a06d8 <HAL_Pin_Map>
 80a044c:	6028      	str	r0, [r5, #0]
 80a044e:	4873      	ldr	r0, [pc, #460]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a0450:	f7ff fe2c 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a0454:	682b      	ldr	r3, [r5, #0]
 80a0456:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a045a:	59db      	ldr	r3, [r3, r7]
	delay(20);
 80a045c:	2014      	movs	r0, #20
 80a045e:	835a      	strh	r2, [r3, #26]
 80a0460:	f000 fc7e 	bl	80a0d60 <delay>
	noInterrupts();
 80a0464:	f000 fe64 	bl	80a1130 <_Z12noInterruptsv>
	pinSetFast(_pin);
 80a0468:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a046a:	7833      	ldrb	r3, [r6, #0]
 80a046c:	f3bf 8f5b 	dmb	ish
 80a0470:	07d8      	lsls	r0, r3, #31
 80a0472:	d409      	bmi.n	80a0488 <_ZN3DHT4readEv+0x114>
 80a0474:	4869      	ldr	r0, [pc, #420]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a0476:	f7ff fe14 	bl	80a00a2 <__cxa_guard_acquire>
 80a047a:	b128      	cbz	r0, 80a0488 <_ZN3DHT4readEv+0x114>
 80a047c:	f000 f92c 	bl	80a06d8 <HAL_Pin_Map>
 80a0480:	6028      	str	r0, [r5, #0]
 80a0482:	4866      	ldr	r0, [pc, #408]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a0484:	f7ff fe12 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0488:	231c      	movs	r3, #28
 80a048a:	435f      	muls	r7, r3
 80a048c:	682b      	ldr	r3, [r5, #0]
 80a048e:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0492:	7833      	ldrb	r3, [r6, #0]
 80a0494:	f3bf 8f5b 	dmb	ish
 80a0498:	07d9      	lsls	r1, r3, #31
 80a049a:	d409      	bmi.n	80a04b0 <_ZN3DHT4readEv+0x13c>
 80a049c:	485f      	ldr	r0, [pc, #380]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a049e:	f7ff fe00 	bl	80a00a2 <__cxa_guard_acquire>
 80a04a2:	b128      	cbz	r0, 80a04b0 <_ZN3DHT4readEv+0x13c>
 80a04a4:	f000 f918 	bl	80a06d8 <HAL_Pin_Map>
 80a04a8:	6028      	str	r0, [r5, #0]
 80a04aa:	485c      	ldr	r0, [pc, #368]	; (80a061c <_ZN3DHT4readEv+0x2a8>)
 80a04ac:	f7ff fdfe 	bl	80a00ac <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a04b0:	682b      	ldr	r3, [r5, #0]
 80a04b2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a04b6:	59db      	ldr	r3, [r3, r7]
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 80a04b8:	2700      	movs	r7, #0
 80a04ba:	831a      	strh	r2, [r3, #24]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a04bc:	2028      	movs	r0, #40	; 0x28
 80a04be:	f000 f943 	bl	80a0748 <HAL_Delay_Microseconds>
	pinMode(_pin, INPUT);
 80a04c2:	2100      	movs	r1, #0
 80a04c4:	79a0      	ldrb	r0, [r4, #6]
 80a04c6:	f000 fffd 	bl	80a14c4 <pinMode>
	uint8_t laststate = HIGH;
 80a04ca:	2301      	movs	r3, #1
	uint8_t j = 0, i;
 80a04cc:	46ba      	mov	sl, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a04ce:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80a061c <_ZN3DHT4readEv+0x2a8>
	uint8_t laststate = HIGH;
 80a04d2:	9300      	str	r3, [sp, #0]
		counter = 0;
 80a04d4:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
 80a04d8:	f894 b006 	ldrb.w	fp, [r4, #6]
 80a04dc:	7833      	ldrb	r3, [r6, #0]
 80a04de:	f3bf 8f5b 	dmb	ish
 80a04e2:	07da      	lsls	r2, r3, #31
 80a04e4:	d409      	bmi.n	80a04fa <_ZN3DHT4readEv+0x186>
 80a04e6:	4640      	mov	r0, r8
 80a04e8:	f7ff fddb 	bl	80a00a2 <__cxa_guard_acquire>
 80a04ec:	b128      	cbz	r0, 80a04fa <_ZN3DHT4readEv+0x186>
 80a04ee:	f000 f8f3 	bl	80a06d8 <HAL_Pin_Map>
 80a04f2:	6028      	str	r0, [r5, #0]
 80a04f4:	4640      	mov	r0, r8
 80a04f6:	f7ff fdd9 	bl	80a00ac <__cxa_guard_release>
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a04fa:	231c      	movs	r3, #28
 80a04fc:	fb03 fb0b 	mul.w	fp, r3, fp
 80a0500:	682b      	ldr	r3, [r5, #0]
 80a0502:	f853 300b 	ldr.w	r3, [r3, fp]
 80a0506:	691b      	ldr	r3, [r3, #16]
 80a0508:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a050a:	7833      	ldrb	r3, [r6, #0]
 80a050c:	f3bf 8f5b 	dmb	ish
 80a0510:	07db      	lsls	r3, r3, #31
 80a0512:	d409      	bmi.n	80a0528 <_ZN3DHT4readEv+0x1b4>
 80a0514:	4640      	mov	r0, r8
 80a0516:	f7ff fdc4 	bl	80a00a2 <__cxa_guard_acquire>
 80a051a:	b128      	cbz	r0, 80a0528 <_ZN3DHT4readEv+0x1b4>
 80a051c:	f000 f8dc 	bl	80a06d8 <HAL_Pin_Map>
 80a0520:	6028      	str	r0, [r5, #0]
 80a0522:	4640      	mov	r0, r8
 80a0524:	f7ff fdc2 	bl	80a00ac <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0528:	682b      	ldr	r3, [r5, #0]
 80a052a:	9a01      	ldr	r2, [sp, #4]
 80a052c:	445b      	add	r3, fp
 80a052e:	889b      	ldrh	r3, [r3, #4]
 80a0530:	4213      	tst	r3, r2
 80a0532:	bf14      	ite	ne
 80a0534:	2301      	movne	r3, #1
 80a0536:	2300      	moveq	r3, #0
 80a0538:	9a00      	ldr	r2, [sp, #0]
 80a053a:	4293      	cmp	r3, r2
 80a053c:	d109      	bne.n	80a0552 <_ZN3DHT4readEv+0x1de>
			counter++;
 80a053e:	f109 0901 	add.w	r9, r9, #1
 80a0542:	2001      	movs	r0, #1
 80a0544:	fa5f f989 	uxtb.w	r9, r9
 80a0548:	f000 f8fe 	bl	80a0748 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
 80a054c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80a0550:	d1c2      	bne.n	80a04d8 <_ZN3DHT4readEv+0x164>
				break;
			}
		}
		laststate = pinReadFast(_pin);
 80a0552:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0556:	7833      	ldrb	r3, [r6, #0]
 80a0558:	f3bf 8f5b 	dmb	ish
 80a055c:	07d8      	lsls	r0, r3, #31
 80a055e:	d409      	bmi.n	80a0574 <_ZN3DHT4readEv+0x200>
 80a0560:	4640      	mov	r0, r8
 80a0562:	f7ff fd9e 	bl	80a00a2 <__cxa_guard_acquire>
 80a0566:	b128      	cbz	r0, 80a0574 <_ZN3DHT4readEv+0x200>
 80a0568:	f000 f8b6 	bl	80a06d8 <HAL_Pin_Map>
 80a056c:	6028      	str	r0, [r5, #0]
 80a056e:	4640      	mov	r0, r8
 80a0570:	f7ff fd9c 	bl	80a00ac <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0574:	231c      	movs	r3, #28
 80a0576:	fb03 fb0b 	mul.w	fp, r3, fp
 80a057a:	682b      	ldr	r3, [r5, #0]
 80a057c:	f853 300b 	ldr.w	r3, [r3, fp]
 80a0580:	691b      	ldr	r3, [r3, #16]
 80a0582:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0584:	7833      	ldrb	r3, [r6, #0]
 80a0586:	f3bf 8f5b 	dmb	ish
 80a058a:	07d9      	lsls	r1, r3, #31
 80a058c:	d409      	bmi.n	80a05a2 <_ZN3DHT4readEv+0x22e>
 80a058e:	4640      	mov	r0, r8
 80a0590:	f7ff fd87 	bl	80a00a2 <__cxa_guard_acquire>
 80a0594:	b128      	cbz	r0, 80a05a2 <_ZN3DHT4readEv+0x22e>
 80a0596:	f000 f89f 	bl	80a06d8 <HAL_Pin_Map>
 80a059a:	6028      	str	r0, [r5, #0]
 80a059c:	4640      	mov	r0, r8
 80a059e:	f7ff fd85 	bl	80a00ac <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a05a2:	682b      	ldr	r3, [r5, #0]
 80a05a4:	9a00      	ldr	r2, [sp, #0]
 80a05a6:	445b      	add	r3, fp
 80a05a8:	889b      	ldrh	r3, [r3, #4]
 80a05aa:	4213      	tst	r3, r2
 80a05ac:	bf14      	ite	ne
 80a05ae:	2301      	movne	r3, #1
 80a05b0:	2300      	moveq	r3, #0

		if (counter == 255) break;
 80a05b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
 80a05b6:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
 80a05b8:	d018      	beq.n	80a05ec <_ZN3DHT4readEv+0x278>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 80a05ba:	2f03      	cmp	r7, #3
 80a05bc:	d911      	bls.n	80a05e2 <_ZN3DHT4readEv+0x26e>
 80a05be:	07fa      	lsls	r2, r7, #31
 80a05c0:	d40f      	bmi.n	80a05e2 <_ZN3DHT4readEv+0x26e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a05c2:	ea4f 02da 	mov.w	r2, sl, lsr #3
 80a05c6:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 80a05c8:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
 80a05cc:	005b      	lsls	r3, r3, #1
 80a05ce:	b2db      	uxtb	r3, r3
 80a05d0:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 80a05d2:	7a21      	ldrb	r1, [r4, #8]
			j++;
 80a05d4:	fa5f fa8a 	uxtb.w	sl, sl
			if (counter > _count)
 80a05d8:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 80a05da:	bf3c      	itt	cc
 80a05dc:	f043 0301 	orrcc.w	r3, r3, #1
 80a05e0:	54a3      	strbcc	r3, [r4, r2]
	for ( i=0; i< MAXTIMINGS; i++) {
 80a05e2:	3701      	adds	r7, #1
 80a05e4:	b2ff      	uxtb	r7, r7
 80a05e6:	2f55      	cmp	r7, #85	; 0x55
 80a05e8:	f47f af74 	bne.w	80a04d4 <_ZN3DHT4readEv+0x160>
		}
	}

	interrupts();
 80a05ec:	f000 fda2 	bl	80a1134 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 80a05f0:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
 80a05f4:	d910      	bls.n	80a0618 <_ZN3DHT4readEv+0x2a4>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
 80a05f6:	7863      	ldrb	r3, [r4, #1]
 80a05f8:	7820      	ldrb	r0, [r4, #0]
 80a05fa:	4418      	add	r0, r3
 80a05fc:	78a3      	ldrb	r3, [r4, #2]
 80a05fe:	4418      	add	r0, r3
 80a0600:	78e3      	ldrb	r3, [r4, #3]
 80a0602:	4418      	add	r0, r3
 80a0604:	7923      	ldrb	r3, [r4, #4]
 80a0606:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
 80a0608:	1ac3      	subs	r3, r0, r3
 80a060a:	4258      	negs	r0, r3
 80a060c:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
 80a060e:	b003      	add	sp, #12
 80a0610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
 80a0614:	2001      	movs	r0, #1
 80a0616:	e7fa      	b.n	80a060e <_ZN3DHT4readEv+0x29a>
	return false;
 80a0618:	2000      	movs	r0, #0
 80a061a:	e7f8      	b.n	80a060e <_ZN3DHT4readEv+0x29a>
 80a061c:	200000b0 	.word	0x200000b0
 80a0620:	200000b4 	.word	0x200000b4

080a0624 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
 80a0624:	b570      	push	{r4, r5, r6, lr}
 80a0626:	4604      	mov	r4, r0
	if (read()) {
 80a0628:	f7ff fea4 	bl	80a0374 <_ZN3DHT4readEv>
 80a062c:	b308      	cbz	r0, 80a0672 <_ZN3DHT15readTemperatureEv+0x4e>
		switch (_type) {
 80a062e:	79e3      	ldrb	r3, [r4, #7]
 80a0630:	2b0b      	cmp	r3, #11
 80a0632:	d01a      	beq.n	80a066a <_ZN3DHT15readTemperatureEv+0x46>
 80a0634:	3b15      	subs	r3, #21
 80a0636:	2b01      	cmp	r3, #1
 80a0638:	d81b      	bhi.n	80a0672 <_ZN3DHT15readTemperatureEv+0x4e>
				f = data[2] & 0x7F;
 80a063a:	78a6      	ldrb	r6, [r4, #2]
 80a063c:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80a0640:	f002 fe8e 	bl	80a3360 <__aeabi_i2f>
				f *= 256;
 80a0644:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a0648:	f002 fede 	bl	80a3408 <__aeabi_fmul>
 80a064c:	4605      	mov	r5, r0
				f += data[3];
 80a064e:	78e0      	ldrb	r0, [r4, #3]
 80a0650:	f002 fe86 	bl	80a3360 <__aeabi_i2f>
 80a0654:	4629      	mov	r1, r5
 80a0656:	f002 fdcf 	bl	80a31f8 <__addsf3>
				f /= 10;
 80a065a:	4907      	ldr	r1, [pc, #28]	; (80a0678 <_ZN3DHT15readTemperatureEv+0x54>)
 80a065c:	f002 ff88 	bl	80a3570 <__aeabi_fdiv>
				if (data[2] & 0x80)
 80a0660:	0633      	lsls	r3, r6, #24
 80a0662:	d505      	bpl.n	80a0670 <_ZN3DHT15readTemperatureEv+0x4c>
					f *= -1;
 80a0664:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a0668:	e002      	b.n	80a0670 <_ZN3DHT15readTemperatureEv+0x4c>
				f = data[2];
 80a066a:	78a0      	ldrb	r0, [r4, #2]
 80a066c:	f002 fe74 	bl	80a3358 <__aeabi_ui2f>
}
 80a0670:	bd70      	pop	{r4, r5, r6, pc}
		switch (_type) {
 80a0672:	4802      	ldr	r0, [pc, #8]	; (80a067c <_ZN3DHT15readTemperatureEv+0x58>)
 80a0674:	e7fc      	b.n	80a0670 <_ZN3DHT15readTemperatureEv+0x4c>
 80a0676:	bf00      	nop
 80a0678:	41200000 	.word	0x41200000
 80a067c:	7fc00000 	.word	0x7fc00000

080a0680 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
 80a0680:	f7ff bfd0 	b.w	80a0624 <_ZN3DHT15readTemperatureEv>

080a0684 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
 80a0684:	b538      	push	{r3, r4, r5, lr}
 80a0686:	4604      	mov	r4, r0
	if (read()) {
 80a0688:	f7ff fe74 	bl	80a0374 <_ZN3DHT4readEv>
 80a068c:	b1d8      	cbz	r0, 80a06c6 <_ZN3DHT12readHumidityEv+0x42>
		switch (_type) {
 80a068e:	79e3      	ldrb	r3, [r4, #7]
 80a0690:	2b0b      	cmp	r3, #11
 80a0692:	d014      	beq.n	80a06be <_ZN3DHT12readHumidityEv+0x3a>
 80a0694:	3b15      	subs	r3, #21
 80a0696:	2b01      	cmp	r3, #1
 80a0698:	d815      	bhi.n	80a06c6 <_ZN3DHT12readHumidityEv+0x42>
				f = data[0];
 80a069a:	7820      	ldrb	r0, [r4, #0]
 80a069c:	f002 fe5c 	bl	80a3358 <__aeabi_ui2f>
				f *= 256;
 80a06a0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a06a4:	f002 feb0 	bl	80a3408 <__aeabi_fmul>
 80a06a8:	4605      	mov	r5, r0
				f += data[1];
 80a06aa:	7860      	ldrb	r0, [r4, #1]
 80a06ac:	f002 fe58 	bl	80a3360 <__aeabi_i2f>
 80a06b0:	4629      	mov	r1, r5
 80a06b2:	f002 fda1 	bl	80a31f8 <__addsf3>
				f /= 10;
 80a06b6:	4905      	ldr	r1, [pc, #20]	; (80a06cc <_ZN3DHT12readHumidityEv+0x48>)
 80a06b8:	f002 ff5a 	bl	80a3570 <__aeabi_fdiv>
}
 80a06bc:	bd38      	pop	{r3, r4, r5, pc}
				f = data[0];
 80a06be:	7820      	ldrb	r0, [r4, #0]
 80a06c0:	f002 fe4a 	bl	80a3358 <__aeabi_ui2f>
				return f;
 80a06c4:	e7fa      	b.n	80a06bc <_ZN3DHT12readHumidityEv+0x38>
		switch (_type) {
 80a06c6:	4802      	ldr	r0, [pc, #8]	; (80a06d0 <_ZN3DHT12readHumidityEv+0x4c>)
 80a06c8:	e7f8      	b.n	80a06bc <_ZN3DHT12readHumidityEv+0x38>
 80a06ca:	bf00      	nop
 80a06cc:	41200000 	.word	0x41200000
 80a06d0:	7fc00000 	.word	0x7fc00000

080a06d4 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
 80a06d4:	f7ff bfd6 	b.w	80a0684 <_ZN3DHT12readHumidityEv>

080a06d8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b02      	ldr	r3, [pc, #8]	; (80a06e4 <HAL_Pin_Map+0xc>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	681b      	ldr	r3, [r3, #0]
 80a06e0:	9301      	str	r3, [sp, #4]
 80a06e2:	bd08      	pop	{r3, pc}
 80a06e4:	080601b0 	.word	0x080601b0

080a06e8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a06e8:	b508      	push	{r3, lr}
 80a06ea:	4b02      	ldr	r3, [pc, #8]	; (80a06f4 <HAL_Validate_Pin_Function+0xc>)
 80a06ec:	681b      	ldr	r3, [r3, #0]
 80a06ee:	685b      	ldr	r3, [r3, #4]
 80a06f0:	9301      	str	r3, [sp, #4]
 80a06f2:	bd08      	pop	{r3, pc}
 80a06f4:	080601b0 	.word	0x080601b0

080a06f8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a06f8:	b508      	push	{r3, lr}
 80a06fa:	4b02      	ldr	r3, [pc, #8]	; (80a0704 <HAL_Pin_Mode+0xc>)
 80a06fc:	681b      	ldr	r3, [r3, #0]
 80a06fe:	689b      	ldr	r3, [r3, #8]
 80a0700:	9301      	str	r3, [sp, #4]
 80a0702:	bd08      	pop	{r3, pc}
 80a0704:	080601b0 	.word	0x080601b0

080a0708 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a0708:	b508      	push	{r3, lr}
 80a070a:	4b02      	ldr	r3, [pc, #8]	; (80a0714 <HAL_Interrupts_Enable_All+0xc>)
 80a070c:	681b      	ldr	r3, [r3, #0]
 80a070e:	6a1b      	ldr	r3, [r3, #32]
 80a0710:	9301      	str	r3, [sp, #4]
 80a0712:	bd08      	pop	{r3, pc}
 80a0714:	080601b0 	.word	0x080601b0

080a0718 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a0718:	b508      	push	{r3, lr}
 80a071a:	4b02      	ldr	r3, [pc, #8]	; (80a0724 <HAL_Interrupts_Disable_All+0xc>)
 80a071c:	681b      	ldr	r3, [r3, #0]
 80a071e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0720:	9301      	str	r3, [sp, #4]
 80a0722:	bd08      	pop	{r3, pc}
 80a0724:	080601b0 	.word	0x080601b0

080a0728 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a0728:	b508      	push	{r3, lr}
 80a072a:	4b02      	ldr	r3, [pc, #8]	; (80a0734 <hal_adc_read+0xc>)
 80a072c:	681b      	ldr	r3, [r3, #0]
 80a072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0730:	9301      	str	r3, [sp, #4]
 80a0732:	bd08      	pop	{r3, pc}
 80a0734:	080601b0 	.word	0x080601b0

080a0738 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0738:	b508      	push	{r3, lr}
 80a073a:	4b02      	ldr	r3, [pc, #8]	; (80a0744 <HAL_RNG_GetRandomNumber+0xc>)
 80a073c:	681b      	ldr	r3, [r3, #0]
 80a073e:	685b      	ldr	r3, [r3, #4]
 80a0740:	9301      	str	r3, [sp, #4]
 80a0742:	bd08      	pop	{r3, pc}
 80a0744:	0806019c 	.word	0x0806019c

080a0748 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0748:	b508      	push	{r3, lr}
 80a074a:	4b02      	ldr	r3, [pc, #8]	; (80a0754 <HAL_Delay_Microseconds+0xc>)
 80a074c:	681b      	ldr	r3, [r3, #0]
 80a074e:	68db      	ldr	r3, [r3, #12]
 80a0750:	9301      	str	r3, [sp, #4]
 80a0752:	bd08      	pop	{r3, pc}
 80a0754:	0806019c 	.word	0x0806019c

080a0758 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0758:	b508      	push	{r3, lr}
 80a075a:	4b02      	ldr	r3, [pc, #8]	; (80a0764 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a075c:	681b      	ldr	r3, [r3, #0]
 80a075e:	695b      	ldr	r3, [r3, #20]
 80a0760:	9301      	str	r3, [sp, #4]
 80a0762:	bd08      	pop	{r3, pc}
 80a0764:	0806019c 	.word	0x0806019c

080a0768 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0768:	b508      	push	{r3, lr}
 80a076a:	4b02      	ldr	r3, [pc, #8]	; (80a0774 <os_mutex_recursive_create+0xc>)
 80a076c:	681b      	ldr	r3, [r3, #0]
 80a076e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0770:	9301      	str	r3, [sp, #4]
 80a0772:	bd08      	pop	{r3, pc}
 80a0774:	080601d0 	.word	0x080601d0

080a0778 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0778:	b508      	push	{r3, lr}
 80a077a:	4b02      	ldr	r3, [pc, #8]	; (80a0784 <os_mutex_recursive_destroy+0xc>)
 80a077c:	681b      	ldr	r3, [r3, #0]
 80a077e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0780:	9301      	str	r3, [sp, #4]
 80a0782:	bd08      	pop	{r3, pc}
 80a0784:	080601d0 	.word	0x080601d0

080a0788 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <hal_usart_init+0xc>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	699b      	ldr	r3, [r3, #24]
 80a0790:	9301      	str	r3, [sp, #4]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	080601c4 	.word	0x080601c4

080a0798 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <hal_usart_write+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601c4 	.word	0x080601c4

080a07a8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <hal_usart_available+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601c4 	.word	0x080601c4

080a07b8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <hal_usart_read+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601c4 	.word	0x080601c4

080a07c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <hal_usart_peek+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601c4 	.word	0x080601c4

080a07d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <hal_usart_flush+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601c4 	.word	0x080601c4

080a07e8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <hal_usart_is_enabled+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601c4 	.word	0x080601c4

080a07f8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <hal_usart_available_data_for_write+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601c4 	.word	0x080601c4

080a0808 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <hal_i2c_write+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601ac 	.word	0x080601ac

080a0818 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <hal_i2c_available+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601ac 	.word	0x080601ac

080a0828 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <hal_i2c_read+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601ac 	.word	0x080601ac

080a0838 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <hal_i2c_peek+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601ac 	.word	0x080601ac

080a0848 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <hal_i2c_flush+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601ac 	.word	0x080601ac

080a0858 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <hal_i2c_is_enabled+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601ac 	.word	0x080601ac

080a0868 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b03      	ldr	r3, [pc, #12]	; (80a0878 <hal_i2c_init+0x10>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0872:	9301      	str	r3, [sp, #4]
 80a0874:	bd08      	pop	{r3, pc}
 80a0876:	0000      	.short	0x0000
 80a0878:	080601ac 	.word	0x080601ac

080a087c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a087c:	b508      	push	{r3, lr}
 80a087e:	4b02      	ldr	r3, [pc, #8]	; (80a0888 <hal_spi_init+0xc>)
 80a0880:	681b      	ldr	r3, [r3, #0]
 80a0882:	69db      	ldr	r3, [r3, #28]
 80a0884:	9301      	str	r3, [sp, #4]
 80a0886:	bd08      	pop	{r3, pc}
 80a0888:	080601b4 	.word	0x080601b4

080a088c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a088c:	b508      	push	{r3, lr}
 80a088e:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <hal_spi_is_enabled+0xc>)
 80a0890:	681b      	ldr	r3, [r3, #0]
 80a0892:	6a1b      	ldr	r3, [r3, #32]
 80a0894:	9301      	str	r3, [sp, #4]
 80a0896:	bd08      	pop	{r3, pc}
 80a0898:	080601b4 	.word	0x080601b4

080a089c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a089c:	b508      	push	{r3, lr}
 80a089e:	4b02      	ldr	r3, [pc, #8]	; (80a08a8 <HAL_USB_USART_Init+0xc>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	681b      	ldr	r3, [r3, #0]
 80a08a4:	9301      	str	r3, [sp, #4]
 80a08a6:	bd08      	pop	{r3, pc}
 80a08a8:	080601d8 	.word	0x080601d8

080a08ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a08ac:	b508      	push	{r3, lr}
 80a08ae:	4b02      	ldr	r3, [pc, #8]	; (80a08b8 <HAL_USB_USART_Begin+0xc>)
 80a08b0:	681b      	ldr	r3, [r3, #0]
 80a08b2:	685b      	ldr	r3, [r3, #4]
 80a08b4:	9301      	str	r3, [sp, #4]
 80a08b6:	bd08      	pop	{r3, pc}
 80a08b8:	080601d8 	.word	0x080601d8

080a08bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a08bc:	b508      	push	{r3, lr}
 80a08be:	4b02      	ldr	r3, [pc, #8]	; (80a08c8 <HAL_USB_USART_Available_Data+0xc>)
 80a08c0:	681b      	ldr	r3, [r3, #0]
 80a08c2:	691b      	ldr	r3, [r3, #16]
 80a08c4:	9301      	str	r3, [sp, #4]
 80a08c6:	bd08      	pop	{r3, pc}
 80a08c8:	080601d8 	.word	0x080601d8

080a08cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a08cc:	b508      	push	{r3, lr}
 80a08ce:	4b02      	ldr	r3, [pc, #8]	; (80a08d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a08d0:	681b      	ldr	r3, [r3, #0]
 80a08d2:	695b      	ldr	r3, [r3, #20]
 80a08d4:	9301      	str	r3, [sp, #4]
 80a08d6:	bd08      	pop	{r3, pc}
 80a08d8:	080601d8 	.word	0x080601d8

080a08dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a08dc:	b508      	push	{r3, lr}
 80a08de:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <HAL_USB_USART_Receive_Data+0xc>)
 80a08e0:	681b      	ldr	r3, [r3, #0]
 80a08e2:	699b      	ldr	r3, [r3, #24]
 80a08e4:	9301      	str	r3, [sp, #4]
 80a08e6:	bd08      	pop	{r3, pc}
 80a08e8:	080601d8 	.word	0x080601d8

080a08ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a08ec:	b508      	push	{r3, lr}
 80a08ee:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <HAL_USB_USART_Send_Data+0xc>)
 80a08f0:	681b      	ldr	r3, [r3, #0]
 80a08f2:	69db      	ldr	r3, [r3, #28]
 80a08f4:	9301      	str	r3, [sp, #4]
 80a08f6:	bd08      	pop	{r3, pc}
 80a08f8:	080601d8 	.word	0x080601d8

080a08fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a08fc:	b508      	push	{r3, lr}
 80a08fe:	4b02      	ldr	r3, [pc, #8]	; (80a0908 <HAL_USB_USART_Flush_Data+0xc>)
 80a0900:	681b      	ldr	r3, [r3, #0]
 80a0902:	6a1b      	ldr	r3, [r3, #32]
 80a0904:	9301      	str	r3, [sp, #4]
 80a0906:	bd08      	pop	{r3, pc}
 80a0908:	080601d8 	.word	0x080601d8

080a090c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a090c:	b508      	push	{r3, lr}
 80a090e:	4b02      	ldr	r3, [pc, #8]	; (80a0918 <inet_gethostbyname+0xc>)
 80a0910:	681b      	ldr	r3, [r3, #0]
 80a0912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0914:	9301      	str	r3, [sp, #4]
 80a0916:	bd08      	pop	{r3, pc}
 80a0918:	080601c0 	.word	0x080601c0

080a091c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a091c:	b508      	push	{r3, lr}
 80a091e:	4b02      	ldr	r3, [pc, #8]	; (80a0928 <set_system_mode+0xc>)
 80a0920:	681b      	ldr	r3, [r3, #0]
 80a0922:	685b      	ldr	r3, [r3, #4]
 80a0924:	9301      	str	r3, [sp, #4]
 80a0926:	bd08      	pop	{r3, pc}
 80a0928:	080601a4 	.word	0x080601a4

080a092c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a092c:	b508      	push	{r3, lr}
 80a092e:	4b02      	ldr	r3, [pc, #8]	; (80a0938 <system_delay_ms+0xc>)
 80a0930:	681b      	ldr	r3, [r3, #0]
 80a0932:	695b      	ldr	r3, [r3, #20]
 80a0934:	9301      	str	r3, [sp, #4]
 80a0936:	bd08      	pop	{r3, pc}
 80a0938:	080601a4 	.word	0x080601a4

080a093c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a093c:	b508      	push	{r3, lr}
 80a093e:	4b03      	ldr	r3, [pc, #12]	; (80a094c <system_ctrl_set_app_request_handler+0x10>)
 80a0940:	681b      	ldr	r3, [r3, #0]
 80a0942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0946:	9301      	str	r3, [sp, #4]
 80a0948:	bd08      	pop	{r3, pc}
 80a094a:	0000      	.short	0x0000
 80a094c:	080601a4 	.word	0x080601a4

080a0950 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b03      	ldr	r3, [pc, #12]	; (80a0960 <system_ctrl_set_result+0x10>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a095a:	9301      	str	r3, [sp, #4]
 80a095c:	bd08      	pop	{r3, pc}
 80a095e:	0000      	.short	0x0000
 80a0960:	080601a4 	.word	0x080601a4

080a0964 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <network_connect+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	685b      	ldr	r3, [r3, #4]
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601c8 	.word	0x080601c8

080a0974 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <network_connecting+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	689b      	ldr	r3, [r3, #8]
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601c8 	.word	0x080601c8

080a0984 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <network_disconnect+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	68db      	ldr	r3, [r3, #12]
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601c8 	.word	0x080601c8

080a0994 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <network_ready+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	691b      	ldr	r3, [r3, #16]
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601c8 	.word	0x080601c8

080a09a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <network_on+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	695b      	ldr	r3, [r3, #20]
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	080601c8 	.word	0x080601c8

080a09b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <network_off+0xc>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	699b      	ldr	r3, [r3, #24]
 80a09bc:	9301      	str	r3, [sp, #4]
 80a09be:	bd08      	pop	{r3, pc}
 80a09c0:	080601c8 	.word	0x080601c8

080a09c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a09c4:	b508      	push	{r3, lr}
 80a09c6:	4b02      	ldr	r3, [pc, #8]	; (80a09d0 <network_listen+0xc>)
 80a09c8:	681b      	ldr	r3, [r3, #0]
 80a09ca:	69db      	ldr	r3, [r3, #28]
 80a09cc:	9301      	str	r3, [sp, #4]
 80a09ce:	bd08      	pop	{r3, pc}
 80a09d0:	080601c8 	.word	0x080601c8

080a09d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a09d4:	b508      	push	{r3, lr}
 80a09d6:	4b02      	ldr	r3, [pc, #8]	; (80a09e0 <network_listening+0xc>)
 80a09d8:	681b      	ldr	r3, [r3, #0]
 80a09da:	6a1b      	ldr	r3, [r3, #32]
 80a09dc:	9301      	str	r3, [sp, #4]
 80a09de:	bd08      	pop	{r3, pc}
 80a09e0:	080601c8 	.word	0x080601c8

080a09e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <network_set_listen_timeout+0xc>)
 80a09e8:	681b      	ldr	r3, [r3, #0]
 80a09ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	bd08      	pop	{r3, pc}
 80a09f0:	080601c8 	.word	0x080601c8

080a09f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a09f4:	b508      	push	{r3, lr}
 80a09f6:	4b02      	ldr	r3, [pc, #8]	; (80a0a00 <network_get_listen_timeout+0xc>)
 80a09f8:	681b      	ldr	r3, [r3, #0]
 80a09fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09fc:	9301      	str	r3, [sp, #4]
 80a09fe:	bd08      	pop	{r3, pc}
 80a0a00:	080601c8 	.word	0x080601c8

080a0a04 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0a04:	b508      	push	{r3, lr}
 80a0a06:	4b02      	ldr	r3, [pc, #8]	; (80a0a10 <network_is_on+0xc>)
 80a0a08:	681b      	ldr	r3, [r3, #0]
 80a0a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a0c:	9301      	str	r3, [sp, #4]
 80a0a0e:	bd08      	pop	{r3, pc}
 80a0a10:	080601c8 	.word	0x080601c8

080a0a14 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0a14:	b508      	push	{r3, lr}
 80a0a16:	4b02      	ldr	r3, [pc, #8]	; (80a0a20 <network_is_off+0xc>)
 80a0a18:	681b      	ldr	r3, [r3, #0]
 80a0a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a1c:	9301      	str	r3, [sp, #4]
 80a0a1e:	bd08      	pop	{r3, pc}
 80a0a20:	080601c8 	.word	0x080601c8

080a0a24 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0a24:	b508      	push	{r3, lr}
 80a0a26:	4b02      	ldr	r3, [pc, #8]	; (80a0a30 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0a28:	681b      	ldr	r3, [r3, #0]
 80a0a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a2c:	9301      	str	r3, [sp, #4]
 80a0a2e:	bd08      	pop	{r3, pc}
 80a0a30:	080601cc 	.word	0x080601cc

080a0a34 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0a34:	b508      	push	{r3, lr}
 80a0a36:	4b02      	ldr	r3, [pc, #8]	; (80a0a40 <malloc+0xc>)
 80a0a38:	681b      	ldr	r3, [r3, #0]
 80a0a3a:	681b      	ldr	r3, [r3, #0]
 80a0a3c:	9301      	str	r3, [sp, #4]
 80a0a3e:	bd08      	pop	{r3, pc}
 80a0a40:	080601a0 	.word	0x080601a0

080a0a44 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0a44:	b508      	push	{r3, lr}
 80a0a46:	4b02      	ldr	r3, [pc, #8]	; (80a0a50 <free+0xc>)
 80a0a48:	681b      	ldr	r3, [r3, #0]
 80a0a4a:	685b      	ldr	r3, [r3, #4]
 80a0a4c:	9301      	str	r3, [sp, #4]
 80a0a4e:	bd08      	pop	{r3, pc}
 80a0a50:	080601a0 	.word	0x080601a0

080a0a54 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a0a54:	b508      	push	{r3, lr}
 80a0a56:	4b02      	ldr	r3, [pc, #8]	; (80a0a60 <__errno+0xc>)
 80a0a58:	681b      	ldr	r3, [r3, #0]
 80a0a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a5c:	9301      	str	r3, [sp, #4]
 80a0a5e:	bd08      	pop	{r3, pc}
 80a0a60:	080601a0 	.word	0x080601a0

080a0a64 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0a64:	b508      	push	{r3, lr}
 80a0a66:	4b02      	ldr	r3, [pc, #8]	; (80a0a70 <newlib_impure_ptr_callback+0xc>)
 80a0a68:	681b      	ldr	r3, [r3, #0]
 80a0a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a6c:	9301      	str	r3, [sp, #4]
 80a0a6e:	bd08      	pop	{r3, pc}
 80a0a70:	080601a0 	.word	0x080601a0

080a0a74 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0a74:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0a76:	2600      	movs	r6, #0
 80a0a78:	4604      	mov	r4, r0
 80a0a7a:	460d      	mov	r5, r1
 80a0a7c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0a80:	f7ff fe72 	bl	80a0768 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0a84:	4628      	mov	r0, r5
    _spi = spi;
 80a0a86:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0a88:	f7ff fef8 	bl	80a087c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0a8c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0a8e:	6066      	str	r6, [r4, #4]
}
 80a0a90:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0a94 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0a94:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0a96:	2000      	movs	r0, #0
 80a0a98:	4b04      	ldr	r3, [pc, #16]	; (80a0aac <_GLOBAL__sub_I_System+0x18>)
 80a0a9a:	601a      	str	r2, [r3, #0]
 80a0a9c:	4b04      	ldr	r3, [pc, #16]	; (80a0ab0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a0a9e:	4a05      	ldr	r2, [pc, #20]	; (80a0ab4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0aa0:	6018      	str	r0, [r3, #0]
 80a0aa2:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a0aa4:	7198      	strb	r0, [r3, #6]
 80a0aa6:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0aa8:	f7ff bf38 	b.w	80a091c <set_system_mode>
 80a0aac:	200000c4 	.word	0x200000c4
 80a0ab0:	200000b8 	.word	0x200000b8
 80a0ab4:	ffff0000 	.word	0xffff0000

080a0ab8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0aba:	4606      	mov	r6, r0
 80a0abc:	460d      	mov	r5, r1
  size_t n = 0;
 80a0abe:	2400      	movs	r4, #0
 80a0ac0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0ac2:	42bd      	cmp	r5, r7
 80a0ac4:	d00c      	beq.n	80a0ae0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0ac6:	6833      	ldr	r3, [r6, #0]
 80a0ac8:	4630      	mov	r0, r6
 80a0aca:	689b      	ldr	r3, [r3, #8]
 80a0acc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0ad0:	4798      	blx	r3
     if (chunk>=0)
 80a0ad2:	1e03      	subs	r3, r0, #0
 80a0ad4:	db01      	blt.n	80a0ada <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0ad6:	441c      	add	r4, r3
  while (size--) {
 80a0ad8:	e7f3      	b.n	80a0ac2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0ada:	2c00      	cmp	r4, #0
 80a0adc:	bf08      	it	eq
 80a0ade:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0ae0:	4620      	mov	r0, r4
 80a0ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ae4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0ae4:	b570      	push	{r4, r5, r6, lr}
 80a0ae6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0ae8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0aea:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0aec:	b149      	cbz	r1, 80a0b02 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0aee:	f002 fe1b 	bl	80a3728 <strlen>
 80a0af2:	682b      	ldr	r3, [r5, #0]
 80a0af4:	4602      	mov	r2, r0
 80a0af6:	4621      	mov	r1, r4
 80a0af8:	4628      	mov	r0, r5
    }
 80a0afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0afe:	68db      	ldr	r3, [r3, #12]
 80a0b00:	4718      	bx	r3
    }
 80a0b02:	bd70      	pop	{r4, r5, r6, pc}

080a0b04 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0b04:	b508      	push	{r3, lr}
  return write(str);
 80a0b06:	f7ff ffed 	bl	80a0ae4 <_ZN5Print5writeEPKc>
}
 80a0b0a:	bd08      	pop	{r3, pc}

080a0b0c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a0b0c:	6803      	ldr	r3, [r0, #0]
 80a0b0e:	689b      	ldr	r3, [r3, #8]
 80a0b10:	4718      	bx	r3

080a0b12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0b12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0b14:	210d      	movs	r1, #13
{
 80a0b16:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0b18:	f7ff fff8 	bl	80a0b0c <_ZN5Print5printEc>
  n += print('\n');
 80a0b1c:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0b1e:	4604      	mov	r4, r0
  n += print('\n');
 80a0b20:	4628      	mov	r0, r5
 80a0b22:	f7ff fff3 	bl	80a0b0c <_ZN5Print5printEc>
  return n;
}
 80a0b26:	4420      	add	r0, r4
 80a0b28:	bd38      	pop	{r3, r4, r5, pc}

080a0b2a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0b2a:	b538      	push	{r3, r4, r5, lr}
 80a0b2c:	4605      	mov	r5, r0
  return write(str);
 80a0b2e:	f7ff ffd9 	bl	80a0ae4 <_ZN5Print5writeEPKc>
 80a0b32:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0b34:	4628      	mov	r0, r5
 80a0b36:	f7ff ffec 	bl	80a0b12 <_ZN5Print7printlnEv>
  return n;
}
 80a0b3a:	4420      	add	r0, r4
 80a0b3c:	bd38      	pop	{r3, r4, r5, pc}

080a0b3e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0b3e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0b40:	2a01      	cmp	r2, #1
 80a0b42:	bf98      	it	ls
 80a0b44:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0b46:	b530      	push	{r4, r5, lr}
 80a0b48:	b08b      	sub	sp, #44	; 0x2c
 80a0b4a:	460c      	mov	r4, r1
  *str = '\0';
 80a0b4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0b50:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0b52:	4625      	mov	r5, r4
 80a0b54:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0b58:	fb04 5312 	mls	r3, r4, r2, r5
 80a0b5c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b5e:	2b09      	cmp	r3, #9
 80a0b60:	bf94      	ite	ls
 80a0b62:	3330      	addls	r3, #48	; 0x30
 80a0b64:	3337      	addhi	r3, #55	; 0x37
 80a0b66:	b2db      	uxtb	r3, r3
  } while(n);
 80a0b68:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b6a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0b6e:	d9f0      	bls.n	80a0b52 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0b70:	f7ff ffb8 	bl	80a0ae4 <_ZN5Print5writeEPKc>
}
 80a0b74:	b00b      	add	sp, #44	; 0x2c
 80a0b76:	bd30      	pop	{r4, r5, pc}

080a0b78 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b7c:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0b7e:	4619      	mov	r1, r3
 80a0b80:	4610      	mov	r0, r2
{
 80a0b82:	4692      	mov	sl, r2
 80a0b84:	461f      	mov	r7, r3
 80a0b86:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a0b8a:	f002 fa81 	bl	80a3090 <__aeabi_dcmpun>
 80a0b8e:	b140      	cbz	r0, 80a0ba2 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a0b90:	4950      	ldr	r1, [pc, #320]	; (80a0cd4 <_ZN5Print10printFloatEdh+0x15c>)
 80a0b92:	4628      	mov	r0, r5
 80a0b94:	f7ff ffa6 	bl	80a0ae4 <_ZN5Print5writeEPKc>
 80a0b98:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a0b9a:	4620      	mov	r0, r4
 80a0b9c:	b003      	add	sp, #12
 80a0b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a0ba2:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a0ba6:	f04f 32ff 	mov.w	r2, #4294967295
 80a0baa:	4650      	mov	r0, sl
 80a0bac:	4621      	mov	r1, r4
 80a0bae:	4b4a      	ldr	r3, [pc, #296]	; (80a0cd8 <_ZN5Print10printFloatEdh+0x160>)
 80a0bb0:	f002 fa6e 	bl	80a3090 <__aeabi_dcmpun>
 80a0bb4:	b948      	cbnz	r0, 80a0bca <_ZN5Print10printFloatEdh+0x52>
 80a0bb6:	f04f 32ff 	mov.w	r2, #4294967295
 80a0bba:	4650      	mov	r0, sl
 80a0bbc:	4621      	mov	r1, r4
 80a0bbe:	4b46      	ldr	r3, [pc, #280]	; (80a0cd8 <_ZN5Print10printFloatEdh+0x160>)
 80a0bc0:	f002 fa48 	bl	80a3054 <__aeabi_dcmple>
 80a0bc4:	b908      	cbnz	r0, 80a0bca <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a0bc6:	4945      	ldr	r1, [pc, #276]	; (80a0cdc <_ZN5Print10printFloatEdh+0x164>)
 80a0bc8:	e7e3      	b.n	80a0b92 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0bca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0bce:	4650      	mov	r0, sl
 80a0bd0:	4639      	mov	r1, r7
 80a0bd2:	4b43      	ldr	r3, [pc, #268]	; (80a0ce0 <_ZN5Print10printFloatEdh+0x168>)
 80a0bd4:	f002 fa52 	bl	80a307c <__aeabi_dcmpgt>
 80a0bd8:	b108      	cbz	r0, 80a0bde <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a0bda:	4942      	ldr	r1, [pc, #264]	; (80a0ce4 <_ZN5Print10printFloatEdh+0x16c>)
 80a0bdc:	e7d9      	b.n	80a0b92 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0bde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0be2:	4650      	mov	r0, sl
 80a0be4:	4639      	mov	r1, r7
 80a0be6:	4b40      	ldr	r3, [pc, #256]	; (80a0ce8 <_ZN5Print10printFloatEdh+0x170>)
 80a0be8:	f002 fa2a 	bl	80a3040 <__aeabi_dcmplt>
 80a0bec:	2800      	cmp	r0, #0
 80a0bee:	d1f4      	bne.n	80a0bda <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a0bf0:	2200      	movs	r2, #0
 80a0bf2:	2300      	movs	r3, #0
 80a0bf4:	4650      	mov	r0, sl
 80a0bf6:	4639      	mov	r1, r7
 80a0bf8:	f002 fa22 	bl	80a3040 <__aeabi_dcmplt>
 80a0bfc:	4604      	mov	r4, r0
 80a0bfe:	b130      	cbz	r0, 80a0c0e <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a0c00:	212d      	movs	r1, #45	; 0x2d
 80a0c02:	4628      	mov	r0, r5
 80a0c04:	f7ff ff82 	bl	80a0b0c <_ZN5Print5printEc>
 80a0c08:	4604      	mov	r4, r0
     number = -number;
 80a0c0a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a0c0e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a0c12:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a0c14:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a0c18:	4934      	ldr	r1, [pc, #208]	; (80a0cec <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a0c1a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a0cf4 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a0c1e:	fa5f f38b 	uxtb.w	r3, fp
 80a0c22:	429e      	cmp	r6, r3
 80a0c24:	d906      	bls.n	80a0c34 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a0c26:	4642      	mov	r2, r8
 80a0c28:	464b      	mov	r3, r9
 80a0c2a:	f002 f8c1 	bl	80a2db0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a0c2e:	f10b 0b01 	add.w	fp, fp, #1
 80a0c32:	e7f4      	b.n	80a0c1e <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a0c34:	463b      	mov	r3, r7
 80a0c36:	4652      	mov	r2, sl
 80a0c38:	f001 fdda 	bl	80a27f0 <__adddf3>
 80a0c3c:	4689      	mov	r9, r1
 80a0c3e:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a0c40:	f002 fa64 	bl	80a310c <__aeabi_d2uiz>
 80a0c44:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a0c46:	f001 ff0f 	bl	80a2a68 <__aeabi_ui2d>
 80a0c4a:	4602      	mov	r2, r0
 80a0c4c:	460b      	mov	r3, r1
 80a0c4e:	4640      	mov	r0, r8
 80a0c50:	4649      	mov	r1, r9
 80a0c52:	f001 fdcb 	bl	80a27ec <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0c56:	220a      	movs	r2, #10
 80a0c58:	4680      	mov	r8, r0
 80a0c5a:	4689      	mov	r9, r1
 80a0c5c:	4628      	mov	r0, r5
 80a0c5e:	4639      	mov	r1, r7
 80a0c60:	f7ff ff6d 	bl	80a0b3e <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a0c64:	4404      	add	r4, r0
  if (digits > 0) {
 80a0c66:	b126      	cbz	r6, 80a0c72 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a0c68:	4628      	mov	r0, r5
 80a0c6a:	4921      	ldr	r1, [pc, #132]	; (80a0cf0 <_ZN5Print10printFloatEdh+0x178>)
 80a0c6c:	f7ff ff3a 	bl	80a0ae4 <_ZN5Print5writeEPKc>
    n += print(".");
 80a0c70:	4404      	add	r4, r0
    remainder *= 10.0;
 80a0c72:	f04f 0a00 	mov.w	sl, #0
 80a0c76:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a0cf4 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a0c7a:	3e01      	subs	r6, #1
 80a0c7c:	b2f6      	uxtb	r6, r6
 80a0c7e:	2eff      	cmp	r6, #255	; 0xff
 80a0c80:	d08b      	beq.n	80a0b9a <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a0c82:	4652      	mov	r2, sl
 80a0c84:	465b      	mov	r3, fp
 80a0c86:	4640      	mov	r0, r8
 80a0c88:	4649      	mov	r1, r9
 80a0c8a:	f001 ff67 	bl	80a2b5c <__aeabi_dmul>
 80a0c8e:	4680      	mov	r8, r0
 80a0c90:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a0c92:	f002 fa13 	bl	80a30bc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a0c96:	1e07      	subs	r7, r0, #0
 80a0c98:	da19      	bge.n	80a0cce <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a0c9a:	212d      	movs	r1, #45	; 0x2d
 80a0c9c:	4628      	mov	r0, r5
 80a0c9e:	f7ff ff35 	bl	80a0b0c <_ZN5Print5printEc>
 80a0ca2:	4603      	mov	r3, r0
            val = -n;
 80a0ca4:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a0ca6:	220a      	movs	r2, #10
 80a0ca8:	4628      	mov	r0, r5
 80a0caa:	9301      	str	r3, [sp, #4]
 80a0cac:	f7ff ff47 	bl	80a0b3e <_ZN5Print11printNumberEmh>
 80a0cb0:	9b01      	ldr	r3, [sp, #4]
 80a0cb2:	4403      	add	r3, r0
    remainder -= toPrint;
 80a0cb4:	4638      	mov	r0, r7
    n += print(toPrint);
 80a0cb6:	441c      	add	r4, r3
    remainder -= toPrint;
 80a0cb8:	f001 fee6 	bl	80a2a88 <__aeabi_i2d>
 80a0cbc:	4602      	mov	r2, r0
 80a0cbe:	460b      	mov	r3, r1
 80a0cc0:	4640      	mov	r0, r8
 80a0cc2:	4649      	mov	r1, r9
 80a0cc4:	f001 fd92 	bl	80a27ec <__aeabi_dsub>
 80a0cc8:	4680      	mov	r8, r0
 80a0cca:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a0ccc:	e7d5      	b.n	80a0c7a <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a0cce:	4639      	mov	r1, r7
        size_t t = 0;
 80a0cd0:	2300      	movs	r3, #0
 80a0cd2:	e7e8      	b.n	80a0ca6 <_ZN5Print10printFloatEdh+0x12e>
 80a0cd4:	080a3880 	.word	0x080a3880
 80a0cd8:	7fefffff 	.word	0x7fefffff
 80a0cdc:	080a3884 	.word	0x080a3884
 80a0ce0:	41efffff 	.word	0x41efffff
 80a0ce4:	080a3888 	.word	0x080a3888
 80a0ce8:	c1efffff 	.word	0xc1efffff
 80a0cec:	3fe00000 	.word	0x3fe00000
 80a0cf0:	080a388c 	.word	0x080a388c
 80a0cf4:	40240000 	.word	0x40240000

080a0cf8 <_ZN5Print7printlnEdi>:
{
 80a0cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a0cfa:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a0cfe:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a0d00:	9100      	str	r1, [sp, #0]
 80a0d02:	f7ff ff39 	bl	80a0b78 <_ZN5Print10printFloatEdh>
 80a0d06:	4604      	mov	r4, r0
  n += println();
 80a0d08:	4628      	mov	r0, r5
 80a0d0a:	f7ff ff02 	bl	80a0b12 <_ZN5Print7printlnEv>
}
 80a0d0e:	4420      	add	r0, r4
 80a0d10:	b003      	add	sp, #12
 80a0d12:	bd30      	pop	{r4, r5, pc}

080a0d14 <_ZN5Print7printlnEfi>:
{
 80a0d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d16:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a0d18:	4608      	mov	r0, r1
{
 80a0d1a:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a0d1c:	f001 fec6 	bl	80a2aac <__aeabi_f2d>
 80a0d20:	9500      	str	r5, [sp, #0]
 80a0d22:	4602      	mov	r2, r0
 80a0d24:	460b      	mov	r3, r1
 80a0d26:	4620      	mov	r0, r4
 80a0d28:	f7ff ffe6 	bl	80a0cf8 <_ZN5Print7printlnEdi>
}
 80a0d2c:	b003      	add	sp, #12
 80a0d2e:	bd30      	pop	{r4, r5, pc}

080a0d30 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0d30:	2300      	movs	r3, #0
 80a0d32:	6840      	ldr	r0, [r0, #4]
 80a0d34:	461a      	mov	r2, r3
 80a0d36:	4619      	mov	r1, r3
 80a0d38:	f7ff be34 	b.w	80a09a4 <network_on>

080a0d3c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0d3c:	4b01      	ldr	r3, [pc, #4]	; (80a0d44 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0d3e:	4a02      	ldr	r2, [pc, #8]	; (80a0d48 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0d40:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0d42:	4770      	bx	lr
 80a0d44:	200000c8 	.word	0x200000c8
 80a0d48:	080a388e 	.word	0x080a388e

080a0d4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0d4c:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0d4e:	681a      	ldr	r2, [r3, #0]
 80a0d50:	4b02      	ldr	r3, [pc, #8]	; (80a0d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0d52:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0d54:	4770      	bx	lr
 80a0d56:	bf00      	nop
 80a0d58:	20000000 	.word	0x20000000
 80a0d5c:	200000cc 	.word	0x200000cc

080a0d60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0d60:	2100      	movs	r1, #0
 80a0d62:	f7ff bde3 	b.w	80a092c <system_delay_ms>
	...

080a0d68 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d68:	2200      	movs	r2, #0
 80a0d6a:	4b01      	ldr	r3, [pc, #4]	; (80a0d70 <_GLOBAL__sub_I_RGB+0x8>)
 80a0d6c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0d6e:	4770      	bx	lr
 80a0d70:	200000d0 	.word	0x200000d0

080a0d74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0d74:	4b01      	ldr	r3, [pc, #4]	; (80a0d7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0d76:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0d78:	4770      	bx	lr
 80a0d7a:	bf00      	nop
 80a0d7c:	20000008 	.word	0x20000008

080a0d80 <serialEventRun>:
{
 80a0d80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0d82:	4b13      	ldr	r3, [pc, #76]	; (80a0dd0 <serialEventRun+0x50>)
 80a0d84:	b143      	cbz	r3, 80a0d98 <serialEventRun+0x18>
 80a0d86:	f000 f975 	bl	80a1074 <_Z16_fetch_usbserialv>
 80a0d8a:	6803      	ldr	r3, [r0, #0]
 80a0d8c:	691b      	ldr	r3, [r3, #16]
 80a0d8e:	4798      	blx	r3
 80a0d90:	2800      	cmp	r0, #0
 80a0d92:	dd01      	ble.n	80a0d98 <serialEventRun+0x18>
        serialEvent();
 80a0d94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0d98:	4b0e      	ldr	r3, [pc, #56]	; (80a0dd4 <serialEventRun+0x54>)
 80a0d9a:	b143      	cbz	r3, 80a0dae <serialEventRun+0x2e>
 80a0d9c:	f000 fa1e 	bl	80a11dc <_Z22__fetch_global_Serial1v>
 80a0da0:	6803      	ldr	r3, [r0, #0]
 80a0da2:	691b      	ldr	r3, [r3, #16]
 80a0da4:	4798      	blx	r3
 80a0da6:	2800      	cmp	r0, #0
 80a0da8:	dd01      	ble.n	80a0dae <serialEventRun+0x2e>
        serialEvent1();
 80a0daa:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0dae:	4b0a      	ldr	r3, [pc, #40]	; (80a0dd8 <serialEventRun+0x58>)
 80a0db0:	b10b      	cbz	r3, 80a0db6 <serialEventRun+0x36>
 80a0db2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0db6:	4b09      	ldr	r3, [pc, #36]	; (80a0ddc <serialEventRun+0x5c>)
 80a0db8:	b143      	cbz	r3, 80a0dcc <serialEventRun+0x4c>
 80a0dba:	f000 f995 	bl	80a10e8 <_Z17_fetch_usbserial1v>
 80a0dbe:	6803      	ldr	r3, [r0, #0]
 80a0dc0:	691b      	ldr	r3, [r3, #16]
 80a0dc2:	4798      	blx	r3
 80a0dc4:	2800      	cmp	r0, #0
 80a0dc6:	dd01      	ble.n	80a0dcc <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0dc8:	f3af 8000 	nop.w
}
 80a0dcc:	bd08      	pop	{r3, pc}
 80a0dce:	bf00      	nop
	...

080a0de0 <_post_loop>:
{
 80a0de0:	b508      	push	{r3, lr}
	serialEventRun();
 80a0de2:	f7ff ffcd 	bl	80a0d80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0de6:	f7ff fcb7 	bl	80a0758 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0dea:	4b01      	ldr	r3, [pc, #4]	; (80a0df0 <_post_loop+0x10>)
 80a0dec:	6018      	str	r0, [r3, #0]
}
 80a0dee:	bd08      	pop	{r3, pc}
 80a0df0:	2000055c 	.word	0x2000055c

080a0df4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0df4:	4805      	ldr	r0, [pc, #20]	; (80a0e0c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0df6:	4a06      	ldr	r2, [pc, #24]	; (80a0e10 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0df8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0dfa:	1a12      	subs	r2, r2, r0
 80a0dfc:	4905      	ldr	r1, [pc, #20]	; (80a0e14 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0dfe:	f002 fc59 	bl	80a36b4 <memcpy>
    __backup_sram_signature = signature;
 80a0e02:	4b05      	ldr	r3, [pc, #20]	; (80a0e18 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0e04:	4a05      	ldr	r2, [pc, #20]	; (80a0e1c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0e06:	601a      	str	r2, [r3, #0]
}
 80a0e08:	bd08      	pop	{r3, pc}
 80a0e0a:	bf00      	nop
 80a0e0c:	40024000 	.word	0x40024000
 80a0e10:	40024004 	.word	0x40024004
 80a0e14:	080a3a00 	.word	0x080a3a00
 80a0e18:	40024000 	.word	0x40024000
 80a0e1c:	9a271c1e 	.word	0x9a271c1e

080a0e20 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0e20:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0e22:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0e24:	461a      	mov	r2, r3
 80a0e26:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0e2a:	9300      	str	r3, [sp, #0]
 80a0e2c:	f7ff fd90 	bl	80a0950 <system_ctrl_set_result>
}
 80a0e30:	b003      	add	sp, #12
 80a0e32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0e38 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0e38:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0e3a:	8843      	ldrh	r3, [r0, #2]
 80a0e3c:	2b0a      	cmp	r3, #10
 80a0e3e:	d008      	beq.n	80a0e52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0e40:	2b50      	cmp	r3, #80	; 0x50
 80a0e42:	d10b      	bne.n	80a0e5c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0e44:	4b09      	ldr	r3, [pc, #36]	; (80a0e6c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0e46:	681b      	ldr	r3, [r3, #0]
 80a0e48:	b14b      	cbz	r3, 80a0e5e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0e4a:	b003      	add	sp, #12
 80a0e4c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0e50:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0e52:	f7ff ffe5 	bl	80a0e20 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0e56:	b003      	add	sp, #12
 80a0e58:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0e5c:	2300      	movs	r3, #0
 80a0e5e:	461a      	mov	r2, r3
 80a0e60:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0e64:	9300      	str	r3, [sp, #0]
 80a0e66:	f7ff fd73 	bl	80a0950 <system_ctrl_set_result>
}
 80a0e6a:	e7f4      	b.n	80a0e56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0e6c:	200000e4 	.word	0x200000e4

080a0e70 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0e70:	2100      	movs	r1, #0
{
 80a0e72:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0e74:	4811      	ldr	r0, [pc, #68]	; (80a0ebc <module_user_init_hook+0x4c>)
 80a0e76:	f7ff fdf5 	bl	80a0a64 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0e7a:	4b11      	ldr	r3, [pc, #68]	; (80a0ec0 <module_user_init_hook+0x50>)
 80a0e7c:	681a      	ldr	r2, [r3, #0]
 80a0e7e:	4b11      	ldr	r3, [pc, #68]	; (80a0ec4 <module_user_init_hook+0x54>)
 80a0e80:	429a      	cmp	r2, r3
 80a0e82:	bf0c      	ite	eq
 80a0e84:	2201      	moveq	r2, #1
 80a0e86:	2200      	movne	r2, #0
 80a0e88:	4b0f      	ldr	r3, [pc, #60]	; (80a0ec8 <module_user_init_hook+0x58>)
 80a0e8a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0e8c:	d001      	beq.n	80a0e92 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a0e8e:	f7ff ffb1 	bl	80a0df4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0e92:	f7ff fc51 	bl	80a0738 <HAL_RNG_GetRandomNumber>
 80a0e96:	4604      	mov	r4, r0
    srand(seed);
 80a0e98:	f002 fc22 	bl	80a36e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0e9c:	4b0b      	ldr	r3, [pc, #44]	; (80a0ecc <module_user_init_hook+0x5c>)
 80a0e9e:	b113      	cbz	r3, 80a0ea6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0ea0:	4620      	mov	r0, r4
 80a0ea2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0ea6:	2100      	movs	r1, #0
 80a0ea8:	4808      	ldr	r0, [pc, #32]	; (80a0ecc <module_user_init_hook+0x5c>)
 80a0eaa:	f7ff fdbb 	bl	80a0a24 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0eb2:	2100      	movs	r1, #0
 80a0eb4:	4806      	ldr	r0, [pc, #24]	; (80a0ed0 <module_user_init_hook+0x60>)
 80a0eb6:	f7ff bd41 	b.w	80a093c <system_ctrl_set_app_request_handler>
 80a0eba:	bf00      	nop
 80a0ebc:	080a0d75 	.word	0x080a0d75
 80a0ec0:	40024000 	.word	0x40024000
 80a0ec4:	9a271c1e 	.word	0x9a271c1e
 80a0ec8:	200000e0 	.word	0x200000e0
 80a0ecc:	00000000 	.word	0x00000000
 80a0ed0:	080a0e39 	.word	0x080a0e39

080a0ed4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0ed4:	4770      	bx	lr

080a0ed6 <_ZN9IPAddressD0Ev>:
 80a0ed6:	b510      	push	{r4, lr}
 80a0ed8:	4604      	mov	r4, r0
 80a0eda:	2118      	movs	r1, #24
 80a0edc:	f000 fb66 	bl	80a15ac <_ZdlPvj>
 80a0ee0:	4620      	mov	r0, r4
 80a0ee2:	bd10      	pop	{r4, pc}

080a0ee4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ee6:	460e      	mov	r6, r1
 80a0ee8:	2400      	movs	r4, #0
 80a0eea:	f100 0708 	add.w	r7, r0, #8
 80a0eee:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a0ef0:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0ef4:	220a      	movs	r2, #10
 80a0ef6:	4630      	mov	r0, r6
 80a0ef8:	f7ff fe21 	bl	80a0b3e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0efc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0efe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0f00:	d101      	bne.n	80a0f06 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0f02:	4620      	mov	r0, r4
 80a0f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0f06:	2c00      	cmp	r4, #0
 80a0f08:	d0f2      	beq.n	80a0ef0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0f0a:	212e      	movs	r1, #46	; 0x2e
 80a0f0c:	4630      	mov	r0, r6
 80a0f0e:	f7ff fdfd 	bl	80a0b0c <_ZN5Print5printEc>
 80a0f12:	4404      	add	r4, r0
 80a0f14:	e7ec      	b.n	80a0ef0 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0f18 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0f18:	b510      	push	{r4, lr}
 80a0f1a:	4604      	mov	r4, r0
 80a0f1c:	4b04      	ldr	r3, [pc, #16]	; (80a0f30 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0f1e:	2211      	movs	r2, #17
 80a0f20:	2100      	movs	r1, #0
 80a0f22:	f840 3b04 	str.w	r3, [r0], #4
 80a0f26:	f002 fbd3 	bl	80a36d0 <memset>
}
 80a0f2a:	4620      	mov	r0, r4
 80a0f2c:	bd10      	pop	{r4, pc}
 80a0f2e:	bf00      	nop
 80a0f30:	080a38b8 	.word	0x080a38b8

080a0f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0f34:	4603      	mov	r3, r0
 80a0f36:	4a07      	ldr	r2, [pc, #28]	; (80a0f54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0f38:	b510      	push	{r4, lr}
 80a0f3a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0f3e:	f101 0210 	add.w	r2, r1, #16
 80a0f42:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0f46:	4291      	cmp	r1, r2
 80a0f48:	f843 4b04 	str.w	r4, [r3], #4
 80a0f4c:	d1f9      	bne.n	80a0f42 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0f4e:	780a      	ldrb	r2, [r1, #0]
 80a0f50:	701a      	strb	r2, [r3, #0]
}
 80a0f52:	bd10      	pop	{r4, pc}
 80a0f54:	080a38b8 	.word	0x080a38b8

080a0f58 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0f58:	4a02      	ldr	r2, [pc, #8]	; (80a0f64 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0f5a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0f5e:	2204      	movs	r2, #4
 80a0f60:	7502      	strb	r2, [r0, #20]
}
 80a0f62:	4770      	bx	lr
 80a0f64:	080a38b8 	.word	0x080a38b8

080a0f68 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0f68:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0f6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0f6e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0f72:	2304      	movs	r3, #4
 80a0f74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0f78:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0f7c:	6044      	str	r4, [r0, #4]
 80a0f7e:	7503      	strb	r3, [r0, #20]
}
 80a0f80:	bd10      	pop	{r4, pc}
	...

080a0f84 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f86:	4d04      	ldr	r5, [pc, #16]	; (80a0f98 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0f88:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0f8a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0f8e:	9500      	str	r5, [sp, #0]
 80a0f90:	f7ff ffea 	bl	80a0f68 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0f94:	b003      	add	sp, #12
 80a0f96:	bd30      	pop	{r4, r5, pc}
 80a0f98:	080a38b8 	.word	0x080a38b8

080a0f9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0f9c:	7441      	strb	r1, [r0, #17]
}
 80a0f9e:	4770      	bx	lr

080a0fa0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0fa0:	4770      	bx	lr

080a0fa2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0fa2:	4770      	bx	lr

080a0fa4 <_ZN9USBSerial4readEv>:
{
 80a0fa4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0fa6:	2100      	movs	r1, #0
 80a0fa8:	7c00      	ldrb	r0, [r0, #16]
 80a0faa:	f7ff fc97 	bl	80a08dc <HAL_USB_USART_Receive_Data>
}
 80a0fae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0fb2:	bd08      	pop	{r3, pc}

080a0fb4 <_ZN9USBSerial4peekEv>:
{
 80a0fb4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0fb6:	2101      	movs	r1, #1
 80a0fb8:	7c00      	ldrb	r0, [r0, #16]
 80a0fba:	f7ff fc8f 	bl	80a08dc <HAL_USB_USART_Receive_Data>
}
 80a0fbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0fc2:	bd08      	pop	{r3, pc}

080a0fc4 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0fc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0fc6:	7c00      	ldrb	r0, [r0, #16]
 80a0fc8:	f7ff fc80 	bl	80a08cc <HAL_USB_USART_Available_Data_For_Write>
}
 80a0fcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0fd0:	bd08      	pop	{r3, pc}

080a0fd2 <_ZN9USBSerial9availableEv>:
{
 80a0fd2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0fd4:	7c00      	ldrb	r0, [r0, #16]
 80a0fd6:	f7ff fc71 	bl	80a08bc <HAL_USB_USART_Available_Data>
}
 80a0fda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0fde:	bd08      	pop	{r3, pc}

080a0fe0 <_ZN9USBSerial5writeEh>:
{
 80a0fe0:	b538      	push	{r3, r4, r5, lr}
 80a0fe2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0fe4:	7c00      	ldrb	r0, [r0, #16]
{
 80a0fe6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0fe8:	f7ff fc70 	bl	80a08cc <HAL_USB_USART_Available_Data_For_Write>
 80a0fec:	2800      	cmp	r0, #0
 80a0fee:	dc01      	bgt.n	80a0ff4 <_ZN9USBSerial5writeEh+0x14>
 80a0ff0:	7c60      	ldrb	r0, [r4, #17]
 80a0ff2:	b128      	cbz	r0, 80a1000 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0ff4:	4629      	mov	r1, r5
 80a0ff6:	7c20      	ldrb	r0, [r4, #16]
 80a0ff8:	f7ff fc78 	bl	80a08ec <HAL_USB_USART_Send_Data>
 80a0ffc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1000:	bd38      	pop	{r3, r4, r5, pc}

080a1002 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1002:	7c00      	ldrb	r0, [r0, #16]
 80a1004:	f7ff bc7a 	b.w	80a08fc <HAL_USB_USART_Flush_Data>

080a1008 <_ZN9USBSerialD0Ev>:
 80a1008:	b510      	push	{r4, lr}
 80a100a:	4604      	mov	r4, r0
 80a100c:	2114      	movs	r1, #20
 80a100e:	f000 facd 	bl	80a15ac <_ZdlPvj>
 80a1012:	4620      	mov	r0, r4
 80a1014:	bd10      	pop	{r4, pc}

080a1016 <__tcf_1>:
 80a1016:	4770      	bx	lr

080a1018 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1018:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a101e:	4604      	mov	r4, r0
 80a1020:	4608      	mov	r0, r1
 80a1022:	2100      	movs	r1, #0
 80a1024:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1028:	4b04      	ldr	r3, [pc, #16]	; (80a103c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a102a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a102c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a102e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1030:	4611      	mov	r1, r2
  _blocking = true;
 80a1032:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1034:	f7ff fc32 	bl	80a089c <HAL_USB_USART_Init>
}
 80a1038:	4620      	mov	r0, r4
 80a103a:	bd10      	pop	{r4, pc}
 80a103c:	080a38cc 	.word	0x080a38cc

080a1040 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1040:	2200      	movs	r2, #0
 80a1042:	7c00      	ldrb	r0, [r0, #16]
 80a1044:	f7ff bc32 	b.w	80a08ac <HAL_USB_USART_Begin>

080a1048 <_Z19acquireSerialBufferv>:
{
 80a1048:	b510      	push	{r4, lr}
 80a104a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a104c:	2214      	movs	r2, #20
 80a104e:	2100      	movs	r1, #0
 80a1050:	f002 fb3e 	bl	80a36d0 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1054:	4b05      	ldr	r3, [pc, #20]	; (80a106c <_Z19acquireSerialBufferv+0x24>)
}
 80a1056:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1058:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a105a:	4b05      	ldr	r3, [pc, #20]	; (80a1070 <_Z19acquireSerialBufferv+0x28>)
 80a105c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a105e:	f240 1301 	movw	r3, #257	; 0x101
 80a1062:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1064:	2381      	movs	r3, #129	; 0x81
 80a1066:	8223      	strh	r3, [r4, #16]
}
 80a1068:	bd10      	pop	{r4, pc}
 80a106a:	bf00      	nop
 80a106c:	20000118 	.word	0x20000118
 80a1070:	20000219 	.word	0x20000219

080a1074 <_Z16_fetch_usbserialv>:
{
 80a1074:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1076:	4d0e      	ldr	r5, [pc, #56]	; (80a10b0 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1078:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a107a:	a801      	add	r0, sp, #4
 80a107c:	f7ff ffe4 	bl	80a1048 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1080:	7829      	ldrb	r1, [r5, #0]
 80a1082:	f3bf 8f5b 	dmb	ish
 80a1086:	f011 0401 	ands.w	r4, r1, #1
 80a108a:	d10e      	bne.n	80a10aa <_Z16_fetch_usbserialv+0x36>
 80a108c:	4628      	mov	r0, r5
 80a108e:	f7ff f808 	bl	80a00a2 <__cxa_guard_acquire>
 80a1092:	b150      	cbz	r0, 80a10aa <_Z16_fetch_usbserialv+0x36>
 80a1094:	4621      	mov	r1, r4
 80a1096:	aa01      	add	r2, sp, #4
 80a1098:	4806      	ldr	r0, [pc, #24]	; (80a10b4 <_Z16_fetch_usbserialv+0x40>)
 80a109a:	f7ff ffbd 	bl	80a1018 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a109e:	4628      	mov	r0, r5
 80a10a0:	f7ff f804 	bl	80a00ac <__cxa_guard_release>
 80a10a4:	4804      	ldr	r0, [pc, #16]	; (80a10b8 <_Z16_fetch_usbserialv+0x44>)
 80a10a6:	f002 faff 	bl	80a36a8 <atexit>
	return _usbserial;
}
 80a10aa:	4802      	ldr	r0, [pc, #8]	; (80a10b4 <_Z16_fetch_usbserialv+0x40>)
 80a10ac:	b007      	add	sp, #28
 80a10ae:	bd30      	pop	{r4, r5, pc}
 80a10b0:	200000e8 	.word	0x200000e8
 80a10b4:	200000f0 	.word	0x200000f0
 80a10b8:	080a0fa1 	.word	0x080a0fa1

080a10bc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a10bc:	b510      	push	{r4, lr}
 80a10be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a10c0:	2214      	movs	r2, #20
 80a10c2:	2100      	movs	r1, #0
 80a10c4:	f002 fb04 	bl	80a36d0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a10c8:	4b05      	ldr	r3, [pc, #20]	; (80a10e0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a10ca:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a10cc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a10ce:	4b05      	ldr	r3, [pc, #20]	; (80a10e4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a10d0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a10d2:	f240 1301 	movw	r3, #257	; 0x101
 80a10d6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a10d8:	2381      	movs	r3, #129	; 0x81
 80a10da:	8223      	strh	r3, [r4, #16]
}
 80a10dc:	bd10      	pop	{r4, pc}
 80a10de:	bf00      	nop
 80a10e0:	2000029a 	.word	0x2000029a
 80a10e4:	2000039b 	.word	0x2000039b

080a10e8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a10e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a10ea:	4c0e      	ldr	r4, [pc, #56]	; (80a1124 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a10ec:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a10ee:	a801      	add	r0, sp, #4
 80a10f0:	f7ff ffe4 	bl	80a10bc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a10f4:	7823      	ldrb	r3, [r4, #0]
 80a10f6:	f3bf 8f5b 	dmb	ish
 80a10fa:	07db      	lsls	r3, r3, #31
 80a10fc:	d40e      	bmi.n	80a111c <_Z17_fetch_usbserial1v+0x34>
 80a10fe:	4620      	mov	r0, r4
 80a1100:	f7fe ffcf 	bl	80a00a2 <__cxa_guard_acquire>
 80a1104:	b150      	cbz	r0, 80a111c <_Z17_fetch_usbserial1v+0x34>
 80a1106:	2101      	movs	r1, #1
 80a1108:	aa01      	add	r2, sp, #4
 80a110a:	4807      	ldr	r0, [pc, #28]	; (80a1128 <_Z17_fetch_usbserial1v+0x40>)
 80a110c:	f7ff ff84 	bl	80a1018 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1110:	4620      	mov	r0, r4
 80a1112:	f7fe ffcb 	bl	80a00ac <__cxa_guard_release>
 80a1116:	4805      	ldr	r0, [pc, #20]	; (80a112c <_Z17_fetch_usbserial1v+0x44>)
 80a1118:	f002 fac6 	bl	80a36a8 <atexit>
  return _usbserial1;
}
 80a111c:	4802      	ldr	r0, [pc, #8]	; (80a1128 <_Z17_fetch_usbserial1v+0x40>)
 80a111e:	b006      	add	sp, #24
 80a1120:	bd10      	pop	{r4, pc}
 80a1122:	bf00      	nop
 80a1124:	200000ec 	.word	0x200000ec
 80a1128:	20000104 	.word	0x20000104
 80a112c:	080a1017 	.word	0x080a1017

080a1130 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a1130:	f7ff baf2 	b.w	80a0718 <HAL_Interrupts_Disable_All>

080a1134 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a1134:	f7ff bae8 	b.w	80a0708 <HAL_Interrupts_Enable_All>

080a1138 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1138:	4770      	bx	lr

080a113a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a113a:	7441      	strb	r1, [r0, #17]
}
 80a113c:	4770      	bx	lr

080a113e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a113e:	4770      	bx	lr

080a1140 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1140:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1142:	7c00      	ldrb	r0, [r0, #16]
 80a1144:	f7ff fb58 	bl	80a07f8 <hal_usart_available_data_for_write>
}
 80a1148:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a114c:	bd08      	pop	{r3, pc}

080a114e <_ZN11USARTSerial9availableEv>:
{
 80a114e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1150:	7c00      	ldrb	r0, [r0, #16]
 80a1152:	f7ff fb29 	bl	80a07a8 <hal_usart_available>
}
 80a1156:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a115a:	bd08      	pop	{r3, pc}

080a115c <_ZN11USARTSerial4peekEv>:
{
 80a115c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a115e:	7c00      	ldrb	r0, [r0, #16]
 80a1160:	f7ff fb32 	bl	80a07c8 <hal_usart_peek>
}
 80a1164:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1168:	bd08      	pop	{r3, pc}

080a116a <_ZN11USARTSerial4readEv>:
{
 80a116a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a116c:	7c00      	ldrb	r0, [r0, #16]
 80a116e:	f7ff fb23 	bl	80a07b8 <hal_usart_read>
}
 80a1172:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1176:	bd08      	pop	{r3, pc}

080a1178 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1178:	7c00      	ldrb	r0, [r0, #16]
 80a117a:	f7ff bb2d 	b.w	80a07d8 <hal_usart_flush>

080a117e <_ZN11USARTSerial5writeEh>:
{
 80a117e:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1180:	7c46      	ldrb	r6, [r0, #17]
{
 80a1182:	4604      	mov	r4, r0
 80a1184:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1186:	b12e      	cbz	r6, 80a1194 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1188:	4629      	mov	r1, r5
 80a118a:	7c20      	ldrb	r0, [r4, #16]
}
 80a118c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1190:	f7ff bb02 	b.w	80a0798 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1194:	7c00      	ldrb	r0, [r0, #16]
 80a1196:	f7ff fb2f 	bl	80a07f8 <hal_usart_available_data_for_write>
 80a119a:	2800      	cmp	r0, #0
 80a119c:	dcf4      	bgt.n	80a1188 <_ZN11USARTSerial5writeEh+0xa>
}
 80a119e:	4630      	mov	r0, r6
 80a11a0:	bd70      	pop	{r4, r5, r6, pc}

080a11a2 <_ZN11USARTSerialD0Ev>:
 80a11a2:	b510      	push	{r4, lr}
 80a11a4:	4604      	mov	r4, r0
 80a11a6:	2114      	movs	r1, #20
 80a11a8:	f000 fa00 	bl	80a15ac <_ZdlPvj>
 80a11ac:	4620      	mov	r0, r4
 80a11ae:	bd10      	pop	{r4, pc}

080a11b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a11b0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a11b4:	b510      	push	{r4, lr}
 80a11b6:	4604      	mov	r4, r0
 80a11b8:	4608      	mov	r0, r1
 80a11ba:	4611      	mov	r1, r2
 80a11bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a11c0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a11c4:	4a04      	ldr	r2, [pc, #16]	; (80a11d8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a11c6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a11c8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a11ca:	2201      	movs	r2, #1
 80a11cc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a11ce:	461a      	mov	r2, r3
 80a11d0:	f7ff fada 	bl	80a0788 <hal_usart_init>
}
 80a11d4:	4620      	mov	r0, r4
 80a11d6:	bd10      	pop	{r4, pc}
 80a11d8:	080a38fc 	.word	0x080a38fc

080a11dc <_Z22__fetch_global_Serial1v>:
{
 80a11dc:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a11de:	4d0c      	ldr	r5, [pc, #48]	; (80a1210 <_Z22__fetch_global_Serial1v+0x34>)
 80a11e0:	7829      	ldrb	r1, [r5, #0]
 80a11e2:	f3bf 8f5b 	dmb	ish
 80a11e6:	f011 0401 	ands.w	r4, r1, #1
 80a11ea:	d10f      	bne.n	80a120c <_Z22__fetch_global_Serial1v+0x30>
 80a11ec:	4628      	mov	r0, r5
 80a11ee:	f7fe ff58 	bl	80a00a2 <__cxa_guard_acquire>
 80a11f2:	b158      	cbz	r0, 80a120c <_Z22__fetch_global_Serial1v+0x30>
 80a11f4:	4621      	mov	r1, r4
 80a11f6:	4b07      	ldr	r3, [pc, #28]	; (80a1214 <_Z22__fetch_global_Serial1v+0x38>)
 80a11f8:	4a07      	ldr	r2, [pc, #28]	; (80a1218 <_Z22__fetch_global_Serial1v+0x3c>)
 80a11fa:	4808      	ldr	r0, [pc, #32]	; (80a121c <_Z22__fetch_global_Serial1v+0x40>)
 80a11fc:	f7ff ffd8 	bl	80a11b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1200:	4628      	mov	r0, r5
 80a1202:	f7fe ff53 	bl	80a00ac <__cxa_guard_release>
 80a1206:	4806      	ldr	r0, [pc, #24]	; (80a1220 <_Z22__fetch_global_Serial1v+0x44>)
 80a1208:	f002 fa4e 	bl	80a36a8 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a120c:	4803      	ldr	r0, [pc, #12]	; (80a121c <_Z22__fetch_global_Serial1v+0x40>)
 80a120e:	bd38      	pop	{r3, r4, r5, pc}
 80a1210:	2000041c 	.word	0x2000041c
 80a1214:	200004a4 	.word	0x200004a4
 80a1218:	20000420 	.word	0x20000420
 80a121c:	20000528 	.word	0x20000528
 80a1220:	080a113f 	.word	0x080a113f

080a1224 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1224:	4770      	bx	lr

080a1226 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1228:	4606      	mov	r6, r0
 80a122a:	4615      	mov	r5, r2
 80a122c:	460c      	mov	r4, r1
 80a122e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1230:	42bc      	cmp	r4, r7
 80a1232:	d006      	beq.n	80a1242 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1234:	6833      	ldr	r3, [r6, #0]
 80a1236:	4630      	mov	r0, r6
 80a1238:	689b      	ldr	r3, [r3, #8]
 80a123a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a123e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1240:	e7f6      	b.n	80a1230 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1242:	4628      	mov	r0, r5
 80a1244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1246 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1246:	2200      	movs	r2, #0
 80a1248:	7c00      	ldrb	r0, [r0, #16]
 80a124a:	f7ff badd 	b.w	80a0808 <hal_i2c_write>

080a124e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a124e:	2100      	movs	r1, #0
 80a1250:	7c00      	ldrb	r0, [r0, #16]
 80a1252:	f7ff bae1 	b.w	80a0818 <hal_i2c_available>

080a1256 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1256:	2100      	movs	r1, #0
 80a1258:	7c00      	ldrb	r0, [r0, #16]
 80a125a:	f7ff bae5 	b.w	80a0828 <hal_i2c_read>

080a125e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a125e:	2100      	movs	r1, #0
 80a1260:	7c00      	ldrb	r0, [r0, #16]
 80a1262:	f7ff bae9 	b.w	80a0838 <hal_i2c_peek>

080a1266 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1266:	2100      	movs	r1, #0
 80a1268:	7c00      	ldrb	r0, [r0, #16]
 80a126a:	f7ff baed 	b.w	80a0848 <hal_i2c_flush>

080a126e <_ZN7TwoWireD0Ev>:
 80a126e:	b510      	push	{r4, lr}
 80a1270:	4604      	mov	r4, r0
 80a1272:	2114      	movs	r1, #20
 80a1274:	f000 f99a 	bl	80a15ac <_ZdlPvj>
 80a1278:	4620      	mov	r0, r4
 80a127a:	bd10      	pop	{r4, pc}

080a127c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a127c:	b510      	push	{r4, lr}
 80a127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1282:	4604      	mov	r4, r0
 80a1284:	4608      	mov	r0, r1
 80a1286:	2100      	movs	r1, #0
 80a1288:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a128c:	4b03      	ldr	r3, [pc, #12]	; (80a129c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a128e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1290:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1292:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1294:	f7ff fae8 	bl	80a0868 <hal_i2c_init>
}
 80a1298:	4620      	mov	r0, r4
 80a129a:	bd10      	pop	{r4, pc}
 80a129c:	080a392c 	.word	0x080a392c

080a12a0 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a12a0:	2200      	movs	r2, #0
 80a12a2:	6840      	ldr	r0, [r0, #4]
 80a12a4:	4611      	mov	r1, r2
 80a12a6:	f7ff bb75 	b.w	80a0994 <network_ready>

080a12aa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a12aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12ac:	4615      	mov	r5, r2
 80a12ae:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a12b0:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a12b2:	460e      	mov	r6, r1
 80a12b4:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a12b6:	2100      	movs	r1, #0
 80a12b8:	a803      	add	r0, sp, #12
 80a12ba:	f002 fa09 	bl	80a36d0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a12be:	4628      	mov	r0, r5
 80a12c0:	f002 fa32 	bl	80a3728 <strlen>
 80a12c4:	2700      	movs	r7, #0
 80a12c6:	b281      	uxth	r1, r0
 80a12c8:	6873      	ldr	r3, [r6, #4]
 80a12ca:	4628      	mov	r0, r5
 80a12cc:	9700      	str	r7, [sp, #0]
 80a12ce:	aa03      	add	r2, sp, #12
 80a12d0:	f7ff fb1c 	bl	80a090c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12d4:	b130      	cbz	r0, 80a12e4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a12d6:	4639      	mov	r1, r7
 80a12d8:	4620      	mov	r0, r4
 80a12da:	f7ff fe3d 	bl	80a0f58 <_ZN9IPAddressC1Em>
    }
 80a12de:	4620      	mov	r0, r4
 80a12e0:	b009      	add	sp, #36	; 0x24
 80a12e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12e4:	4620      	mov	r0, r4
 80a12e6:	a903      	add	r1, sp, #12
 80a12e8:	f7ff fe24 	bl	80a0f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a12ec:	e7f7      	b.n	80a12de <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a12ee <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a12ee:	2200      	movs	r2, #0
 80a12f0:	6840      	ldr	r0, [r0, #4]
 80a12f2:	4611      	mov	r1, r2
 80a12f4:	f7ff bb6e 	b.w	80a09d4 <network_listening>

080a12f8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a12f8:	2200      	movs	r2, #0
 80a12fa:	6840      	ldr	r0, [r0, #4]
 80a12fc:	4611      	mov	r1, r2
 80a12fe:	f7ff bb79 	b.w	80a09f4 <network_get_listen_timeout>

080a1302 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1302:	2200      	movs	r2, #0
 80a1304:	6840      	ldr	r0, [r0, #4]
 80a1306:	f7ff bb6d 	b.w	80a09e4 <network_set_listen_timeout>

080a130a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a130a:	2200      	movs	r2, #0
 80a130c:	6840      	ldr	r0, [r0, #4]
 80a130e:	f081 0101 	eor.w	r1, r1, #1
 80a1312:	f7ff bb57 	b.w	80a09c4 <network_listen>

080a1316 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1316:	2300      	movs	r3, #0
 80a1318:	6840      	ldr	r0, [r0, #4]
 80a131a:	461a      	mov	r2, r3
 80a131c:	4619      	mov	r1, r3
 80a131e:	f7ff bb49 	b.w	80a09b4 <network_off>

080a1322 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1322:	2200      	movs	r2, #0
 80a1324:	6840      	ldr	r0, [r0, #4]
 80a1326:	4611      	mov	r1, r2
 80a1328:	f7ff bb24 	b.w	80a0974 <network_connecting>

080a132c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a132c:	2200      	movs	r2, #0
 80a132e:	2102      	movs	r1, #2
 80a1330:	6840      	ldr	r0, [r0, #4]
 80a1332:	f7ff bb27 	b.w	80a0984 <network_disconnect>

080a1336 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1336:	2300      	movs	r3, #0
 80a1338:	6840      	ldr	r0, [r0, #4]
 80a133a:	461a      	mov	r2, r3
 80a133c:	f7ff bb12 	b.w	80a0964 <network_connect>

080a1340 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1340:	2204      	movs	r2, #4
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1344:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1346:	4a02      	ldr	r2, [pc, #8]	; (80a1350 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1348:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a134a:	4770      	bx	lr
 80a134c:	2000053c 	.word	0x2000053c
 80a1350:	080a3954 	.word	0x080a3954

080a1354 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1354:	2300      	movs	r3, #0
 80a1356:	6840      	ldr	r0, [r0, #4]
 80a1358:	461a      	mov	r2, r3
 80a135a:	f7ff bb03 	b.w	80a0964 <network_connect>

080a135e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a135e:	2200      	movs	r2, #0
 80a1360:	2102      	movs	r1, #2
 80a1362:	6840      	ldr	r0, [r0, #4]
 80a1364:	f7ff bb0e 	b.w	80a0984 <network_disconnect>

080a1368 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1368:	2200      	movs	r2, #0
 80a136a:	6840      	ldr	r0, [r0, #4]
 80a136c:	4611      	mov	r1, r2
 80a136e:	f7ff bb01 	b.w	80a0974 <network_connecting>

080a1372 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1372:	2200      	movs	r2, #0
 80a1374:	6840      	ldr	r0, [r0, #4]
 80a1376:	4611      	mov	r1, r2
 80a1378:	f7ff bb0c 	b.w	80a0994 <network_ready>

080a137c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a137c:	2300      	movs	r3, #0
 80a137e:	6840      	ldr	r0, [r0, #4]
 80a1380:	461a      	mov	r2, r3
 80a1382:	4619      	mov	r1, r3
 80a1384:	f7ff bb0e 	b.w	80a09a4 <network_on>

080a1388 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1388:	2300      	movs	r3, #0
 80a138a:	6840      	ldr	r0, [r0, #4]
 80a138c:	461a      	mov	r2, r3
 80a138e:	4619      	mov	r1, r3
 80a1390:	f7ff bb10 	b.w	80a09b4 <network_off>

080a1394 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1394:	2100      	movs	r1, #0
 80a1396:	6840      	ldr	r0, [r0, #4]
 80a1398:	f7ff bb34 	b.w	80a0a04 <network_is_on>

080a139c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a139c:	2100      	movs	r1, #0
 80a139e:	6840      	ldr	r0, [r0, #4]
 80a13a0:	f7ff bb38 	b.w	80a0a14 <network_is_off>

080a13a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a13a4:	2200      	movs	r2, #0
 80a13a6:	6840      	ldr	r0, [r0, #4]
 80a13a8:	f081 0101 	eor.w	r1, r1, #1
 80a13ac:	f7ff bb0a 	b.w	80a09c4 <network_listen>

080a13b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a13b0:	2200      	movs	r2, #0
 80a13b2:	6840      	ldr	r0, [r0, #4]
 80a13b4:	f7ff bb16 	b.w	80a09e4 <network_set_listen_timeout>

080a13b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a13b8:	2200      	movs	r2, #0
 80a13ba:	6840      	ldr	r0, [r0, #4]
 80a13bc:	4611      	mov	r1, r2
 80a13be:	f7ff bb19 	b.w	80a09f4 <network_get_listen_timeout>

080a13c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a13c2:	2200      	movs	r2, #0
 80a13c4:	6840      	ldr	r0, [r0, #4]
 80a13c6:	4611      	mov	r1, r2
 80a13c8:	f7ff bb04 	b.w	80a09d4 <network_listening>

080a13cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a13cc:	b570      	push	{r4, r5, r6, lr}
 80a13ce:	4615      	mov	r5, r2
 80a13d0:	b08e      	sub	sp, #56	; 0x38
 80a13d2:	4604      	mov	r4, r0
    IPAddress addr;
 80a13d4:	a808      	add	r0, sp, #32
 80a13d6:	f7ff fd9f 	bl	80a0f18 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a13da:	2211      	movs	r2, #17
 80a13dc:	2100      	movs	r1, #0
 80a13de:	a803      	add	r0, sp, #12
 80a13e0:	f002 f976 	bl	80a36d0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13e4:	2600      	movs	r6, #0
 80a13e6:	4628      	mov	r0, r5
 80a13e8:	f002 f99e 	bl	80a3728 <strlen>
 80a13ec:	4b0a      	ldr	r3, [pc, #40]	; (80a1418 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a13ee:	9600      	str	r6, [sp, #0]
 80a13f0:	b281      	uxth	r1, r0
 80a13f2:	685b      	ldr	r3, [r3, #4]
 80a13f4:	4628      	mov	r0, r5
 80a13f6:	aa03      	add	r2, sp, #12
 80a13f8:	f7ff fa88 	bl	80a090c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a13fc:	b130      	cbz	r0, 80a140c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a13fe:	4631      	mov	r1, r6
 80a1400:	4620      	mov	r0, r4
 80a1402:	f7ff fda9 	bl	80a0f58 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1406:	4620      	mov	r0, r4
 80a1408:	b00e      	add	sp, #56	; 0x38
 80a140a:	bd70      	pop	{r4, r5, r6, pc}
 80a140c:	4620      	mov	r0, r4
 80a140e:	a903      	add	r1, sp, #12
 80a1410:	f7ff fd90 	bl	80a0f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1414:	e7f7      	b.n	80a1406 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1416:	bf00      	nop
 80a1418:	2000053c 	.word	0x2000053c

080a141c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a141c:	4b02      	ldr	r3, [pc, #8]	; (80a1428 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a141e:	4a03      	ldr	r2, [pc, #12]	; (80a142c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1420:	601a      	str	r2, [r3, #0]
 80a1422:	2200      	movs	r2, #0
 80a1424:	605a      	str	r2, [r3, #4]

} // spark
 80a1426:	4770      	bx	lr
 80a1428:	20000544 	.word	0x20000544
 80a142c:	080a3990 	.word	0x080a3990

080a1430 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1430:	4b02      	ldr	r3, [pc, #8]	; (80a143c <__tcf_0+0xc>)
 80a1432:	6898      	ldr	r0, [r3, #8]
 80a1434:	b108      	cbz	r0, 80a143a <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1436:	f7ff b99f 	b.w	80a0778 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a143a:	4770      	bx	lr
 80a143c:	20000550 	.word	0x20000550

080a1440 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1440:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1442:	b570      	push	{r4, r5, r6, lr}
 80a1444:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1446:	d901      	bls.n	80a144c <pinAvailable+0xc>
    return false;
 80a1448:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a144a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a144c:	f1a0 030d 	sub.w	r3, r0, #13
 80a1450:	2b02      	cmp	r3, #2
 80a1452:	d90b      	bls.n	80a146c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1454:	2801      	cmp	r0, #1
 80a1456:	d824      	bhi.n	80a14a2 <pinAvailable+0x62>
 80a1458:	f000 f884 	bl	80a1564 <_Z19__fetch_global_Wirev>
 80a145c:	2100      	movs	r1, #0
 80a145e:	7c00      	ldrb	r0, [r0, #16]
 80a1460:	f7ff f9fa 	bl	80a0858 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1464:	f080 0001 	eor.w	r0, r0, #1
 80a1468:	b2c0      	uxtb	r0, r0
 80a146a:	e7ee      	b.n	80a144a <pinAvailable+0xa>
 80a146c:	4e12      	ldr	r6, [pc, #72]	; (80a14b8 <pinAvailable+0x78>)
 80a146e:	7831      	ldrb	r1, [r6, #0]
 80a1470:	f3bf 8f5b 	dmb	ish
 80a1474:	f011 0501 	ands.w	r5, r1, #1
 80a1478:	d10d      	bne.n	80a1496 <pinAvailable+0x56>
 80a147a:	4630      	mov	r0, r6
 80a147c:	f7fe fe11 	bl	80a00a2 <__cxa_guard_acquire>
 80a1480:	b148      	cbz	r0, 80a1496 <pinAvailable+0x56>
 80a1482:	4629      	mov	r1, r5
 80a1484:	480d      	ldr	r0, [pc, #52]	; (80a14bc <pinAvailable+0x7c>)
 80a1486:	f7ff faf5 	bl	80a0a74 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a148a:	4630      	mov	r0, r6
 80a148c:	f7fe fe0e 	bl	80a00ac <__cxa_guard_release>
 80a1490:	480b      	ldr	r0, [pc, #44]	; (80a14c0 <pinAvailable+0x80>)
 80a1492:	f002 f909 	bl	80a36a8 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1496:	4b09      	ldr	r3, [pc, #36]	; (80a14bc <pinAvailable+0x7c>)
 80a1498:	7818      	ldrb	r0, [r3, #0]
 80a149a:	f7ff f9f7 	bl	80a088c <hal_spi_is_enabled>
 80a149e:	2800      	cmp	r0, #0
 80a14a0:	d1d2      	bne.n	80a1448 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a14a2:	3c12      	subs	r4, #18
 80a14a4:	2c01      	cmp	r4, #1
 80a14a6:	d805      	bhi.n	80a14b4 <pinAvailable+0x74>
 80a14a8:	f7ff fe98 	bl	80a11dc <_Z22__fetch_global_Serial1v>
 80a14ac:	7c00      	ldrb	r0, [r0, #16]
 80a14ae:	f7ff f99b 	bl	80a07e8 <hal_usart_is_enabled>
 80a14b2:	e7d7      	b.n	80a1464 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a14b4:	2001      	movs	r0, #1
 80a14b6:	e7c8      	b.n	80a144a <pinAvailable+0xa>
 80a14b8:	2000054c 	.word	0x2000054c
 80a14bc:	20000550 	.word	0x20000550
 80a14c0:	080a1431 	.word	0x080a1431

080a14c4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a14c4:	2817      	cmp	r0, #23
{
 80a14c6:	b538      	push	{r3, r4, r5, lr}
 80a14c8:	4604      	mov	r4, r0
 80a14ca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a14cc:	d80a      	bhi.n	80a14e4 <pinMode+0x20>
 80a14ce:	29ff      	cmp	r1, #255	; 0xff
 80a14d0:	d008      	beq.n	80a14e4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a14d2:	f7ff ffb5 	bl	80a1440 <pinAvailable>
 80a14d6:	b128      	cbz	r0, 80a14e4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a14d8:	4629      	mov	r1, r5
 80a14da:	4620      	mov	r0, r4
}
 80a14dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a14e0:	f7ff b90a 	b.w	80a06f8 <HAL_Pin_Mode>
}
 80a14e4:	bd38      	pop	{r3, r4, r5, pc}

080a14e6 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a14e6:	b510      	push	{r4, lr}
 80a14e8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a14ea:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a14ec:	bf9c      	itt	ls
 80a14ee:	340a      	addls	r4, #10
 80a14f0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a14f2:	4620      	mov	r0, r4
 80a14f4:	f7ff ffa4 	bl	80a1440 <pinAvailable>
 80a14f8:	b150      	cbz	r0, 80a1510 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a14fa:	2103      	movs	r1, #3
 80a14fc:	4620      	mov	r0, r4
 80a14fe:	f7ff f8f3 	bl	80a06e8 <HAL_Validate_Pin_Function>
 80a1502:	2803      	cmp	r0, #3
 80a1504:	d104      	bne.n	80a1510 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a1506:	4620      	mov	r0, r4
}
 80a1508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a150c:	f7ff b90c 	b.w	80a0728 <hal_adc_read>
}
 80a1510:	2000      	movs	r0, #0
 80a1512:	bd10      	pop	{r4, pc}

080a1514 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1514:	2300      	movs	r3, #0
 80a1516:	b507      	push	{r0, r1, r2, lr}
 80a1518:	461a      	mov	r2, r3
 80a151a:	4619      	mov	r1, r3
 80a151c:	9300      	str	r3, [sp, #0]
 80a151e:	4803      	ldr	r0, [pc, #12]	; (80a152c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1520:	f7ff fd30 	bl	80a0f84 <_ZN9IPAddressC1Ehhhh>
 80a1524:	b003      	add	sp, #12
 80a1526:	f85d fb04 	ldr.w	pc, [sp], #4
 80a152a:	bf00      	nop
 80a152c:	20000560 	.word	0x20000560

080a1530 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1530:	4770      	bx	lr
	...

080a1534 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a1534:	2300      	movs	r3, #0
{
 80a1536:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1538:	2520      	movs	r5, #32
 80a153a:	8043      	strh	r3, [r0, #2]
 80a153c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a153e:	4e08      	ldr	r6, [pc, #32]	; (80a1560 <_Z17acquireWireBufferv+0x2c>)
{
 80a1540:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1542:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1544:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1546:	6085      	str	r5, [r0, #8]
 80a1548:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a154a:	4628      	mov	r0, r5
 80a154c:	f000 f830 	bl	80a15b0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1550:	4631      	mov	r1, r6
	};
 80a1552:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1554:	4628      	mov	r0, r5
 80a1556:	f000 f82b 	bl	80a15b0 <_ZnajRKSt9nothrow_t>
	};
 80a155a:	60e0      	str	r0, [r4, #12]
}
 80a155c:	4620      	mov	r0, r4
 80a155e:	bd70      	pop	{r4, r5, r6, pc}
 80a1560:	080a39c4 	.word	0x080a39c4

080a1564 <_Z19__fetch_global_Wirev>:
{
 80a1564:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1566:	4d0e      	ldr	r5, [pc, #56]	; (80a15a0 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1568:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a156a:	7829      	ldrb	r1, [r5, #0]
 80a156c:	f3bf 8f5b 	dmb	ish
 80a1570:	f011 0401 	ands.w	r4, r1, #1
 80a1574:	d111      	bne.n	80a159a <_Z19__fetch_global_Wirev+0x36>
 80a1576:	4628      	mov	r0, r5
 80a1578:	f7fe fd93 	bl	80a00a2 <__cxa_guard_acquire>
 80a157c:	b168      	cbz	r0, 80a159a <_Z19__fetch_global_Wirev+0x36>
 80a157e:	a801      	add	r0, sp, #4
 80a1580:	f7ff ffd8 	bl	80a1534 <_Z17acquireWireBufferv>
 80a1584:	4621      	mov	r1, r4
 80a1586:	aa01      	add	r2, sp, #4
 80a1588:	4806      	ldr	r0, [pc, #24]	; (80a15a4 <_Z19__fetch_global_Wirev+0x40>)
 80a158a:	f7ff fe77 	bl	80a127c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a158e:	4628      	mov	r0, r5
 80a1590:	f7fe fd8c 	bl	80a00ac <__cxa_guard_release>
 80a1594:	4804      	ldr	r0, [pc, #16]	; (80a15a8 <_Z19__fetch_global_Wirev+0x44>)
 80a1596:	f002 f887 	bl	80a36a8 <atexit>
	return wire;
}
 80a159a:	4802      	ldr	r0, [pc, #8]	; (80a15a4 <_Z19__fetch_global_Wirev+0x40>)
 80a159c:	b007      	add	sp, #28
 80a159e:	bd30      	pop	{r4, r5, pc}
 80a15a0:	20000578 	.word	0x20000578
 80a15a4:	2000057c 	.word	0x2000057c
 80a15a8:	080a1531 	.word	0x080a1531

080a15ac <_ZdlPvj>:
 80a15ac:	f7fe bd77 	b.w	80a009e <_ZdlPv>

080a15b0 <_ZnajRKSt9nothrow_t>:
 80a15b0:	f7fe bd73 	b.w	80a009a <_Znaj>

080a15b4 <pow>:
 80a15b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a15b8:	b08f      	sub	sp, #60	; 0x3c
 80a15ba:	461d      	mov	r5, r3
 80a15bc:	4606      	mov	r6, r0
 80a15be:	460f      	mov	r7, r1
 80a15c0:	4614      	mov	r4, r2
 80a15c2:	f000 f995 	bl	80a18f0 <__ieee754_pow>
 80a15c6:	4ba4      	ldr	r3, [pc, #656]	; (80a1858 <pow+0x2a4>)
 80a15c8:	e9cd 0100 	strd	r0, r1, [sp]
 80a15cc:	f993 9000 	ldrsb.w	r9, [r3]
 80a15d0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80a15d4:	d038      	beq.n	80a1648 <pow+0x94>
 80a15d6:	4622      	mov	r2, r4
 80a15d8:	462b      	mov	r3, r5
 80a15da:	4620      	mov	r0, r4
 80a15dc:	4629      	mov	r1, r5
 80a15de:	f001 fd57 	bl	80a3090 <__aeabi_dcmpun>
 80a15e2:	4683      	mov	fp, r0
 80a15e4:	bb80      	cbnz	r0, 80a1648 <pow+0x94>
 80a15e6:	4632      	mov	r2, r6
 80a15e8:	463b      	mov	r3, r7
 80a15ea:	4630      	mov	r0, r6
 80a15ec:	4639      	mov	r1, r7
 80a15ee:	f001 fd4f 	bl	80a3090 <__aeabi_dcmpun>
 80a15f2:	4680      	mov	r8, r0
 80a15f4:	2800      	cmp	r0, #0
 80a15f6:	f040 80d9 	bne.w	80a17ac <pow+0x1f8>
 80a15fa:	f04f 0a00 	mov.w	sl, #0
 80a15fe:	f04f 0b00 	mov.w	fp, #0
 80a1602:	4630      	mov	r0, r6
 80a1604:	4639      	mov	r1, r7
 80a1606:	4652      	mov	r2, sl
 80a1608:	465b      	mov	r3, fp
 80a160a:	f001 fd0f 	bl	80a302c <__aeabi_dcmpeq>
 80a160e:	b300      	cbz	r0, 80a1652 <pow+0x9e>
 80a1610:	4652      	mov	r2, sl
 80a1612:	465b      	mov	r3, fp
 80a1614:	4620      	mov	r0, r4
 80a1616:	4629      	mov	r1, r5
 80a1618:	f001 fd08 	bl	80a302c <__aeabi_dcmpeq>
 80a161c:	9003      	str	r0, [sp, #12]
 80a161e:	2800      	cmp	r0, #0
 80a1620:	d048      	beq.n	80a16b4 <pow+0x100>
 80a1622:	2201      	movs	r2, #1
 80a1624:	4b8d      	ldr	r3, [pc, #564]	; (80a185c <pow+0x2a8>)
 80a1626:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a162a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a162e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a1632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a1636:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a163a:	f1b9 0f00 	cmp.w	r9, #0
 80a163e:	d068      	beq.n	80a1712 <pow+0x15e>
 80a1640:	2300      	movs	r3, #0
 80a1642:	4c87      	ldr	r4, [pc, #540]	; (80a1860 <pow+0x2ac>)
 80a1644:	e9cd 3400 	strd	r3, r4, [sp]
 80a1648:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a164c:	b00f      	add	sp, #60	; 0x3c
 80a164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1652:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1656:	f000 ffab 	bl	80a25b0 <finite>
 80a165a:	4680      	mov	r8, r0
 80a165c:	2800      	cmp	r0, #0
 80a165e:	d069      	beq.n	80a1734 <pow+0x180>
 80a1660:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1664:	f04f 0800 	mov.w	r8, #0
 80a1668:	f04f 0900 	mov.w	r9, #0
 80a166c:	4642      	mov	r2, r8
 80a166e:	464b      	mov	r3, r9
 80a1670:	f001 fcdc 	bl	80a302c <__aeabi_dcmpeq>
 80a1674:	2800      	cmp	r0, #0
 80a1676:	d0e7      	beq.n	80a1648 <pow+0x94>
 80a1678:	4630      	mov	r0, r6
 80a167a:	4639      	mov	r1, r7
 80a167c:	f000 ff98 	bl	80a25b0 <finite>
 80a1680:	2800      	cmp	r0, #0
 80a1682:	d0e1      	beq.n	80a1648 <pow+0x94>
 80a1684:	4620      	mov	r0, r4
 80a1686:	4629      	mov	r1, r5
 80a1688:	f000 ff92 	bl	80a25b0 <finite>
 80a168c:	2800      	cmp	r0, #0
 80a168e:	d0db      	beq.n	80a1648 <pow+0x94>
 80a1690:	2004      	movs	r0, #4
 80a1692:	2100      	movs	r1, #0
 80a1694:	4b70      	ldr	r3, [pc, #448]	; (80a1858 <pow+0x2a4>)
 80a1696:	4a71      	ldr	r2, [pc, #452]	; (80a185c <pow+0x2a8>)
 80a1698:	f993 3000 	ldrsb.w	r3, [r3]
 80a169c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a16a0:	2b02      	cmp	r3, #2
 80a16a2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a16a6:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a16aa:	9004      	str	r0, [sp, #16]
 80a16ac:	910c      	str	r1, [sp, #48]	; 0x30
 80a16ae:	9205      	str	r2, [sp, #20]
 80a16b0:	d172      	bne.n	80a1798 <pow+0x1e4>
 80a16b2:	e076      	b.n	80a17a2 <pow+0x1ee>
 80a16b4:	4620      	mov	r0, r4
 80a16b6:	4629      	mov	r1, r5
 80a16b8:	f000 ff7a 	bl	80a25b0 <finite>
 80a16bc:	2800      	cmp	r0, #0
 80a16be:	d0c3      	beq.n	80a1648 <pow+0x94>
 80a16c0:	4652      	mov	r2, sl
 80a16c2:	465b      	mov	r3, fp
 80a16c4:	4620      	mov	r0, r4
 80a16c6:	4629      	mov	r1, r5
 80a16c8:	f001 fcba 	bl	80a3040 <__aeabi_dcmplt>
 80a16cc:	2800      	cmp	r0, #0
 80a16ce:	d0bb      	beq.n	80a1648 <pow+0x94>
 80a16d0:	2101      	movs	r1, #1
 80a16d2:	9a03      	ldr	r2, [sp, #12]
 80a16d4:	4b60      	ldr	r3, [pc, #384]	; (80a1858 <pow+0x2a4>)
 80a16d6:	920c      	str	r2, [sp, #48]	; 0x30
 80a16d8:	f993 3000 	ldrsb.w	r3, [r3]
 80a16dc:	4a5f      	ldr	r2, [pc, #380]	; (80a185c <pow+0x2a8>)
 80a16de:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a16e2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a16e6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a16ea:	2b00      	cmp	r3, #0
 80a16ec:	d17b      	bne.n	80a17e6 <pow+0x232>
 80a16ee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a16f2:	a804      	add	r0, sp, #16
 80a16f4:	f000 ff62 	bl	80a25bc <matherr>
 80a16f8:	2800      	cmp	r0, #0
 80a16fa:	d07b      	beq.n	80a17f4 <pow+0x240>
 80a16fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a16fe:	b11b      	cbz	r3, 80a1708 <pow+0x154>
 80a1700:	f7ff f9a8 	bl	80a0a54 <__errno>
 80a1704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a1706:	6003      	str	r3, [r0, #0]
 80a1708:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a170c:	e9cd 3400 	strd	r3, r4, [sp]
 80a1710:	e79a      	b.n	80a1648 <pow+0x94>
 80a1712:	a804      	add	r0, sp, #16
 80a1714:	f000 ff52 	bl	80a25bc <matherr>
 80a1718:	2800      	cmp	r0, #0
 80a171a:	d070      	beq.n	80a17fe <pow+0x24a>
 80a171c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a171e:	2b00      	cmp	r3, #0
 80a1720:	d0f2      	beq.n	80a1708 <pow+0x154>
 80a1722:	f7ff f997 	bl	80a0a54 <__errno>
 80a1726:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a172a:	e9cd 3400 	strd	r3, r4, [sp]
 80a172e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a1730:	6003      	str	r3, [r0, #0]
 80a1732:	e789      	b.n	80a1648 <pow+0x94>
 80a1734:	4630      	mov	r0, r6
 80a1736:	4639      	mov	r1, r7
 80a1738:	f000 ff3a 	bl	80a25b0 <finite>
 80a173c:	2800      	cmp	r0, #0
 80a173e:	d08f      	beq.n	80a1660 <pow+0xac>
 80a1740:	4620      	mov	r0, r4
 80a1742:	4629      	mov	r1, r5
 80a1744:	f000 ff34 	bl	80a25b0 <finite>
 80a1748:	2800      	cmp	r0, #0
 80a174a:	d089      	beq.n	80a1660 <pow+0xac>
 80a174c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a1750:	4610      	mov	r0, r2
 80a1752:	4619      	mov	r1, r3
 80a1754:	f001 fc9c 	bl	80a3090 <__aeabi_dcmpun>
 80a1758:	2800      	cmp	r0, #0
 80a175a:	f040 80a4 	bne.w	80a18a6 <pow+0x2f2>
 80a175e:	2203      	movs	r2, #3
 80a1760:	9204      	str	r2, [sp, #16]
 80a1762:	4a3d      	ldr	r2, [pc, #244]	; (80a1858 <pow+0x2a4>)
 80a1764:	4b3d      	ldr	r3, [pc, #244]	; (80a185c <pow+0x2a8>)
 80a1766:	f992 8000 	ldrsb.w	r8, [r2]
 80a176a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a176e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a1772:	900c      	str	r0, [sp, #48]	; 0x30
 80a1774:	9305      	str	r3, [sp, #20]
 80a1776:	f1b8 0f00 	cmp.w	r8, #0
 80a177a:	d145      	bne.n	80a1808 <pow+0x254>
 80a177c:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 80a1780:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80a1874 <pow+0x2c0>
 80a1784:	4652      	mov	r2, sl
 80a1786:	465b      	mov	r3, fp
 80a1788:	4630      	mov	r0, r6
 80a178a:	4639      	mov	r1, r7
 80a178c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a1790:	f001 fc56 	bl	80a3040 <__aeabi_dcmplt>
 80a1794:	2800      	cmp	r0, #0
 80a1796:	d146      	bne.n	80a1826 <pow+0x272>
 80a1798:	a804      	add	r0, sp, #16
 80a179a:	f000 ff0f 	bl	80a25bc <matherr>
 80a179e:	2800      	cmp	r0, #0
 80a17a0:	d1ac      	bne.n	80a16fc <pow+0x148>
 80a17a2:	f7ff f957 	bl	80a0a54 <__errno>
 80a17a6:	2322      	movs	r3, #34	; 0x22
 80a17a8:	6003      	str	r3, [r0, #0]
 80a17aa:	e7a7      	b.n	80a16fc <pow+0x148>
 80a17ac:	2200      	movs	r2, #0
 80a17ae:	2300      	movs	r3, #0
 80a17b0:	4620      	mov	r0, r4
 80a17b2:	4629      	mov	r1, r5
 80a17b4:	f001 fc3a 	bl	80a302c <__aeabi_dcmpeq>
 80a17b8:	2800      	cmp	r0, #0
 80a17ba:	f43f af45 	beq.w	80a1648 <pow+0x94>
 80a17be:	2201      	movs	r2, #1
 80a17c0:	2000      	movs	r0, #0
 80a17c2:	4927      	ldr	r1, [pc, #156]	; (80a1860 <pow+0x2ac>)
 80a17c4:	4b25      	ldr	r3, [pc, #148]	; (80a185c <pow+0x2a8>)
 80a17c6:	f1b9 0f02 	cmp.w	r9, #2
 80a17ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a17ce:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a17d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a17d6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80a17da:	9204      	str	r2, [sp, #16]
 80a17dc:	9305      	str	r3, [sp, #20]
 80a17de:	d198      	bne.n	80a1712 <pow+0x15e>
 80a17e0:	e9cd 0100 	strd	r0, r1, [sp]
 80a17e4:	e730      	b.n	80a1648 <pow+0x94>
 80a17e6:	2000      	movs	r0, #0
 80a17e8:	491e      	ldr	r1, [pc, #120]	; (80a1864 <pow+0x2b0>)
 80a17ea:	2b02      	cmp	r3, #2
 80a17ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a17f0:	f47f af7f 	bne.w	80a16f2 <pow+0x13e>
 80a17f4:	f7ff f92e 	bl	80a0a54 <__errno>
 80a17f8:	2321      	movs	r3, #33	; 0x21
 80a17fa:	6003      	str	r3, [r0, #0]
 80a17fc:	e77e      	b.n	80a16fc <pow+0x148>
 80a17fe:	f7ff f929 	bl	80a0a54 <__errno>
 80a1802:	2321      	movs	r3, #33	; 0x21
 80a1804:	6003      	str	r3, [r0, #0]
 80a1806:	e789      	b.n	80a171c <pow+0x168>
 80a1808:	4630      	mov	r0, r6
 80a180a:	2600      	movs	r6, #0
 80a180c:	4639      	mov	r1, r7
 80a180e:	4f16      	ldr	r7, [pc, #88]	; (80a1868 <pow+0x2b4>)
 80a1810:	4652      	mov	r2, sl
 80a1812:	465b      	mov	r3, fp
 80a1814:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80a1818:	f001 fc12 	bl	80a3040 <__aeabi_dcmplt>
 80a181c:	bb60      	cbnz	r0, 80a1878 <pow+0x2c4>
 80a181e:	f1b8 0f02 	cmp.w	r8, #2
 80a1822:	d0be      	beq.n	80a17a2 <pow+0x1ee>
 80a1824:	e7b8      	b.n	80a1798 <pow+0x1e4>
 80a1826:	2200      	movs	r2, #0
 80a1828:	4b10      	ldr	r3, [pc, #64]	; (80a186c <pow+0x2b8>)
 80a182a:	4620      	mov	r0, r4
 80a182c:	4629      	mov	r1, r5
 80a182e:	f001 f995 	bl	80a2b5c <__aeabi_dmul>
 80a1832:	4604      	mov	r4, r0
 80a1834:	460d      	mov	r5, r1
 80a1836:	f000 fec9 	bl	80a25cc <rint>
 80a183a:	4622      	mov	r2, r4
 80a183c:	462b      	mov	r3, r5
 80a183e:	f001 fbf5 	bl	80a302c <__aeabi_dcmpeq>
 80a1842:	bb60      	cbnz	r0, 80a189e <pow+0x2ea>
 80a1844:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1848:	4b09      	ldr	r3, [pc, #36]	; (80a1870 <pow+0x2bc>)
 80a184a:	4903      	ldr	r1, [pc, #12]	; (80a1858 <pow+0x2a4>)
 80a184c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a1850:	f991 8000 	ldrsb.w	r8, [r1]
 80a1854:	e7e3      	b.n	80a181e <pow+0x26a>
 80a1856:	bf00      	nop
 80a1858:	20000004 	.word	0x20000004
 80a185c:	080a39c8 	.word	0x080a39c8
 80a1860:	3ff00000 	.word	0x3ff00000
 80a1864:	fff00000 	.word	0xfff00000
 80a1868:	7ff00000 	.word	0x7ff00000
 80a186c:	3fe00000 	.word	0x3fe00000
 80a1870:	c7efffff 	.word	0xc7efffff
 80a1874:	47efffff 	.word	0x47efffff
 80a1878:	2200      	movs	r2, #0
 80a187a:	4b19      	ldr	r3, [pc, #100]	; (80a18e0 <pow+0x32c>)
 80a187c:	4620      	mov	r0, r4
 80a187e:	4629      	mov	r1, r5
 80a1880:	f001 f96c 	bl	80a2b5c <__aeabi_dmul>
 80a1884:	4604      	mov	r4, r0
 80a1886:	460d      	mov	r5, r1
 80a1888:	f000 fea0 	bl	80a25cc <rint>
 80a188c:	4622      	mov	r2, r4
 80a188e:	462b      	mov	r3, r5
 80a1890:	f001 fbcc 	bl	80a302c <__aeabi_dcmpeq>
 80a1894:	b918      	cbnz	r0, 80a189e <pow+0x2ea>
 80a1896:	2200      	movs	r2, #0
 80a1898:	4b12      	ldr	r3, [pc, #72]	; (80a18e4 <pow+0x330>)
 80a189a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a189e:	4b12      	ldr	r3, [pc, #72]	; (80a18e8 <pow+0x334>)
 80a18a0:	f993 8000 	ldrsb.w	r8, [r3]
 80a18a4:	e7bb      	b.n	80a181e <pow+0x26a>
 80a18a6:	2201      	movs	r2, #1
 80a18a8:	4b0f      	ldr	r3, [pc, #60]	; (80a18e8 <pow+0x334>)
 80a18aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a18ae:	f993 9000 	ldrsb.w	r9, [r3]
 80a18b2:	4b0e      	ldr	r3, [pc, #56]	; (80a18ec <pow+0x338>)
 80a18b4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a18b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a18bc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a18c0:	f1b9 0f00 	cmp.w	r9, #0
 80a18c4:	f43f af13 	beq.w	80a16ee <pow+0x13a>
 80a18c8:	4652      	mov	r2, sl
 80a18ca:	465b      	mov	r3, fp
 80a18cc:	4650      	mov	r0, sl
 80a18ce:	4659      	mov	r1, fp
 80a18d0:	f001 fa6e 	bl	80a2db0 <__aeabi_ddiv>
 80a18d4:	f1b9 0f02 	cmp.w	r9, #2
 80a18d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a18dc:	d08a      	beq.n	80a17f4 <pow+0x240>
 80a18de:	e708      	b.n	80a16f2 <pow+0x13e>
 80a18e0:	3fe00000 	.word	0x3fe00000
 80a18e4:	fff00000 	.word	0xfff00000
 80a18e8:	20000004 	.word	0x20000004
 80a18ec:	080a39c8 	.word	0x080a39c8

080a18f0 <__ieee754_pow>:
 80a18f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a18f4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80a18f8:	461f      	mov	r7, r3
 80a18fa:	4698      	mov	r8, r3
 80a18fc:	ea55 0302 	orrs.w	r3, r5, r2
 80a1900:	b095      	sub	sp, #84	; 0x54
 80a1902:	d037      	beq.n	80a1974 <__ieee754_pow+0x84>
 80a1904:	468b      	mov	fp, r1
 80a1906:	4689      	mov	r9, r1
 80a1908:	496f      	ldr	r1, [pc, #444]	; (80a1ac8 <__ieee754_pow+0x1d8>)
 80a190a:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80a190e:	428c      	cmp	r4, r1
 80a1910:	4682      	mov	sl, r0
 80a1912:	4603      	mov	r3, r0
 80a1914:	dc28      	bgt.n	80a1968 <__ieee754_pow+0x78>
 80a1916:	4616      	mov	r6, r2
 80a1918:	d035      	beq.n	80a1986 <__ieee754_pow+0x96>
 80a191a:	428d      	cmp	r5, r1
 80a191c:	dc24      	bgt.n	80a1968 <__ieee754_pow+0x78>
 80a191e:	496a      	ldr	r1, [pc, #424]	; (80a1ac8 <__ieee754_pow+0x1d8>)
 80a1920:	428d      	cmp	r5, r1
 80a1922:	d01f      	beq.n	80a1964 <__ieee754_pow+0x74>
 80a1924:	f1b9 0f00 	cmp.w	r9, #0
 80a1928:	db36      	blt.n	80a1998 <__ieee754_pow+0xa8>
 80a192a:	2100      	movs	r1, #0
 80a192c:	9102      	str	r1, [sp, #8]
 80a192e:	2a00      	cmp	r2, #0
 80a1930:	d14d      	bne.n	80a19ce <__ieee754_pow+0xde>
 80a1932:	4a65      	ldr	r2, [pc, #404]	; (80a1ac8 <__ieee754_pow+0x1d8>)
 80a1934:	4295      	cmp	r5, r2
 80a1936:	f000 809d 	beq.w	80a1a74 <__ieee754_pow+0x184>
 80a193a:	4a64      	ldr	r2, [pc, #400]	; (80a1acc <__ieee754_pow+0x1dc>)
 80a193c:	4295      	cmp	r5, r2
 80a193e:	f000 80ab 	beq.w	80a1a98 <__ieee754_pow+0x1a8>
 80a1942:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80a1946:	f000 84d4 	beq.w	80a22f2 <__ieee754_pow+0xa02>
 80a194a:	4a61      	ldr	r2, [pc, #388]	; (80a1ad0 <__ieee754_pow+0x1e0>)
 80a194c:	4590      	cmp	r8, r2
 80a194e:	d13e      	bne.n	80a19ce <__ieee754_pow+0xde>
 80a1950:	f1b9 0f00 	cmp.w	r9, #0
 80a1954:	db3b      	blt.n	80a19ce <__ieee754_pow+0xde>
 80a1956:	4650      	mov	r0, sl
 80a1958:	4659      	mov	r1, fp
 80a195a:	b015      	add	sp, #84	; 0x54
 80a195c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1960:	f000 bd5e 	b.w	80a2420 <__ieee754_sqrt>
 80a1964:	2a00      	cmp	r2, #0
 80a1966:	d0dd      	beq.n	80a1924 <__ieee754_pow+0x34>
 80a1968:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a196c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a1970:	4323      	orrs	r3, r4
 80a1972:	d10b      	bne.n	80a198c <__ieee754_pow+0x9c>
 80a1974:	2300      	movs	r3, #0
 80a1976:	4c55      	ldr	r4, [pc, #340]	; (80a1acc <__ieee754_pow+0x1dc>)
 80a1978:	e9cd 3400 	strd	r3, r4, [sp]
 80a197c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1980:	b015      	add	sp, #84	; 0x54
 80a1982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1986:	b908      	cbnz	r0, 80a198c <__ieee754_pow+0x9c>
 80a1988:	42a5      	cmp	r5, r4
 80a198a:	ddc8      	ble.n	80a191e <__ieee754_pow+0x2e>
 80a198c:	4851      	ldr	r0, [pc, #324]	; (80a1ad4 <__ieee754_pow+0x1e4>)
 80a198e:	b015      	add	sp, #84	; 0x54
 80a1990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1994:	f000 be14 	b.w	80a25c0 <nan>
 80a1998:	494f      	ldr	r1, [pc, #316]	; (80a1ad8 <__ieee754_pow+0x1e8>)
 80a199a:	428d      	cmp	r5, r1
 80a199c:	f300 8085 	bgt.w	80a1aaa <__ieee754_pow+0x1ba>
 80a19a0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80a19a4:	428d      	cmp	r5, r1
 80a19a6:	dd0e      	ble.n	80a19c6 <__ieee754_pow+0xd6>
 80a19a8:	1529      	asrs	r1, r5, #20
 80a19aa:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80a19ae:	2914      	cmp	r1, #20
 80a19b0:	f340 84a9 	ble.w	80a2306 <__ieee754_pow+0xa16>
 80a19b4:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80a19b8:	fa22 f001 	lsr.w	r0, r2, r1
 80a19bc:	fa00 f101 	lsl.w	r1, r0, r1
 80a19c0:	4291      	cmp	r1, r2
 80a19c2:	f000 84f6 	beq.w	80a23b2 <__ieee754_pow+0xac2>
 80a19c6:	2100      	movs	r1, #0
 80a19c8:	9102      	str	r1, [sp, #8]
 80a19ca:	2a00      	cmp	r2, #0
 80a19cc:	d0b5      	beq.n	80a193a <__ieee754_pow+0x4a>
 80a19ce:	4650      	mov	r0, sl
 80a19d0:	4659      	mov	r1, fp
 80a19d2:	930c      	str	r3, [sp, #48]	; 0x30
 80a19d4:	f000 fde8 	bl	80a25a8 <fabs>
 80a19d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a19da:	e9cd 0100 	strd	r0, r1, [sp]
 80a19de:	bb43      	cbnz	r3, 80a1a32 <__ieee754_pow+0x142>
 80a19e0:	b124      	cbz	r4, 80a19ec <__ieee754_pow+0xfc>
 80a19e2:	4b3a      	ldr	r3, [pc, #232]	; (80a1acc <__ieee754_pow+0x1dc>)
 80a19e4:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80a19e8:	429a      	cmp	r2, r3
 80a19ea:	d122      	bne.n	80a1a32 <__ieee754_pow+0x142>
 80a19ec:	f1b8 0f00 	cmp.w	r8, #0
 80a19f0:	da07      	bge.n	80a1a02 <__ieee754_pow+0x112>
 80a19f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a19f6:	2000      	movs	r0, #0
 80a19f8:	4934      	ldr	r1, [pc, #208]	; (80a1acc <__ieee754_pow+0x1dc>)
 80a19fa:	f001 f9d9 	bl	80a2db0 <__aeabi_ddiv>
 80a19fe:	e9cd 0100 	strd	r0, r1, [sp]
 80a1a02:	f1b9 0f00 	cmp.w	r9, #0
 80a1a06:	dab9      	bge.n	80a197c <__ieee754_pow+0x8c>
 80a1a08:	9b02      	ldr	r3, [sp, #8]
 80a1a0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a1a0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a1a12:	4323      	orrs	r3, r4
 80a1a14:	f040 849c 	bne.w	80a2350 <__ieee754_pow+0xa60>
 80a1a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a1a1c:	4610      	mov	r0, r2
 80a1a1e:	4619      	mov	r1, r3
 80a1a20:	f000 fee4 	bl	80a27ec <__aeabi_dsub>
 80a1a24:	4602      	mov	r2, r0
 80a1a26:	460b      	mov	r3, r1
 80a1a28:	f001 f9c2 	bl	80a2db0 <__aeabi_ddiv>
 80a1a2c:	e9cd 0100 	strd	r0, r1, [sp]
 80a1a30:	e7a4      	b.n	80a197c <__ieee754_pow+0x8c>
 80a1a32:	9a02      	ldr	r2, [sp, #8]
 80a1a34:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80a1a38:	3b01      	subs	r3, #1
 80a1a3a:	930c      	str	r3, [sp, #48]	; 0x30
 80a1a3c:	4313      	orrs	r3, r2
 80a1a3e:	d037      	beq.n	80a1ab0 <__ieee754_pow+0x1c0>
 80a1a40:	4b26      	ldr	r3, [pc, #152]	; (80a1adc <__ieee754_pow+0x1ec>)
 80a1a42:	429d      	cmp	r5, r3
 80a1a44:	dd4e      	ble.n	80a1ae4 <__ieee754_pow+0x1f4>
 80a1a46:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a1a4a:	429d      	cmp	r5, r3
 80a1a4c:	4b24      	ldr	r3, [pc, #144]	; (80a1ae0 <__ieee754_pow+0x1f0>)
 80a1a4e:	f340 83df 	ble.w	80a2210 <__ieee754_pow+0x920>
 80a1a52:	429c      	cmp	r4, r3
 80a1a54:	f340 835e 	ble.w	80a2114 <__ieee754_pow+0x824>
 80a1a58:	f1b8 0f00 	cmp.w	r8, #0
 80a1a5c:	f340 835e 	ble.w	80a211c <__ieee754_pow+0x82c>
 80a1a60:	a317      	add	r3, pc, #92	; (adr r3, 80a1ac0 <__ieee754_pow+0x1d0>)
 80a1a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1a66:	4610      	mov	r0, r2
 80a1a68:	4619      	mov	r1, r3
 80a1a6a:	f001 f877 	bl	80a2b5c <__aeabi_dmul>
 80a1a6e:	e9cd 0100 	strd	r0, r1, [sp]
 80a1a72:	e783      	b.n	80a197c <__ieee754_pow+0x8c>
 80a1a74:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
 80a1a78:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80a1a7c:	4313      	orrs	r3, r2
 80a1a7e:	f43f af79 	beq.w	80a1974 <__ieee754_pow+0x84>
 80a1a82:	4b17      	ldr	r3, [pc, #92]	; (80a1ae0 <__ieee754_pow+0x1f0>)
 80a1a84:	429c      	cmp	r4, r3
 80a1a86:	f340 8373 	ble.w	80a2170 <__ieee754_pow+0x880>
 80a1a8a:	f1b8 0f00 	cmp.w	r8, #0
 80a1a8e:	f2c0 8345 	blt.w	80a211c <__ieee754_pow+0x82c>
 80a1a92:	e9cd 6700 	strd	r6, r7, [sp]
 80a1a96:	e771      	b.n	80a197c <__ieee754_pow+0x8c>
 80a1a98:	f1b8 0f00 	cmp.w	r8, #0
 80a1a9c:	f2c0 841f 	blt.w	80a22de <__ieee754_pow+0x9ee>
 80a1aa0:	4650      	mov	r0, sl
 80a1aa2:	4659      	mov	r1, fp
 80a1aa4:	e9cd 0100 	strd	r0, r1, [sp]
 80a1aa8:	e768      	b.n	80a197c <__ieee754_pow+0x8c>
 80a1aaa:	2102      	movs	r1, #2
 80a1aac:	9102      	str	r1, [sp, #8]
 80a1aae:	e73e      	b.n	80a192e <__ieee754_pow+0x3e>
 80a1ab0:	4652      	mov	r2, sl
 80a1ab2:	4650      	mov	r0, sl
 80a1ab4:	465b      	mov	r3, fp
 80a1ab6:	4659      	mov	r1, fp
 80a1ab8:	e7b2      	b.n	80a1a20 <__ieee754_pow+0x130>
 80a1aba:	bf00      	nop
 80a1abc:	f3af 8000 	nop.w
 80a1ac0:	8800759c 	.word	0x8800759c
 80a1ac4:	7e37e43c 	.word	0x7e37e43c
 80a1ac8:	7ff00000 	.word	0x7ff00000
 80a1acc:	3ff00000 	.word	0x3ff00000
 80a1ad0:	3fe00000 	.word	0x3fe00000
 80a1ad4:	080a39cc 	.word	0x080a39cc
 80a1ad8:	433fffff 	.word	0x433fffff
 80a1adc:	41e00000 	.word	0x41e00000
 80a1ae0:	3fefffff 	.word	0x3fefffff
 80a1ae4:	4bd0      	ldr	r3, [pc, #832]	; (80a1e28 <__ieee754_pow+0x538>)
 80a1ae6:	ea09 0303 	and.w	r3, r9, r3
 80a1aea:	2b00      	cmp	r3, #0
 80a1aec:	f040 8356 	bne.w	80a219c <__ieee754_pow+0x8ac>
 80a1af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1af4:	2200      	movs	r2, #0
 80a1af6:	4bcd      	ldr	r3, [pc, #820]	; (80a1e2c <__ieee754_pow+0x53c>)
 80a1af8:	f001 f830 	bl	80a2b5c <__aeabi_dmul>
 80a1afc:	f06f 0c34 	mvn.w	ip, #52	; 0x34
 80a1b00:	460c      	mov	r4, r1
 80a1b02:	e9cd 0100 	strd	r0, r1, [sp]
 80a1b06:	1523      	asrs	r3, r4, #20
 80a1b08:	4ac9      	ldr	r2, [pc, #804]	; (80a1e30 <__ieee754_pow+0x540>)
 80a1b0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80a1b0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a1b12:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80a1b16:	eb03 010c 	add.w	r1, r3, ip
 80a1b1a:	4294      	cmp	r4, r2
 80a1b1c:	910d      	str	r1, [sp, #52]	; 0x34
 80a1b1e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a1b22:	f340 832e 	ble.w	80a2182 <__ieee754_pow+0x892>
 80a1b26:	4bc3      	ldr	r3, [pc, #780]	; (80a1e34 <__ieee754_pow+0x544>)
 80a1b28:	429c      	cmp	r4, r3
 80a1b2a:	f340 841e 	ble.w	80a236a <__ieee754_pow+0xa7a>
 80a1b2e:	2300      	movs	r3, #0
 80a1b30:	2400      	movs	r4, #0
 80a1b32:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a1b36:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a1b3a:	2300      	movs	r3, #0
 80a1b3c:	f04f 0a00 	mov.w	sl, #0
 80a1b40:	4cbd      	ldr	r4, [pc, #756]	; (80a1e38 <__ieee754_pow+0x548>)
 80a1b42:	3101      	adds	r1, #1
 80a1b44:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a1b48:	910d      	str	r1, [sp, #52]	; 0x34
 80a1b4a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80a1b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1b52:	4629      	mov	r1, r5
 80a1b54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1b58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a1b5c:	f000 fe46 	bl	80a27ec <__aeabi_dsub>
 80a1b60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1b64:	4680      	mov	r8, r0
 80a1b66:	4689      	mov	r9, r1
 80a1b68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a1b6c:	f000 fe40 	bl	80a27f0 <__adddf3>
 80a1b70:	4602      	mov	r2, r0
 80a1b72:	460b      	mov	r3, r1
 80a1b74:	2000      	movs	r0, #0
 80a1b76:	49b0      	ldr	r1, [pc, #704]	; (80a1e38 <__ieee754_pow+0x548>)
 80a1b78:	f001 f91a 	bl	80a2db0 <__aeabi_ddiv>
 80a1b7c:	4603      	mov	r3, r0
 80a1b7e:	460c      	mov	r4, r1
 80a1b80:	461a      	mov	r2, r3
 80a1b82:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80a1b86:	4640      	mov	r0, r8
 80a1b88:	4623      	mov	r3, r4
 80a1b8a:	4649      	mov	r1, r9
 80a1b8c:	f000 ffe6 	bl	80a2b5c <__aeabi_dmul>
 80a1b90:	460c      	mov	r4, r1
 80a1b92:	4603      	mov	r3, r0
 80a1b94:	4601      	mov	r1, r0
 80a1b96:	4622      	mov	r2, r4
 80a1b98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a1b9c:	2400      	movs	r4, #0
 80a1b9e:	2000      	movs	r0, #0
 80a1ba0:	106b      	asrs	r3, r5, #1
 80a1ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a1ba6:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a1baa:	e9cd 1200 	strd	r1, r2, [sp]
 80a1bae:	eb03 010a 	add.w	r1, r3, sl
 80a1bb2:	9400      	str	r4, [sp, #0]
 80a1bb4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a1bb8:	4604      	mov	r4, r0
 80a1bba:	460d      	mov	r5, r1
 80a1bbc:	4602      	mov	r2, r0
 80a1bbe:	460b      	mov	r3, r1
 80a1bc0:	4650      	mov	r0, sl
 80a1bc2:	4659      	mov	r1, fp
 80a1bc4:	f000 ffca 	bl	80a2b5c <__aeabi_dmul>
 80a1bc8:	4602      	mov	r2, r0
 80a1bca:	460b      	mov	r3, r1
 80a1bcc:	4640      	mov	r0, r8
 80a1bce:	4649      	mov	r1, r9
 80a1bd0:	f000 fe0c 	bl	80a27ec <__aeabi_dsub>
 80a1bd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1bd8:	4680      	mov	r8, r0
 80a1bda:	4689      	mov	r9, r1
 80a1bdc:	4620      	mov	r0, r4
 80a1bde:	4629      	mov	r1, r5
 80a1be0:	f000 fe04 	bl	80a27ec <__aeabi_dsub>
 80a1be4:	4602      	mov	r2, r0
 80a1be6:	460b      	mov	r3, r1
 80a1be8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a1bec:	f000 fdfe 	bl	80a27ec <__aeabi_dsub>
 80a1bf0:	4652      	mov	r2, sl
 80a1bf2:	465b      	mov	r3, fp
 80a1bf4:	f000 ffb2 	bl	80a2b5c <__aeabi_dmul>
 80a1bf8:	4602      	mov	r2, r0
 80a1bfa:	460b      	mov	r3, r1
 80a1bfc:	4640      	mov	r0, r8
 80a1bfe:	4649      	mov	r1, r9
 80a1c00:	f000 fdf4 	bl	80a27ec <__aeabi_dsub>
 80a1c04:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a1c08:	f000 ffa8 	bl	80a2b5c <__aeabi_dmul>
 80a1c0c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a1c10:	4604      	mov	r4, r0
 80a1c12:	460d      	mov	r5, r1
 80a1c14:	4642      	mov	r2, r8
 80a1c16:	464b      	mov	r3, r9
 80a1c18:	4640      	mov	r0, r8
 80a1c1a:	4649      	mov	r1, r9
 80a1c1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a1c20:	f000 ff9c 	bl	80a2b5c <__aeabi_dmul>
 80a1c24:	a36e      	add	r3, pc, #440	; (adr r3, 80a1de0 <__ieee754_pow+0x4f0>)
 80a1c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c2a:	4604      	mov	r4, r0
 80a1c2c:	460d      	mov	r5, r1
 80a1c2e:	f000 ff95 	bl	80a2b5c <__aeabi_dmul>
 80a1c32:	a36d      	add	r3, pc, #436	; (adr r3, 80a1de8 <__ieee754_pow+0x4f8>)
 80a1c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c38:	f000 fdda 	bl	80a27f0 <__adddf3>
 80a1c3c:	4622      	mov	r2, r4
 80a1c3e:	462b      	mov	r3, r5
 80a1c40:	f000 ff8c 	bl	80a2b5c <__aeabi_dmul>
 80a1c44:	a36a      	add	r3, pc, #424	; (adr r3, 80a1df0 <__ieee754_pow+0x500>)
 80a1c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c4a:	f000 fdd1 	bl	80a27f0 <__adddf3>
 80a1c4e:	4622      	mov	r2, r4
 80a1c50:	462b      	mov	r3, r5
 80a1c52:	f000 ff83 	bl	80a2b5c <__aeabi_dmul>
 80a1c56:	a368      	add	r3, pc, #416	; (adr r3, 80a1df8 <__ieee754_pow+0x508>)
 80a1c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c5c:	f000 fdc8 	bl	80a27f0 <__adddf3>
 80a1c60:	4622      	mov	r2, r4
 80a1c62:	462b      	mov	r3, r5
 80a1c64:	f000 ff7a 	bl	80a2b5c <__aeabi_dmul>
 80a1c68:	a365      	add	r3, pc, #404	; (adr r3, 80a1e00 <__ieee754_pow+0x510>)
 80a1c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c6e:	f000 fdbf 	bl	80a27f0 <__adddf3>
 80a1c72:	4622      	mov	r2, r4
 80a1c74:	462b      	mov	r3, r5
 80a1c76:	f000 ff71 	bl	80a2b5c <__aeabi_dmul>
 80a1c7a:	a363      	add	r3, pc, #396	; (adr r3, 80a1e08 <__ieee754_pow+0x518>)
 80a1c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1c80:	f000 fdb6 	bl	80a27f0 <__adddf3>
 80a1c84:	4622      	mov	r2, r4
 80a1c86:	462b      	mov	r3, r5
 80a1c88:	4604      	mov	r4, r0
 80a1c8a:	460d      	mov	r5, r1
 80a1c8c:	4610      	mov	r0, r2
 80a1c8e:	4619      	mov	r1, r3
 80a1c90:	f000 ff64 	bl	80a2b5c <__aeabi_dmul>
 80a1c94:	4602      	mov	r2, r0
 80a1c96:	460b      	mov	r3, r1
 80a1c98:	4620      	mov	r0, r4
 80a1c9a:	4629      	mov	r1, r5
 80a1c9c:	f000 ff5e 	bl	80a2b5c <__aeabi_dmul>
 80a1ca0:	4604      	mov	r4, r0
 80a1ca2:	460d      	mov	r5, r1
 80a1ca4:	4652      	mov	r2, sl
 80a1ca6:	465b      	mov	r3, fp
 80a1ca8:	4640      	mov	r0, r8
 80a1caa:	4649      	mov	r1, r9
 80a1cac:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a1cb0:	f000 fd9e 	bl	80a27f0 <__adddf3>
 80a1cb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a1cb8:	f000 ff50 	bl	80a2b5c <__aeabi_dmul>
 80a1cbc:	4622      	mov	r2, r4
 80a1cbe:	462b      	mov	r3, r5
 80a1cc0:	f000 fd96 	bl	80a27f0 <__adddf3>
 80a1cc4:	4652      	mov	r2, sl
 80a1cc6:	4604      	mov	r4, r0
 80a1cc8:	460d      	mov	r5, r1
 80a1cca:	465b      	mov	r3, fp
 80a1ccc:	4650      	mov	r0, sl
 80a1cce:	4659      	mov	r1, fp
 80a1cd0:	f000 ff44 	bl	80a2b5c <__aeabi_dmul>
 80a1cd4:	46a0      	mov	r8, r4
 80a1cd6:	46a9      	mov	r9, r5
 80a1cd8:	4604      	mov	r4, r0
 80a1cda:	460d      	mov	r5, r1
 80a1cdc:	2200      	movs	r2, #0
 80a1cde:	4b57      	ldr	r3, [pc, #348]	; (80a1e3c <__ieee754_pow+0x54c>)
 80a1ce0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80a1ce4:	f000 fd84 	bl	80a27f0 <__adddf3>
 80a1ce8:	4642      	mov	r2, r8
 80a1cea:	464b      	mov	r3, r9
 80a1cec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80a1cf0:	f000 fd7e 	bl	80a27f0 <__adddf3>
 80a1cf4:	460d      	mov	r5, r1
 80a1cf6:	9c00      	ldr	r4, [sp, #0]
 80a1cf8:	462b      	mov	r3, r5
 80a1cfa:	4622      	mov	r2, r4
 80a1cfc:	4650      	mov	r0, sl
 80a1cfe:	4659      	mov	r1, fp
 80a1d00:	f000 ff2c 	bl	80a2b5c <__aeabi_dmul>
 80a1d04:	4680      	mov	r8, r0
 80a1d06:	4689      	mov	r9, r1
 80a1d08:	2200      	movs	r2, #0
 80a1d0a:	4620      	mov	r0, r4
 80a1d0c:	4629      	mov	r1, r5
 80a1d0e:	4b4b      	ldr	r3, [pc, #300]	; (80a1e3c <__ieee754_pow+0x54c>)
 80a1d10:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a1d14:	f000 fd6a 	bl	80a27ec <__aeabi_dsub>
 80a1d18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a1d1c:	f000 fd66 	bl	80a27ec <__aeabi_dsub>
 80a1d20:	4602      	mov	r2, r0
 80a1d22:	460b      	mov	r3, r1
 80a1d24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a1d28:	f000 fd60 	bl	80a27ec <__aeabi_dsub>
 80a1d2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1d30:	f000 ff14 	bl	80a2b5c <__aeabi_dmul>
 80a1d34:	4622      	mov	r2, r4
 80a1d36:	4680      	mov	r8, r0
 80a1d38:	4689      	mov	r9, r1
 80a1d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a1d3e:	462b      	mov	r3, r5
 80a1d40:	f000 ff0c 	bl	80a2b5c <__aeabi_dmul>
 80a1d44:	4602      	mov	r2, r0
 80a1d46:	460b      	mov	r3, r1
 80a1d48:	4640      	mov	r0, r8
 80a1d4a:	4649      	mov	r1, r9
 80a1d4c:	f000 fd50 	bl	80a27f0 <__adddf3>
 80a1d50:	4682      	mov	sl, r0
 80a1d52:	468b      	mov	fp, r1
 80a1d54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a1d58:	4652      	mov	r2, sl
 80a1d5a:	465b      	mov	r3, fp
 80a1d5c:	f000 fd48 	bl	80a27f0 <__adddf3>
 80a1d60:	a32b      	add	r3, pc, #172	; (adr r3, 80a1e10 <__ieee754_pow+0x520>)
 80a1d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1d66:	9c00      	ldr	r4, [sp, #0]
 80a1d68:	460d      	mov	r5, r1
 80a1d6a:	4620      	mov	r0, r4
 80a1d6c:	f000 fef6 	bl	80a2b5c <__aeabi_dmul>
 80a1d70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a1d74:	4680      	mov	r8, r0
 80a1d76:	4689      	mov	r9, r1
 80a1d78:	4620      	mov	r0, r4
 80a1d7a:	4629      	mov	r1, r5
 80a1d7c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a1d80:	f000 fd34 	bl	80a27ec <__aeabi_dsub>
 80a1d84:	4602      	mov	r2, r0
 80a1d86:	460b      	mov	r3, r1
 80a1d88:	4650      	mov	r0, sl
 80a1d8a:	4659      	mov	r1, fp
 80a1d8c:	f000 fd2e 	bl	80a27ec <__aeabi_dsub>
 80a1d90:	a321      	add	r3, pc, #132	; (adr r3, 80a1e18 <__ieee754_pow+0x528>)
 80a1d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1d96:	f000 fee1 	bl	80a2b5c <__aeabi_dmul>
 80a1d9a:	a321      	add	r3, pc, #132	; (adr r3, 80a1e20 <__ieee754_pow+0x530>)
 80a1d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1da0:	4680      	mov	r8, r0
 80a1da2:	4689      	mov	r9, r1
 80a1da4:	4620      	mov	r0, r4
 80a1da6:	4629      	mov	r1, r5
 80a1da8:	f000 fed8 	bl	80a2b5c <__aeabi_dmul>
 80a1dac:	4602      	mov	r2, r0
 80a1dae:	460b      	mov	r3, r1
 80a1db0:	4640      	mov	r0, r8
 80a1db2:	4649      	mov	r1, r9
 80a1db4:	f000 fd1c 	bl	80a27f0 <__adddf3>
 80a1db8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80a1dbc:	f000 fd18 	bl	80a27f0 <__adddf3>
 80a1dc0:	4682      	mov	sl, r0
 80a1dc2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a1dc4:	468b      	mov	fp, r1
 80a1dc6:	f000 fe5f 	bl	80a2a88 <__aeabi_i2d>
 80a1dca:	4680      	mov	r8, r0
 80a1dcc:	4689      	mov	r9, r1
 80a1dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a1dd2:	4652      	mov	r2, sl
 80a1dd4:	465b      	mov	r3, fp
 80a1dd6:	f000 fd0b 	bl	80a27f0 <__adddf3>
 80a1dda:	e031      	b.n	80a1e40 <__ieee754_pow+0x550>
 80a1ddc:	f3af 8000 	nop.w
 80a1de0:	4a454eef 	.word	0x4a454eef
 80a1de4:	3fca7e28 	.word	0x3fca7e28
 80a1de8:	93c9db65 	.word	0x93c9db65
 80a1dec:	3fcd864a 	.word	0x3fcd864a
 80a1df0:	a91d4101 	.word	0xa91d4101
 80a1df4:	3fd17460 	.word	0x3fd17460
 80a1df8:	518f264d 	.word	0x518f264d
 80a1dfc:	3fd55555 	.word	0x3fd55555
 80a1e00:	db6fabff 	.word	0xdb6fabff
 80a1e04:	3fdb6db6 	.word	0x3fdb6db6
 80a1e08:	33333303 	.word	0x33333303
 80a1e0c:	3fe33333 	.word	0x3fe33333
 80a1e10:	e0000000 	.word	0xe0000000
 80a1e14:	3feec709 	.word	0x3feec709
 80a1e18:	dc3a03fd 	.word	0xdc3a03fd
 80a1e1c:	3feec709 	.word	0x3feec709
 80a1e20:	145b01f5 	.word	0x145b01f5
 80a1e24:	be3e2fe0 	.word	0xbe3e2fe0
 80a1e28:	7ff00000 	.word	0x7ff00000
 80a1e2c:	43400000 	.word	0x43400000
 80a1e30:	0003988e 	.word	0x0003988e
 80a1e34:	000bb679 	.word	0x000bb679
 80a1e38:	3ff00000 	.word	0x3ff00000
 80a1e3c:	40080000 	.word	0x40080000
 80a1e40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a1e44:	f000 fcd4 	bl	80a27f0 <__adddf3>
 80a1e48:	4642      	mov	r2, r8
 80a1e4a:	464b      	mov	r3, r9
 80a1e4c:	f000 fcd0 	bl	80a27f0 <__adddf3>
 80a1e50:	9c00      	ldr	r4, [sp, #0]
 80a1e52:	4642      	mov	r2, r8
 80a1e54:	464b      	mov	r3, r9
 80a1e56:	4620      	mov	r0, r4
 80a1e58:	460d      	mov	r5, r1
 80a1e5a:	f000 fcc7 	bl	80a27ec <__aeabi_dsub>
 80a1e5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a1e62:	f000 fcc3 	bl	80a27ec <__aeabi_dsub>
 80a1e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a1e6a:	f000 fcbf 	bl	80a27ec <__aeabi_dsub>
 80a1e6e:	4602      	mov	r2, r0
 80a1e70:	460b      	mov	r3, r1
 80a1e72:	4650      	mov	r0, sl
 80a1e74:	4659      	mov	r1, fp
 80a1e76:	f000 fcb9 	bl	80a27ec <__aeabi_dsub>
 80a1e7a:	4682      	mov	sl, r0
 80a1e7c:	468b      	mov	fp, r1
 80a1e7e:	9b02      	ldr	r3, [sp, #8]
 80a1e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a1e82:	3b01      	subs	r3, #1
 80a1e84:	4313      	orrs	r3, r2
 80a1e86:	f04f 0200 	mov.w	r2, #0
 80a1e8a:	bf0c      	ite	eq
 80a1e8c:	4bda      	ldreq	r3, [pc, #872]	; (80a21f8 <__ieee754_pow+0x908>)
 80a1e8e:	4bdb      	ldrne	r3, [pc, #876]	; (80a21fc <__ieee754_pow+0x90c>)
 80a1e90:	e9cd 6700 	strd	r6, r7, [sp]
 80a1e94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a1e98:	2300      	movs	r3, #0
 80a1e9a:	9300      	str	r3, [sp, #0]
 80a1e9c:	e9dd 8900 	ldrd	r8, r9, [sp]
 80a1ea0:	4630      	mov	r0, r6
 80a1ea2:	4642      	mov	r2, r8
 80a1ea4:	4639      	mov	r1, r7
 80a1ea6:	464b      	mov	r3, r9
 80a1ea8:	f000 fca0 	bl	80a27ec <__aeabi_dsub>
 80a1eac:	4622      	mov	r2, r4
 80a1eae:	462b      	mov	r3, r5
 80a1eb0:	f000 fe54 	bl	80a2b5c <__aeabi_dmul>
 80a1eb4:	4632      	mov	r2, r6
 80a1eb6:	463b      	mov	r3, r7
 80a1eb8:	4606      	mov	r6, r0
 80a1eba:	460f      	mov	r7, r1
 80a1ebc:	4650      	mov	r0, sl
 80a1ebe:	4659      	mov	r1, fp
 80a1ec0:	f000 fe4c 	bl	80a2b5c <__aeabi_dmul>
 80a1ec4:	4602      	mov	r2, r0
 80a1ec6:	460b      	mov	r3, r1
 80a1ec8:	4630      	mov	r0, r6
 80a1eca:	4639      	mov	r1, r7
 80a1ecc:	f000 fc90 	bl	80a27f0 <__adddf3>
 80a1ed0:	4642      	mov	r2, r8
 80a1ed2:	4682      	mov	sl, r0
 80a1ed4:	468b      	mov	fp, r1
 80a1ed6:	464b      	mov	r3, r9
 80a1ed8:	4620      	mov	r0, r4
 80a1eda:	4629      	mov	r1, r5
 80a1edc:	f000 fe3e 	bl	80a2b5c <__aeabi_dmul>
 80a1ee0:	4606      	mov	r6, r0
 80a1ee2:	460f      	mov	r7, r1
 80a1ee4:	4650      	mov	r0, sl
 80a1ee6:	463b      	mov	r3, r7
 80a1ee8:	4659      	mov	r1, fp
 80a1eea:	4632      	mov	r2, r6
 80a1eec:	f000 fc80 	bl	80a27f0 <__adddf3>
 80a1ef0:	4bc3      	ldr	r3, [pc, #780]	; (80a2200 <__ieee754_pow+0x910>)
 80a1ef2:	4604      	mov	r4, r0
 80a1ef4:	4299      	cmp	r1, r3
 80a1ef6:	460d      	mov	r5, r1
 80a1ef8:	4688      	mov	r8, r1
 80a1efa:	f340 8114 	ble.w	80a2126 <__ieee754_pow+0x836>
 80a1efe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a1f02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a1f06:	4303      	orrs	r3, r0
 80a1f08:	f040 8212 	bne.w	80a2330 <__ieee754_pow+0xa40>
 80a1f0c:	a3a6      	add	r3, pc, #664	; (adr r3, 80a21a8 <__ieee754_pow+0x8b8>)
 80a1f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1f12:	4650      	mov	r0, sl
 80a1f14:	4659      	mov	r1, fp
 80a1f16:	f000 fc6b 	bl	80a27f0 <__adddf3>
 80a1f1a:	4632      	mov	r2, r6
 80a1f1c:	e9cd 0100 	strd	r0, r1, [sp]
 80a1f20:	463b      	mov	r3, r7
 80a1f22:	4620      	mov	r0, r4
 80a1f24:	4629      	mov	r1, r5
 80a1f26:	f000 fc61 	bl	80a27ec <__aeabi_dsub>
 80a1f2a:	4602      	mov	r2, r0
 80a1f2c:	460b      	mov	r3, r1
 80a1f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a1f32:	f001 f8a3 	bl	80a307c <__aeabi_dcmpgt>
 80a1f36:	2800      	cmp	r0, #0
 80a1f38:	f040 81fa 	bne.w	80a2330 <__ieee754_pow+0xa40>
 80a1f3c:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80a1f40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a1f44:	2000      	movs	r0, #0
 80a1f46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a1f4a:	fa42 f303 	asr.w	r3, r2, r3
 80a1f4e:	4443      	add	r3, r8
 80a1f50:	4cac      	ldr	r4, [pc, #688]	; (80a2204 <__ieee754_pow+0x914>)
 80a1f52:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a1f56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a1f5a:	fa44 fc02 	asr.w	ip, r4, r2
 80a1f5e:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a1f62:	ea23 010c 	bic.w	r1, r3, ip
 80a1f66:	f1c2 0414 	rsb	r4, r2, #20
 80a1f6a:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80a1f6e:	f1b8 0f00 	cmp.w	r8, #0
 80a1f72:	460b      	mov	r3, r1
 80a1f74:	fa45 f104 	asr.w	r1, r5, r4
 80a1f78:	910c      	str	r1, [sp, #48]	; 0x30
 80a1f7a:	bfb8      	it	lt
 80a1f7c:	4249      	neglt	r1, r1
 80a1f7e:	4602      	mov	r2, r0
 80a1f80:	bfb8      	it	lt
 80a1f82:	910c      	strlt	r1, [sp, #48]	; 0x30
 80a1f84:	4630      	mov	r0, r6
 80a1f86:	4639      	mov	r1, r7
 80a1f88:	f000 fc30 	bl	80a27ec <__aeabi_dsub>
 80a1f8c:	4606      	mov	r6, r0
 80a1f8e:	460f      	mov	r7, r1
 80a1f90:	4650      	mov	r0, sl
 80a1f92:	463b      	mov	r3, r7
 80a1f94:	4659      	mov	r1, fp
 80a1f96:	4632      	mov	r2, r6
 80a1f98:	f000 fc2a 	bl	80a27f0 <__adddf3>
 80a1f9c:	460d      	mov	r5, r1
 80a1f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a1fa0:	051b      	lsls	r3, r3, #20
 80a1fa2:	9300      	str	r3, [sp, #0]
 80a1fa4:	2400      	movs	r4, #0
 80a1fa6:	a382      	add	r3, pc, #520	; (adr r3, 80a21b0 <__ieee754_pow+0x8c0>)
 80a1fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1fac:	4620      	mov	r0, r4
 80a1fae:	4629      	mov	r1, r5
 80a1fb0:	f000 fdd4 	bl	80a2b5c <__aeabi_dmul>
 80a1fb4:	4632      	mov	r2, r6
 80a1fb6:	4680      	mov	r8, r0
 80a1fb8:	4689      	mov	r9, r1
 80a1fba:	463b      	mov	r3, r7
 80a1fbc:	4620      	mov	r0, r4
 80a1fbe:	4629      	mov	r1, r5
 80a1fc0:	f000 fc14 	bl	80a27ec <__aeabi_dsub>
 80a1fc4:	4602      	mov	r2, r0
 80a1fc6:	460b      	mov	r3, r1
 80a1fc8:	4650      	mov	r0, sl
 80a1fca:	4659      	mov	r1, fp
 80a1fcc:	f000 fc0e 	bl	80a27ec <__aeabi_dsub>
 80a1fd0:	a379      	add	r3, pc, #484	; (adr r3, 80a21b8 <__ieee754_pow+0x8c8>)
 80a1fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1fd6:	f000 fdc1 	bl	80a2b5c <__aeabi_dmul>
 80a1fda:	a379      	add	r3, pc, #484	; (adr r3, 80a21c0 <__ieee754_pow+0x8d0>)
 80a1fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1fe0:	4606      	mov	r6, r0
 80a1fe2:	460f      	mov	r7, r1
 80a1fe4:	4620      	mov	r0, r4
 80a1fe6:	4629      	mov	r1, r5
 80a1fe8:	f000 fdb8 	bl	80a2b5c <__aeabi_dmul>
 80a1fec:	4602      	mov	r2, r0
 80a1fee:	460b      	mov	r3, r1
 80a1ff0:	4630      	mov	r0, r6
 80a1ff2:	4639      	mov	r1, r7
 80a1ff4:	f000 fbfc 	bl	80a27f0 <__adddf3>
 80a1ff8:	4606      	mov	r6, r0
 80a1ffa:	460f      	mov	r7, r1
 80a1ffc:	4632      	mov	r2, r6
 80a1ffe:	463b      	mov	r3, r7
 80a2000:	4640      	mov	r0, r8
 80a2002:	4649      	mov	r1, r9
 80a2004:	f000 fbf4 	bl	80a27f0 <__adddf3>
 80a2008:	4642      	mov	r2, r8
 80a200a:	464b      	mov	r3, r9
 80a200c:	460d      	mov	r5, r1
 80a200e:	4604      	mov	r4, r0
 80a2010:	f000 fbec 	bl	80a27ec <__aeabi_dsub>
 80a2014:	4602      	mov	r2, r0
 80a2016:	460b      	mov	r3, r1
 80a2018:	4630      	mov	r0, r6
 80a201a:	4639      	mov	r1, r7
 80a201c:	f000 fbe6 	bl	80a27ec <__aeabi_dsub>
 80a2020:	462b      	mov	r3, r5
 80a2022:	4682      	mov	sl, r0
 80a2024:	468b      	mov	fp, r1
 80a2026:	4622      	mov	r2, r4
 80a2028:	4629      	mov	r1, r5
 80a202a:	4620      	mov	r0, r4
 80a202c:	f000 fd96 	bl	80a2b5c <__aeabi_dmul>
 80a2030:	a365      	add	r3, pc, #404	; (adr r3, 80a21c8 <__ieee754_pow+0x8d8>)
 80a2032:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2036:	4606      	mov	r6, r0
 80a2038:	460f      	mov	r7, r1
 80a203a:	f000 fd8f 	bl	80a2b5c <__aeabi_dmul>
 80a203e:	a364      	add	r3, pc, #400	; (adr r3, 80a21d0 <__ieee754_pow+0x8e0>)
 80a2040:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2044:	f000 fbd2 	bl	80a27ec <__aeabi_dsub>
 80a2048:	4632      	mov	r2, r6
 80a204a:	463b      	mov	r3, r7
 80a204c:	f000 fd86 	bl	80a2b5c <__aeabi_dmul>
 80a2050:	a361      	add	r3, pc, #388	; (adr r3, 80a21d8 <__ieee754_pow+0x8e8>)
 80a2052:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2056:	f000 fbcb 	bl	80a27f0 <__adddf3>
 80a205a:	4632      	mov	r2, r6
 80a205c:	463b      	mov	r3, r7
 80a205e:	f000 fd7d 	bl	80a2b5c <__aeabi_dmul>
 80a2062:	a35f      	add	r3, pc, #380	; (adr r3, 80a21e0 <__ieee754_pow+0x8f0>)
 80a2064:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2068:	f000 fbc0 	bl	80a27ec <__aeabi_dsub>
 80a206c:	4632      	mov	r2, r6
 80a206e:	463b      	mov	r3, r7
 80a2070:	f000 fd74 	bl	80a2b5c <__aeabi_dmul>
 80a2074:	a35c      	add	r3, pc, #368	; (adr r3, 80a21e8 <__ieee754_pow+0x8f8>)
 80a2076:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a207a:	f000 fbb9 	bl	80a27f0 <__adddf3>
 80a207e:	4632      	mov	r2, r6
 80a2080:	463b      	mov	r3, r7
 80a2082:	f000 fd6b 	bl	80a2b5c <__aeabi_dmul>
 80a2086:	4602      	mov	r2, r0
 80a2088:	460b      	mov	r3, r1
 80a208a:	4620      	mov	r0, r4
 80a208c:	4629      	mov	r1, r5
 80a208e:	f000 fbad 	bl	80a27ec <__aeabi_dsub>
 80a2092:	4606      	mov	r6, r0
 80a2094:	460f      	mov	r7, r1
 80a2096:	4632      	mov	r2, r6
 80a2098:	463b      	mov	r3, r7
 80a209a:	4629      	mov	r1, r5
 80a209c:	4620      	mov	r0, r4
 80a209e:	f000 fd5d 	bl	80a2b5c <__aeabi_dmul>
 80a20a2:	2200      	movs	r2, #0
 80a20a4:	4680      	mov	r8, r0
 80a20a6:	4689      	mov	r9, r1
 80a20a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a20ac:	4630      	mov	r0, r6
 80a20ae:	4639      	mov	r1, r7
 80a20b0:	f000 fb9c 	bl	80a27ec <__aeabi_dsub>
 80a20b4:	4602      	mov	r2, r0
 80a20b6:	460b      	mov	r3, r1
 80a20b8:	4640      	mov	r0, r8
 80a20ba:	4649      	mov	r1, r9
 80a20bc:	f000 fe78 	bl	80a2db0 <__aeabi_ddiv>
 80a20c0:	4652      	mov	r2, sl
 80a20c2:	4606      	mov	r6, r0
 80a20c4:	460f      	mov	r7, r1
 80a20c6:	465b      	mov	r3, fp
 80a20c8:	4629      	mov	r1, r5
 80a20ca:	4620      	mov	r0, r4
 80a20cc:	f000 fd46 	bl	80a2b5c <__aeabi_dmul>
 80a20d0:	4652      	mov	r2, sl
 80a20d2:	465b      	mov	r3, fp
 80a20d4:	f000 fb8c 	bl	80a27f0 <__adddf3>
 80a20d8:	4602      	mov	r2, r0
 80a20da:	460b      	mov	r3, r1
 80a20dc:	4630      	mov	r0, r6
 80a20de:	4639      	mov	r1, r7
 80a20e0:	f000 fb84 	bl	80a27ec <__aeabi_dsub>
 80a20e4:	462b      	mov	r3, r5
 80a20e6:	4622      	mov	r2, r4
 80a20e8:	f000 fb80 	bl	80a27ec <__aeabi_dsub>
 80a20ec:	4602      	mov	r2, r0
 80a20ee:	460b      	mov	r3, r1
 80a20f0:	2000      	movs	r0, #0
 80a20f2:	4942      	ldr	r1, [pc, #264]	; (80a21fc <__ieee754_pow+0x90c>)
 80a20f4:	f000 fb7a 	bl	80a27ec <__aeabi_dsub>
 80a20f8:	9d00      	ldr	r5, [sp, #0]
 80a20fa:	440d      	add	r5, r1
 80a20fc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80a2100:	f2c0 8153 	blt.w	80a23aa <__ieee754_pow+0xaba>
 80a2104:	4629      	mov	r1, r5
 80a2106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a210a:	f000 fd27 	bl	80a2b5c <__aeabi_dmul>
 80a210e:	e9cd 0100 	strd	r0, r1, [sp]
 80a2112:	e433      	b.n	80a197c <__ieee754_pow+0x8c>
 80a2114:	f1b8 0f00 	cmp.w	r8, #0
 80a2118:	f6ff aca2 	blt.w	80a1a60 <__ieee754_pow+0x170>
 80a211c:	2300      	movs	r3, #0
 80a211e:	2400      	movs	r4, #0
 80a2120:	e9cd 3400 	strd	r3, r4, [sp]
 80a2124:	e42a      	b.n	80a197c <__ieee754_pow+0x8c>
 80a2126:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80a220c <__ieee754_pow+0x91c>
 80a212a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a212e:	4563      	cmp	r3, ip
 80a2130:	f340 80f6 	ble.w	80a2320 <__ieee754_pow+0xa30>
 80a2134:	4b34      	ldr	r3, [pc, #208]	; (80a2208 <__ieee754_pow+0x918>)
 80a2136:	440b      	add	r3, r1
 80a2138:	4303      	orrs	r3, r0
 80a213a:	d10a      	bne.n	80a2152 <__ieee754_pow+0x862>
 80a213c:	4632      	mov	r2, r6
 80a213e:	463b      	mov	r3, r7
 80a2140:	f000 fb54 	bl	80a27ec <__aeabi_dsub>
 80a2144:	4652      	mov	r2, sl
 80a2146:	465b      	mov	r3, fp
 80a2148:	f000 ff8e 	bl	80a3068 <__aeabi_dcmpge>
 80a214c:	2800      	cmp	r0, #0
 80a214e:	f43f aef5 	beq.w	80a1f3c <__ieee754_pow+0x64c>
 80a2152:	a327      	add	r3, pc, #156	; (adr r3, 80a21f0 <__ieee754_pow+0x900>)
 80a2154:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a215c:	f000 fcfe 	bl	80a2b5c <__aeabi_dmul>
 80a2160:	a323      	add	r3, pc, #140	; (adr r3, 80a21f0 <__ieee754_pow+0x900>)
 80a2162:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2166:	f000 fcf9 	bl	80a2b5c <__aeabi_dmul>
 80a216a:	e9cd 0100 	strd	r0, r1, [sp]
 80a216e:	e405      	b.n	80a197c <__ieee754_pow+0x8c>
 80a2170:	f1b8 0f00 	cmp.w	r8, #0
 80a2174:	dad2      	bge.n	80a211c <__ieee754_pow+0x82c>
 80a2176:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80a217a:	9600      	str	r6, [sp, #0]
 80a217c:	9301      	str	r3, [sp, #4]
 80a217e:	f7ff bbfd 	b.w	80a197c <__ieee754_pow+0x8c>
 80a2182:	2300      	movs	r3, #0
 80a2184:	2400      	movs	r4, #0
 80a2186:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a218a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a218e:	2300      	movs	r3, #0
 80a2190:	4c1a      	ldr	r4, [pc, #104]	; (80a21fc <__ieee754_pow+0x90c>)
 80a2192:	f04f 0a00 	mov.w	sl, #0
 80a2196:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a219a:	e4d8      	b.n	80a1b4e <__ieee754_pow+0x25e>
 80a219c:	f04f 0c00 	mov.w	ip, #0
 80a21a0:	e4b1      	b.n	80a1b06 <__ieee754_pow+0x216>
 80a21a2:	bf00      	nop
 80a21a4:	f3af 8000 	nop.w
 80a21a8:	652b82fe 	.word	0x652b82fe
 80a21ac:	3c971547 	.word	0x3c971547
 80a21b0:	00000000 	.word	0x00000000
 80a21b4:	3fe62e43 	.word	0x3fe62e43
 80a21b8:	fefa39ef 	.word	0xfefa39ef
 80a21bc:	3fe62e42 	.word	0x3fe62e42
 80a21c0:	0ca86c39 	.word	0x0ca86c39
 80a21c4:	be205c61 	.word	0xbe205c61
 80a21c8:	72bea4d0 	.word	0x72bea4d0
 80a21cc:	3e663769 	.word	0x3e663769
 80a21d0:	c5d26bf1 	.word	0xc5d26bf1
 80a21d4:	3ebbbd41 	.word	0x3ebbbd41
 80a21d8:	af25de2c 	.word	0xaf25de2c
 80a21dc:	3f11566a 	.word	0x3f11566a
 80a21e0:	16bebd93 	.word	0x16bebd93
 80a21e4:	3f66c16c 	.word	0x3f66c16c
 80a21e8:	5555553e 	.word	0x5555553e
 80a21ec:	3fc55555 	.word	0x3fc55555
 80a21f0:	c2f8f359 	.word	0xc2f8f359
 80a21f4:	01a56e1f 	.word	0x01a56e1f
 80a21f8:	bff00000 	.word	0xbff00000
 80a21fc:	3ff00000 	.word	0x3ff00000
 80a2200:	408fffff 	.word	0x408fffff
 80a2204:	000fffff 	.word	0x000fffff
 80a2208:	3f6f3400 	.word	0x3f6f3400
 80a220c:	4090cbff 	.word	0x4090cbff
 80a2210:	429c      	cmp	r4, r3
 80a2212:	f6ff af7f 	blt.w	80a2114 <__ieee754_pow+0x824>
 80a2216:	4b7e      	ldr	r3, [pc, #504]	; (80a2410 <__ieee754_pow+0xb20>)
 80a2218:	429c      	cmp	r4, r3
 80a221a:	f73f ac1d 	bgt.w	80a1a58 <__ieee754_pow+0x168>
 80a221e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a2222:	2200      	movs	r2, #0
 80a2224:	4b7a      	ldr	r3, [pc, #488]	; (80a2410 <__ieee754_pow+0xb20>)
 80a2226:	f000 fae1 	bl	80a27ec <__aeabi_dsub>
 80a222a:	a36b      	add	r3, pc, #428	; (adr r3, 80a23d8 <__ieee754_pow+0xae8>)
 80a222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2230:	4604      	mov	r4, r0
 80a2232:	460d      	mov	r5, r1
 80a2234:	f000 fc92 	bl	80a2b5c <__aeabi_dmul>
 80a2238:	a369      	add	r3, pc, #420	; (adr r3, 80a23e0 <__ieee754_pow+0xaf0>)
 80a223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a223e:	4682      	mov	sl, r0
 80a2240:	468b      	mov	fp, r1
 80a2242:	4620      	mov	r0, r4
 80a2244:	4629      	mov	r1, r5
 80a2246:	f000 fc89 	bl	80a2b5c <__aeabi_dmul>
 80a224a:	2200      	movs	r2, #0
 80a224c:	4680      	mov	r8, r0
 80a224e:	4689      	mov	r9, r1
 80a2250:	4620      	mov	r0, r4
 80a2252:	4629      	mov	r1, r5
 80a2254:	4b6f      	ldr	r3, [pc, #444]	; (80a2414 <__ieee754_pow+0xb24>)
 80a2256:	f000 fc81 	bl	80a2b5c <__aeabi_dmul>
 80a225a:	4602      	mov	r2, r0
 80a225c:	460b      	mov	r3, r1
 80a225e:	a162      	add	r1, pc, #392	; (adr r1, 80a23e8 <__ieee754_pow+0xaf8>)
 80a2260:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2264:	f000 fac2 	bl	80a27ec <__aeabi_dsub>
 80a2268:	4622      	mov	r2, r4
 80a226a:	462b      	mov	r3, r5
 80a226c:	f000 fc76 	bl	80a2b5c <__aeabi_dmul>
 80a2270:	4602      	mov	r2, r0
 80a2272:	460b      	mov	r3, r1
 80a2274:	2000      	movs	r0, #0
 80a2276:	4968      	ldr	r1, [pc, #416]	; (80a2418 <__ieee754_pow+0xb28>)
 80a2278:	f000 fab8 	bl	80a27ec <__aeabi_dsub>
 80a227c:	4622      	mov	r2, r4
 80a227e:	462b      	mov	r3, r5
 80a2280:	4604      	mov	r4, r0
 80a2282:	460d      	mov	r5, r1
 80a2284:	4610      	mov	r0, r2
 80a2286:	4619      	mov	r1, r3
 80a2288:	f000 fc68 	bl	80a2b5c <__aeabi_dmul>
 80a228c:	4602      	mov	r2, r0
 80a228e:	460b      	mov	r3, r1
 80a2290:	4620      	mov	r0, r4
 80a2292:	4629      	mov	r1, r5
 80a2294:	f000 fc62 	bl	80a2b5c <__aeabi_dmul>
 80a2298:	a355      	add	r3, pc, #340	; (adr r3, 80a23f0 <__ieee754_pow+0xb00>)
 80a229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a229e:	f000 fc5d 	bl	80a2b5c <__aeabi_dmul>
 80a22a2:	4602      	mov	r2, r0
 80a22a4:	460b      	mov	r3, r1
 80a22a6:	4640      	mov	r0, r8
 80a22a8:	4649      	mov	r1, r9
 80a22aa:	f000 fa9f 	bl	80a27ec <__aeabi_dsub>
 80a22ae:	4680      	mov	r8, r0
 80a22b0:	4689      	mov	r9, r1
 80a22b2:	4650      	mov	r0, sl
 80a22b4:	4659      	mov	r1, fp
 80a22b6:	4642      	mov	r2, r8
 80a22b8:	464b      	mov	r3, r9
 80a22ba:	2400      	movs	r4, #0
 80a22bc:	f000 fa98 	bl	80a27f0 <__adddf3>
 80a22c0:	4652      	mov	r2, sl
 80a22c2:	465b      	mov	r3, fp
 80a22c4:	4620      	mov	r0, r4
 80a22c6:	460d      	mov	r5, r1
 80a22c8:	f000 fa90 	bl	80a27ec <__aeabi_dsub>
 80a22cc:	4602      	mov	r2, r0
 80a22ce:	460b      	mov	r3, r1
 80a22d0:	4640      	mov	r0, r8
 80a22d2:	4649      	mov	r1, r9
 80a22d4:	f000 fa8a 	bl	80a27ec <__aeabi_dsub>
 80a22d8:	4682      	mov	sl, r0
 80a22da:	468b      	mov	fp, r1
 80a22dc:	e5cf      	b.n	80a1e7e <__ieee754_pow+0x58e>
 80a22de:	4652      	mov	r2, sl
 80a22e0:	465b      	mov	r3, fp
 80a22e2:	2000      	movs	r0, #0
 80a22e4:	494a      	ldr	r1, [pc, #296]	; (80a2410 <__ieee754_pow+0xb20>)
 80a22e6:	f000 fd63 	bl	80a2db0 <__aeabi_ddiv>
 80a22ea:	e9cd 0100 	strd	r0, r1, [sp]
 80a22ee:	f7ff bb45 	b.w	80a197c <__ieee754_pow+0x8c>
 80a22f2:	4652      	mov	r2, sl
 80a22f4:	4650      	mov	r0, sl
 80a22f6:	465b      	mov	r3, fp
 80a22f8:	4659      	mov	r1, fp
 80a22fa:	f000 fc2f 	bl	80a2b5c <__aeabi_dmul>
 80a22fe:	e9cd 0100 	strd	r0, r1, [sp]
 80a2302:	f7ff bb3b 	b.w	80a197c <__ieee754_pow+0x8c>
 80a2306:	2a00      	cmp	r2, #0
 80a2308:	d141      	bne.n	80a238e <__ieee754_pow+0xa9e>
 80a230a:	f1c1 0114 	rsb	r1, r1, #20
 80a230e:	fa45 f001 	asr.w	r0, r5, r1
 80a2312:	fa00 f101 	lsl.w	r1, r0, r1
 80a2316:	42a9      	cmp	r1, r5
 80a2318:	d055      	beq.n	80a23c6 <__ieee754_pow+0xad6>
 80a231a:	9202      	str	r2, [sp, #8]
 80a231c:	f7ff bb0d 	b.w	80a193a <__ieee754_pow+0x4a>
 80a2320:	4a3d      	ldr	r2, [pc, #244]	; (80a2418 <__ieee754_pow+0xb28>)
 80a2322:	4293      	cmp	r3, r2
 80a2324:	dc56      	bgt.n	80a23d4 <__ieee754_pow+0xae4>
 80a2326:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a232a:	9100      	str	r1, [sp, #0]
 80a232c:	910c      	str	r1, [sp, #48]	; 0x30
 80a232e:	e639      	b.n	80a1fa4 <__ieee754_pow+0x6b4>
 80a2330:	a331      	add	r3, pc, #196	; (adr r3, 80a23f8 <__ieee754_pow+0xb08>)
 80a2332:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a233a:	f000 fc0f 	bl	80a2b5c <__aeabi_dmul>
 80a233e:	a32e      	add	r3, pc, #184	; (adr r3, 80a23f8 <__ieee754_pow+0xb08>)
 80a2340:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2344:	f000 fc0a 	bl	80a2b5c <__aeabi_dmul>
 80a2348:	e9cd 0100 	strd	r0, r1, [sp]
 80a234c:	f7ff bb16 	b.w	80a197c <__ieee754_pow+0x8c>
 80a2350:	9b02      	ldr	r3, [sp, #8]
 80a2352:	2b01      	cmp	r3, #1
 80a2354:	f47f ab12 	bne.w	80a197c <__ieee754_pow+0x8c>
 80a2358:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a235c:	4622      	mov	r2, r4
 80a235e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a2362:	e9cd 2300 	strd	r2, r3, [sp]
 80a2366:	f7ff bb09 	b.w	80a197c <__ieee754_pow+0x8c>
 80a236a:	a425      	add	r4, pc, #148	; (adr r4, 80a2400 <__ieee754_pow+0xb10>)
 80a236c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a2370:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a2374:	a424      	add	r4, pc, #144	; (adr r4, 80a2408 <__ieee754_pow+0xb18>)
 80a2376:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a237a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a237e:	2300      	movs	r3, #0
 80a2380:	4c26      	ldr	r4, [pc, #152]	; (80a241c <__ieee754_pow+0xb2c>)
 80a2382:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
 80a2386:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a238a:	f7ff bbe0 	b.w	80a1b4e <__ieee754_pow+0x25e>
 80a238e:	4650      	mov	r0, sl
 80a2390:	4659      	mov	r1, fp
 80a2392:	9302      	str	r3, [sp, #8]
 80a2394:	f000 f908 	bl	80a25a8 <fabs>
 80a2398:	9b02      	ldr	r3, [sp, #8]
 80a239a:	e9cd 0100 	strd	r0, r1, [sp]
 80a239e:	2b00      	cmp	r3, #0
 80a23a0:	f47f ab86 	bne.w	80a1ab0 <__ieee754_pow+0x1c0>
 80a23a4:	9302      	str	r3, [sp, #8]
 80a23a6:	f7ff bb1b 	b.w	80a19e0 <__ieee754_pow+0xf0>
 80a23aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a23ac:	f000 f9a0 	bl	80a26f0 <scalbn>
 80a23b0:	e6a9      	b.n	80a2106 <__ieee754_pow+0x816>
 80a23b2:	f000 0001 	and.w	r0, r0, #1
 80a23b6:	f1c0 0102 	rsb	r1, r0, #2
 80a23ba:	9102      	str	r1, [sp, #8]
 80a23bc:	2a00      	cmp	r2, #0
 80a23be:	f43f aabc 	beq.w	80a193a <__ieee754_pow+0x4a>
 80a23c2:	f7ff bb04 	b.w	80a19ce <__ieee754_pow+0xde>
 80a23c6:	f000 0001 	and.w	r0, r0, #1
 80a23ca:	f1c0 0202 	rsb	r2, r0, #2
 80a23ce:	9202      	str	r2, [sp, #8]
 80a23d0:	f7ff bab3 	b.w	80a193a <__ieee754_pow+0x4a>
 80a23d4:	151b      	asrs	r3, r3, #20
 80a23d6:	e5b3      	b.n	80a1f40 <__ieee754_pow+0x650>
 80a23d8:	60000000 	.word	0x60000000
 80a23dc:	3ff71547 	.word	0x3ff71547
 80a23e0:	f85ddf44 	.word	0xf85ddf44
 80a23e4:	3e54ae0b 	.word	0x3e54ae0b
 80a23e8:	55555555 	.word	0x55555555
 80a23ec:	3fd55555 	.word	0x3fd55555
 80a23f0:	652b82fe 	.word	0x652b82fe
 80a23f4:	3ff71547 	.word	0x3ff71547
 80a23f8:	8800759c 	.word	0x8800759c
 80a23fc:	7e37e43c 	.word	0x7e37e43c
 80a2400:	40000000 	.word	0x40000000
 80a2404:	3fe2b803 	.word	0x3fe2b803
 80a2408:	43cfd006 	.word	0x43cfd006
 80a240c:	3e4cfdeb 	.word	0x3e4cfdeb
 80a2410:	3ff00000 	.word	0x3ff00000
 80a2414:	3fd00000 	.word	0x3fd00000
 80a2418:	3fe00000 	.word	0x3fe00000
 80a241c:	3ff80000 	.word	0x3ff80000

080a2420 <__ieee754_sqrt>:
 80a2420:	4a60      	ldr	r2, [pc, #384]	; (80a25a4 <__ieee754_sqrt+0x184>)
 80a2422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2426:	438a      	bics	r2, r1
 80a2428:	460e      	mov	r6, r1
 80a242a:	4605      	mov	r5, r0
 80a242c:	f000 8097 	beq.w	80a255e <__ieee754_sqrt+0x13e>
 80a2430:	2900      	cmp	r1, #0
 80a2432:	460b      	mov	r3, r1
 80a2434:	4604      	mov	r4, r0
 80a2436:	dd4e      	ble.n	80a24d6 <__ieee754_sqrt+0xb6>
 80a2438:	1509      	asrs	r1, r1, #20
 80a243a:	d05a      	beq.n	80a24f2 <__ieee754_sqrt+0xd2>
 80a243c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a2440:	07ca      	lsls	r2, r1, #31
 80a2442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2446:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 80a244a:	d403      	bmi.n	80a2454 <__ieee754_sqrt+0x34>
 80a244c:	005b      	lsls	r3, r3, #1
 80a244e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a2452:	0064      	lsls	r4, r4, #1
 80a2454:	f04f 0c00 	mov.w	ip, #0
 80a2458:	2516      	movs	r5, #22
 80a245a:	4666      	mov	r6, ip
 80a245c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a2460:	0fe1      	lsrs	r1, r4, #31
 80a2462:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a2466:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a246a:	0064      	lsls	r4, r4, #1
 80a246c:	18b1      	adds	r1, r6, r2
 80a246e:	4299      	cmp	r1, r3
 80a2470:	dc02      	bgt.n	80a2478 <__ieee754_sqrt+0x58>
 80a2472:	1a5b      	subs	r3, r3, r1
 80a2474:	188e      	adds	r6, r1, r2
 80a2476:	4494      	add	ip, r2
 80a2478:	005b      	lsls	r3, r3, #1
 80a247a:	3d01      	subs	r5, #1
 80a247c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a2480:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a2484:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a2488:	d1f0      	bne.n	80a246c <__ieee754_sqrt+0x4c>
 80a248a:	462f      	mov	r7, r5
 80a248c:	2020      	movs	r0, #32
 80a248e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a2492:	e009      	b.n	80a24a8 <__ieee754_sqrt+0x88>
 80a2494:	d03d      	beq.n	80a2512 <__ieee754_sqrt+0xf2>
 80a2496:	0fe1      	lsrs	r1, r4, #31
 80a2498:	3801      	subs	r0, #1
 80a249a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a249e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a24a2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a24a6:	d03d      	beq.n	80a2524 <__ieee754_sqrt+0x104>
 80a24a8:	42b3      	cmp	r3, r6
 80a24aa:	eb02 0105 	add.w	r1, r2, r5
 80a24ae:	ddf1      	ble.n	80a2494 <__ieee754_sqrt+0x74>
 80a24b0:	2900      	cmp	r1, #0
 80a24b2:	eb01 0502 	add.w	r5, r1, r2
 80a24b6:	db09      	blt.n	80a24cc <__ieee754_sqrt+0xac>
 80a24b8:	46b0      	mov	r8, r6
 80a24ba:	1b9b      	subs	r3, r3, r6
 80a24bc:	42a1      	cmp	r1, r4
 80a24be:	bf88      	it	hi
 80a24c0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80a24c4:	4646      	mov	r6, r8
 80a24c6:	1a64      	subs	r4, r4, r1
 80a24c8:	4417      	add	r7, r2
 80a24ca:	e7e4      	b.n	80a2496 <__ieee754_sqrt+0x76>
 80a24cc:	2d00      	cmp	r5, #0
 80a24ce:	dbf3      	blt.n	80a24b8 <__ieee754_sqrt+0x98>
 80a24d0:	f106 0801 	add.w	r8, r6, #1
 80a24d4:	e7f1      	b.n	80a24ba <__ieee754_sqrt+0x9a>
 80a24d6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a24da:	4302      	orrs	r2, r0
 80a24dc:	d057      	beq.n	80a258e <__ieee754_sqrt+0x16e>
 80a24de:	2900      	cmp	r1, #0
 80a24e0:	d14b      	bne.n	80a257a <__ieee754_sqrt+0x15a>
 80a24e2:	0ae2      	lsrs	r2, r4, #11
 80a24e4:	4613      	mov	r3, r2
 80a24e6:	3915      	subs	r1, #21
 80a24e8:	0564      	lsls	r4, r4, #21
 80a24ea:	2a00      	cmp	r2, #0
 80a24ec:	d0f9      	beq.n	80a24e2 <__ieee754_sqrt+0xc2>
 80a24ee:	02d7      	lsls	r7, r2, #11
 80a24f0:	d452      	bmi.n	80a2598 <__ieee754_sqrt+0x178>
 80a24f2:	2000      	movs	r0, #0
 80a24f4:	005b      	lsls	r3, r3, #1
 80a24f6:	02de      	lsls	r6, r3, #11
 80a24f8:	4605      	mov	r5, r0
 80a24fa:	f100 0001 	add.w	r0, r0, #1
 80a24fe:	d5f9      	bpl.n	80a24f4 <__ieee754_sqrt+0xd4>
 80a2500:	461a      	mov	r2, r3
 80a2502:	4623      	mov	r3, r4
 80a2504:	4084      	lsls	r4, r0
 80a2506:	f1c0 0020 	rsb	r0, r0, #32
 80a250a:	40c3      	lsrs	r3, r0
 80a250c:	4313      	orrs	r3, r2
 80a250e:	1b49      	subs	r1, r1, r5
 80a2510:	e794      	b.n	80a243c <__ieee754_sqrt+0x1c>
 80a2512:	42a1      	cmp	r1, r4
 80a2514:	d8bf      	bhi.n	80a2496 <__ieee754_sqrt+0x76>
 80a2516:	2900      	cmp	r1, #0
 80a2518:	eb01 0502 	add.w	r5, r1, r2
 80a251c:	dbd6      	blt.n	80a24cc <__ieee754_sqrt+0xac>
 80a251e:	4698      	mov	r8, r3
 80a2520:	2300      	movs	r3, #0
 80a2522:	e7cf      	b.n	80a24c4 <__ieee754_sqrt+0xa4>
 80a2524:	4323      	orrs	r3, r4
 80a2526:	d113      	bne.n	80a2550 <__ieee754_sqrt+0x130>
 80a2528:	0878      	lsrs	r0, r7, #1
 80a252a:	ea4f 036c 	mov.w	r3, ip, asr #1
 80a252e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a2532:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a2536:	f01c 0f01 	tst.w	ip, #1
 80a253a:	bf18      	it	ne
 80a253c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 80a2540:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 80a2544:	4602      	mov	r2, r0
 80a2546:	462b      	mov	r3, r5
 80a2548:	4610      	mov	r0, r2
 80a254a:	4619      	mov	r1, r3
 80a254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2550:	1c7b      	adds	r3, r7, #1
 80a2552:	bf16      	itet	ne
 80a2554:	1c78      	addne	r0, r7, #1
 80a2556:	f10c 0c01 	addeq.w	ip, ip, #1
 80a255a:	0840      	lsrne	r0, r0, #1
 80a255c:	e7e5      	b.n	80a252a <__ieee754_sqrt+0x10a>
 80a255e:	4602      	mov	r2, r0
 80a2560:	460b      	mov	r3, r1
 80a2562:	f000 fafb 	bl	80a2b5c <__aeabi_dmul>
 80a2566:	462a      	mov	r2, r5
 80a2568:	4633      	mov	r3, r6
 80a256a:	f000 f941 	bl	80a27f0 <__adddf3>
 80a256e:	4602      	mov	r2, r0
 80a2570:	460b      	mov	r3, r1
 80a2572:	4610      	mov	r0, r2
 80a2574:	4619      	mov	r1, r3
 80a2576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a257a:	4602      	mov	r2, r0
 80a257c:	f000 f936 	bl	80a27ec <__aeabi_dsub>
 80a2580:	4602      	mov	r2, r0
 80a2582:	460b      	mov	r3, r1
 80a2584:	f000 fc14 	bl	80a2db0 <__aeabi_ddiv>
 80a2588:	4602      	mov	r2, r0
 80a258a:	460b      	mov	r3, r1
 80a258c:	e7dc      	b.n	80a2548 <__ieee754_sqrt+0x128>
 80a258e:	4602      	mov	r2, r0
 80a2590:	4619      	mov	r1, r3
 80a2592:	4610      	mov	r0, r2
 80a2594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2598:	4623      	mov	r3, r4
 80a259a:	2020      	movs	r0, #32
 80a259c:	f04f 35ff 	mov.w	r5, #4294967295
 80a25a0:	e7b3      	b.n	80a250a <__ieee754_sqrt+0xea>
 80a25a2:	bf00      	nop
 80a25a4:	7ff00000 	.word	0x7ff00000

080a25a8 <fabs>:
 80a25a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a25ac:	4770      	bx	lr
 80a25ae:	bf00      	nop

080a25b0 <finite>:
 80a25b0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80a25b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80a25b8:	0fc0      	lsrs	r0, r0, #31
 80a25ba:	4770      	bx	lr

080a25bc <matherr>:
 80a25bc:	2000      	movs	r0, #0
 80a25be:	4770      	bx	lr

080a25c0 <nan>:
 80a25c0:	2000      	movs	r0, #0
 80a25c2:	4901      	ldr	r1, [pc, #4]	; (80a25c8 <nan+0x8>)
 80a25c4:	4770      	bx	lr
 80a25c6:	bf00      	nop
 80a25c8:	7ff80000 	.word	0x7ff80000

080a25cc <rint>:
 80a25cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25ce:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80a25d2:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 80a25d6:	2e13      	cmp	r6, #19
 80a25d8:	4602      	mov	r2, r0
 80a25da:	460b      	mov	r3, r1
 80a25dc:	460d      	mov	r5, r1
 80a25de:	4607      	mov	r7, r0
 80a25e0:	b083      	sub	sp, #12
 80a25e2:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 80a25e6:	dc2f      	bgt.n	80a2648 <rint+0x7c>
 80a25e8:	2e00      	cmp	r6, #0
 80a25ea:	db4c      	blt.n	80a2686 <rint+0xba>
 80a25ec:	493d      	ldr	r1, [pc, #244]	; (80a26e4 <rint+0x118>)
 80a25ee:	4131      	asrs	r1, r6
 80a25f0:	ea03 0001 	and.w	r0, r3, r1
 80a25f4:	4310      	orrs	r0, r2
 80a25f6:	d02c      	beq.n	80a2652 <rint+0x86>
 80a25f8:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80a25fc:	ea52 0703 	orrs.w	r7, r2, r3
 80a2600:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a2604:	d00b      	beq.n	80a261e <rint+0x52>
 80a2606:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a260a:	2e13      	cmp	r6, #19
 80a260c:	bf0c      	ite	eq
 80a260e:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a2612:	2700      	movne	r7, #0
 80a2614:	ea25 0101 	bic.w	r1, r5, r1
 80a2618:	fa43 f506 	asr.w	r5, r3, r6
 80a261c:	430d      	orrs	r5, r1
 80a261e:	4932      	ldr	r1, [pc, #200]	; (80a26e8 <rint+0x11c>)
 80a2620:	462b      	mov	r3, r5
 80a2622:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80a2626:	e9d4 4500 	ldrd	r4, r5, [r4]
 80a262a:	463a      	mov	r2, r7
 80a262c:	4620      	mov	r0, r4
 80a262e:	4629      	mov	r1, r5
 80a2630:	f000 f8de 	bl	80a27f0 <__adddf3>
 80a2634:	e9cd 0100 	strd	r0, r1, [sp]
 80a2638:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a263c:	4622      	mov	r2, r4
 80a263e:	462b      	mov	r3, r5
 80a2640:	f000 f8d4 	bl	80a27ec <__aeabi_dsub>
 80a2644:	b003      	add	sp, #12
 80a2646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2648:	2e33      	cmp	r6, #51	; 0x33
 80a264a:	dd06      	ble.n	80a265a <rint+0x8e>
 80a264c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a2650:	d045      	beq.n	80a26de <rint+0x112>
 80a2652:	4610      	mov	r0, r2
 80a2654:	4619      	mov	r1, r3
 80a2656:	b003      	add	sp, #12
 80a2658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a265a:	f04f 31ff 	mov.w	r1, #4294967295
 80a265e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80a2662:	fa21 f10c 	lsr.w	r1, r1, ip
 80a2666:	4208      	tst	r0, r1
 80a2668:	d0f3      	beq.n	80a2652 <rint+0x86>
 80a266a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80a266e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80a2672:	d0d4      	beq.n	80a261e <rint+0x52>
 80a2674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a2678:	ea20 0703 	bic.w	r7, r0, r3
 80a267c:	fa42 fc0c 	asr.w	ip, r2, ip
 80a2680:	ea47 070c 	orr.w	r7, r7, ip
 80a2684:	e7cb      	b.n	80a261e <rint+0x52>
 80a2686:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a268a:	4301      	orrs	r1, r0
 80a268c:	4619      	mov	r1, r3
 80a268e:	d0e2      	beq.n	80a2656 <rint+0x8a>
 80a2690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a2694:	431f      	orrs	r7, r3
 80a2696:	427b      	negs	r3, r7
 80a2698:	433b      	orrs	r3, r7
 80a269a:	0c6d      	lsrs	r5, r5, #17
 80a269c:	0b1b      	lsrs	r3, r3, #12
 80a269e:	046d      	lsls	r5, r5, #17
 80a26a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80a26a4:	ea43 0105 	orr.w	r1, r3, r5
 80a26a8:	460b      	mov	r3, r1
 80a26aa:	490f      	ldr	r1, [pc, #60]	; (80a26e8 <rint+0x11c>)
 80a26ac:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80a26b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80a26b4:	4630      	mov	r0, r6
 80a26b6:	4639      	mov	r1, r7
 80a26b8:	f000 f89a 	bl	80a27f0 <__adddf3>
 80a26bc:	e9cd 0100 	strd	r0, r1, [sp]
 80a26c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a26c4:	4632      	mov	r2, r6
 80a26c6:	463b      	mov	r3, r7
 80a26c8:	f000 f890 	bl	80a27ec <__aeabi_dsub>
 80a26cc:	4602      	mov	r2, r0
 80a26ce:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a26d2:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 80a26d6:	4610      	mov	r0, r2
 80a26d8:	4619      	mov	r1, r3
 80a26da:	b003      	add	sp, #12
 80a26dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a26de:	f000 f887 	bl	80a27f0 <__adddf3>
 80a26e2:	e7b8      	b.n	80a2656 <rint+0x8a>
 80a26e4:	000fffff 	.word	0x000fffff
 80a26e8:	080a39d0 	.word	0x080a39d0
 80a26ec:	00000000 	.word	0x00000000

080a26f0 <scalbn>:
 80a26f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26f2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a26f6:	4604      	mov	r4, r0
 80a26f8:	460d      	mov	r5, r1
 80a26fa:	460e      	mov	r6, r1
 80a26fc:	4617      	mov	r7, r2
 80a26fe:	bb73      	cbnz	r3, 80a275e <scalbn+0x6e>
 80a2700:	4603      	mov	r3, r0
 80a2702:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a2706:	4333      	orrs	r3, r6
 80a2708:	d028      	beq.n	80a275c <scalbn+0x6c>
 80a270a:	4b31      	ldr	r3, [pc, #196]	; (80a27d0 <scalbn+0xe0>)
 80a270c:	2200      	movs	r2, #0
 80a270e:	f000 fa25 	bl	80a2b5c <__aeabi_dmul>
 80a2712:	4b30      	ldr	r3, [pc, #192]	; (80a27d4 <scalbn+0xe4>)
 80a2714:	4604      	mov	r4, r0
 80a2716:	429f      	cmp	r7, r3
 80a2718:	460d      	mov	r5, r1
 80a271a:	db1a      	blt.n	80a2752 <scalbn+0x62>
 80a271c:	460e      	mov	r6, r1
 80a271e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a2722:	3b36      	subs	r3, #54	; 0x36
 80a2724:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a2728:	443b      	add	r3, r7
 80a272a:	4293      	cmp	r3, r2
 80a272c:	dc20      	bgt.n	80a2770 <scalbn+0x80>
 80a272e:	2b00      	cmp	r3, #0
 80a2730:	dc3c      	bgt.n	80a27ac <scalbn+0xbc>
 80a2732:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a2736:	da2c      	bge.n	80a2792 <scalbn+0xa2>
 80a2738:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a273c:	429f      	cmp	r7, r3
 80a273e:	dc17      	bgt.n	80a2770 <scalbn+0x80>
 80a2740:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a2744:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a2748:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a274c:	4822      	ldr	r0, [pc, #136]	; (80a27d8 <scalbn+0xe8>)
 80a274e:	f041 011f 	orr.w	r1, r1, #31
 80a2752:	a31b      	add	r3, pc, #108	; (adr r3, 80a27c0 <scalbn+0xd0>)
 80a2754:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2758:	f000 fa00 	bl	80a2b5c <__aeabi_dmul>
 80a275c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a275e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a2762:	4293      	cmp	r3, r2
 80a2764:	d1de      	bne.n	80a2724 <scalbn+0x34>
 80a2766:	4602      	mov	r2, r0
 80a2768:	460b      	mov	r3, r1
 80a276a:	f000 f841 	bl	80a27f0 <__adddf3>
 80a276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2770:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80a2774:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80a2778:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a277c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a2780:	a311      	add	r3, pc, #68	; (adr r3, 80a27c8 <scalbn+0xd8>)
 80a2782:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2786:	4815      	ldr	r0, [pc, #84]	; (80a27dc <scalbn+0xec>)
 80a2788:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a278c:	f000 f9e6 	bl	80a2b5c <__aeabi_dmul>
 80a2790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2792:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a2796:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a279a:	3336      	adds	r3, #54	; 0x36
 80a279c:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a27a0:	4620      	mov	r0, r4
 80a27a2:	2200      	movs	r2, #0
 80a27a4:	4b0e      	ldr	r3, [pc, #56]	; (80a27e0 <scalbn+0xf0>)
 80a27a6:	f000 f9d9 	bl	80a2b5c <__aeabi_dmul>
 80a27aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a27ac:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a27b0:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a27b4:	4620      	mov	r0, r4
 80a27b6:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a27ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a27bc:	f3af 8000 	nop.w
 80a27c0:	c2f8f359 	.word	0xc2f8f359
 80a27c4:	01a56e1f 	.word	0x01a56e1f
 80a27c8:	8800759c 	.word	0x8800759c
 80a27cc:	7e37e43c 	.word	0x7e37e43c
 80a27d0:	43500000 	.word	0x43500000
 80a27d4:	ffff3cb0 	.word	0xffff3cb0
 80a27d8:	c2f8f359 	.word	0xc2f8f359
 80a27dc:	8800759c 	.word	0x8800759c
 80a27e0:	3c900000 	.word	0x3c900000

080a27e4 <__aeabi_drsub>:
 80a27e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a27e8:	e002      	b.n	80a27f0 <__adddf3>
 80a27ea:	bf00      	nop

080a27ec <__aeabi_dsub>:
 80a27ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a27f0 <__adddf3>:
 80a27f0:	b530      	push	{r4, r5, lr}
 80a27f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a27f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a27fa:	ea94 0f05 	teq	r4, r5
 80a27fe:	bf08      	it	eq
 80a2800:	ea90 0f02 	teqeq	r0, r2
 80a2804:	bf1f      	itttt	ne
 80a2806:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a280a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a280e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2812:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2816:	f000 80e2 	beq.w	80a29de <__adddf3+0x1ee>
 80a281a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a281e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2822:	bfb8      	it	lt
 80a2824:	426d      	neglt	r5, r5
 80a2826:	dd0c      	ble.n	80a2842 <__adddf3+0x52>
 80a2828:	442c      	add	r4, r5
 80a282a:	ea80 0202 	eor.w	r2, r0, r2
 80a282e:	ea81 0303 	eor.w	r3, r1, r3
 80a2832:	ea82 0000 	eor.w	r0, r2, r0
 80a2836:	ea83 0101 	eor.w	r1, r3, r1
 80a283a:	ea80 0202 	eor.w	r2, r0, r2
 80a283e:	ea81 0303 	eor.w	r3, r1, r3
 80a2842:	2d36      	cmp	r5, #54	; 0x36
 80a2844:	bf88      	it	hi
 80a2846:	bd30      	pophi	{r4, r5, pc}
 80a2848:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a284c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2850:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2854:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2858:	d002      	beq.n	80a2860 <__adddf3+0x70>
 80a285a:	4240      	negs	r0, r0
 80a285c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2860:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2868:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a286c:	d002      	beq.n	80a2874 <__adddf3+0x84>
 80a286e:	4252      	negs	r2, r2
 80a2870:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2874:	ea94 0f05 	teq	r4, r5
 80a2878:	f000 80a7 	beq.w	80a29ca <__adddf3+0x1da>
 80a287c:	f1a4 0401 	sub.w	r4, r4, #1
 80a2880:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2884:	db0d      	blt.n	80a28a2 <__adddf3+0xb2>
 80a2886:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a288a:	fa22 f205 	lsr.w	r2, r2, r5
 80a288e:	1880      	adds	r0, r0, r2
 80a2890:	f141 0100 	adc.w	r1, r1, #0
 80a2894:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2898:	1880      	adds	r0, r0, r2
 80a289a:	fa43 f305 	asr.w	r3, r3, r5
 80a289e:	4159      	adcs	r1, r3
 80a28a0:	e00e      	b.n	80a28c0 <__adddf3+0xd0>
 80a28a2:	f1a5 0520 	sub.w	r5, r5, #32
 80a28a6:	f10e 0e20 	add.w	lr, lr, #32
 80a28aa:	2a01      	cmp	r2, #1
 80a28ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a28b0:	bf28      	it	cs
 80a28b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a28b6:	fa43 f305 	asr.w	r3, r3, r5
 80a28ba:	18c0      	adds	r0, r0, r3
 80a28bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a28c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a28c4:	d507      	bpl.n	80a28d6 <__adddf3+0xe6>
 80a28c6:	f04f 0e00 	mov.w	lr, #0
 80a28ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80a28ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a28d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a28d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a28da:	d31b      	bcc.n	80a2914 <__adddf3+0x124>
 80a28dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a28e0:	d30c      	bcc.n	80a28fc <__adddf3+0x10c>
 80a28e2:	0849      	lsrs	r1, r1, #1
 80a28e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a28e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a28ec:	f104 0401 	add.w	r4, r4, #1
 80a28f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a28f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a28f8:	f080 809a 	bcs.w	80a2a30 <__adddf3+0x240>
 80a28fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2900:	bf08      	it	eq
 80a2902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2906:	f150 0000 	adcs.w	r0, r0, #0
 80a290a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a290e:	ea41 0105 	orr.w	r1, r1, r5
 80a2912:	bd30      	pop	{r4, r5, pc}
 80a2914:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2918:	4140      	adcs	r0, r0
 80a291a:	eb41 0101 	adc.w	r1, r1, r1
 80a291e:	3c01      	subs	r4, #1
 80a2920:	bf28      	it	cs
 80a2922:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2926:	d2e9      	bcs.n	80a28fc <__adddf3+0x10c>
 80a2928:	f091 0f00 	teq	r1, #0
 80a292c:	bf04      	itt	eq
 80a292e:	4601      	moveq	r1, r0
 80a2930:	2000      	moveq	r0, #0
 80a2932:	fab1 f381 	clz	r3, r1
 80a2936:	bf08      	it	eq
 80a2938:	3320      	addeq	r3, #32
 80a293a:	f1a3 030b 	sub.w	r3, r3, #11
 80a293e:	f1b3 0220 	subs.w	r2, r3, #32
 80a2942:	da0c      	bge.n	80a295e <__adddf3+0x16e>
 80a2944:	320c      	adds	r2, #12
 80a2946:	dd08      	ble.n	80a295a <__adddf3+0x16a>
 80a2948:	f102 0c14 	add.w	ip, r2, #20
 80a294c:	f1c2 020c 	rsb	r2, r2, #12
 80a2950:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2954:	fa21 f102 	lsr.w	r1, r1, r2
 80a2958:	e00c      	b.n	80a2974 <__adddf3+0x184>
 80a295a:	f102 0214 	add.w	r2, r2, #20
 80a295e:	bfd8      	it	le
 80a2960:	f1c2 0c20 	rsble	ip, r2, #32
 80a2964:	fa01 f102 	lsl.w	r1, r1, r2
 80a2968:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a296c:	bfdc      	itt	le
 80a296e:	ea41 010c 	orrle.w	r1, r1, ip
 80a2972:	4090      	lslle	r0, r2
 80a2974:	1ae4      	subs	r4, r4, r3
 80a2976:	bfa2      	ittt	ge
 80a2978:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a297c:	4329      	orrge	r1, r5
 80a297e:	bd30      	popge	{r4, r5, pc}
 80a2980:	ea6f 0404 	mvn.w	r4, r4
 80a2984:	3c1f      	subs	r4, #31
 80a2986:	da1c      	bge.n	80a29c2 <__adddf3+0x1d2>
 80a2988:	340c      	adds	r4, #12
 80a298a:	dc0e      	bgt.n	80a29aa <__adddf3+0x1ba>
 80a298c:	f104 0414 	add.w	r4, r4, #20
 80a2990:	f1c4 0220 	rsb	r2, r4, #32
 80a2994:	fa20 f004 	lsr.w	r0, r0, r4
 80a2998:	fa01 f302 	lsl.w	r3, r1, r2
 80a299c:	ea40 0003 	orr.w	r0, r0, r3
 80a29a0:	fa21 f304 	lsr.w	r3, r1, r4
 80a29a4:	ea45 0103 	orr.w	r1, r5, r3
 80a29a8:	bd30      	pop	{r4, r5, pc}
 80a29aa:	f1c4 040c 	rsb	r4, r4, #12
 80a29ae:	f1c4 0220 	rsb	r2, r4, #32
 80a29b2:	fa20 f002 	lsr.w	r0, r0, r2
 80a29b6:	fa01 f304 	lsl.w	r3, r1, r4
 80a29ba:	ea40 0003 	orr.w	r0, r0, r3
 80a29be:	4629      	mov	r1, r5
 80a29c0:	bd30      	pop	{r4, r5, pc}
 80a29c2:	fa21 f004 	lsr.w	r0, r1, r4
 80a29c6:	4629      	mov	r1, r5
 80a29c8:	bd30      	pop	{r4, r5, pc}
 80a29ca:	f094 0f00 	teq	r4, #0
 80a29ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a29d2:	bf06      	itte	eq
 80a29d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a29d8:	3401      	addeq	r4, #1
 80a29da:	3d01      	subne	r5, #1
 80a29dc:	e74e      	b.n	80a287c <__adddf3+0x8c>
 80a29de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a29e2:	bf18      	it	ne
 80a29e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a29e8:	d029      	beq.n	80a2a3e <__adddf3+0x24e>
 80a29ea:	ea94 0f05 	teq	r4, r5
 80a29ee:	bf08      	it	eq
 80a29f0:	ea90 0f02 	teqeq	r0, r2
 80a29f4:	d005      	beq.n	80a2a02 <__adddf3+0x212>
 80a29f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a29fa:	bf04      	itt	eq
 80a29fc:	4619      	moveq	r1, r3
 80a29fe:	4610      	moveq	r0, r2
 80a2a00:	bd30      	pop	{r4, r5, pc}
 80a2a02:	ea91 0f03 	teq	r1, r3
 80a2a06:	bf1e      	ittt	ne
 80a2a08:	2100      	movne	r1, #0
 80a2a0a:	2000      	movne	r0, #0
 80a2a0c:	bd30      	popne	{r4, r5, pc}
 80a2a0e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2a12:	d105      	bne.n	80a2a20 <__adddf3+0x230>
 80a2a14:	0040      	lsls	r0, r0, #1
 80a2a16:	4149      	adcs	r1, r1
 80a2a18:	bf28      	it	cs
 80a2a1a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2a1e:	bd30      	pop	{r4, r5, pc}
 80a2a20:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2a24:	bf3c      	itt	cc
 80a2a26:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2a2a:	bd30      	popcc	{r4, r5, pc}
 80a2a2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a30:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2a34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a38:	f04f 0000 	mov.w	r0, #0
 80a2a3c:	bd30      	pop	{r4, r5, pc}
 80a2a3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2a42:	bf1a      	itte	ne
 80a2a44:	4619      	movne	r1, r3
 80a2a46:	4610      	movne	r0, r2
 80a2a48:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2a4c:	bf1c      	itt	ne
 80a2a4e:	460b      	movne	r3, r1
 80a2a50:	4602      	movne	r2, r0
 80a2a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2a56:	bf06      	itte	eq
 80a2a58:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2a5c:	ea91 0f03 	teqeq	r1, r3
 80a2a60:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2a64:	bd30      	pop	{r4, r5, pc}
 80a2a66:	bf00      	nop

080a2a68 <__aeabi_ui2d>:
 80a2a68:	f090 0f00 	teq	r0, #0
 80a2a6c:	bf04      	itt	eq
 80a2a6e:	2100      	moveq	r1, #0
 80a2a70:	4770      	bxeq	lr
 80a2a72:	b530      	push	{r4, r5, lr}
 80a2a74:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a78:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a7c:	f04f 0500 	mov.w	r5, #0
 80a2a80:	f04f 0100 	mov.w	r1, #0
 80a2a84:	e750      	b.n	80a2928 <__adddf3+0x138>
 80a2a86:	bf00      	nop

080a2a88 <__aeabi_i2d>:
 80a2a88:	f090 0f00 	teq	r0, #0
 80a2a8c:	bf04      	itt	eq
 80a2a8e:	2100      	moveq	r1, #0
 80a2a90:	4770      	bxeq	lr
 80a2a92:	b530      	push	{r4, r5, lr}
 80a2a94:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a98:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a9c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2aa0:	bf48      	it	mi
 80a2aa2:	4240      	negmi	r0, r0
 80a2aa4:	f04f 0100 	mov.w	r1, #0
 80a2aa8:	e73e      	b.n	80a2928 <__adddf3+0x138>
 80a2aaa:	bf00      	nop

080a2aac <__aeabi_f2d>:
 80a2aac:	0042      	lsls	r2, r0, #1
 80a2aae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2ab2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2ab6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2aba:	bf1f      	itttt	ne
 80a2abc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2ac0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2ac4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2ac8:	4770      	bxne	lr
 80a2aca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a2ace:	bf08      	it	eq
 80a2ad0:	4770      	bxeq	lr
 80a2ad2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2ad6:	bf04      	itt	eq
 80a2ad8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a2adc:	4770      	bxeq	lr
 80a2ade:	b530      	push	{r4, r5, lr}
 80a2ae0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2ae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ae8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2aec:	e71c      	b.n	80a2928 <__adddf3+0x138>
 80a2aee:	bf00      	nop

080a2af0 <__aeabi_ul2d>:
 80a2af0:	ea50 0201 	orrs.w	r2, r0, r1
 80a2af4:	bf08      	it	eq
 80a2af6:	4770      	bxeq	lr
 80a2af8:	b530      	push	{r4, r5, lr}
 80a2afa:	f04f 0500 	mov.w	r5, #0
 80a2afe:	e00a      	b.n	80a2b16 <__aeabi_l2d+0x16>

080a2b00 <__aeabi_l2d>:
 80a2b00:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b04:	bf08      	it	eq
 80a2b06:	4770      	bxeq	lr
 80a2b08:	b530      	push	{r4, r5, lr}
 80a2b0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2b0e:	d502      	bpl.n	80a2b16 <__aeabi_l2d+0x16>
 80a2b10:	4240      	negs	r0, r0
 80a2b12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2b16:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2b1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2b1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2b22:	f43f aed8 	beq.w	80a28d6 <__adddf3+0xe6>
 80a2b26:	f04f 0203 	mov.w	r2, #3
 80a2b2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b2e:	bf18      	it	ne
 80a2b30:	3203      	addne	r2, #3
 80a2b32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b36:	bf18      	it	ne
 80a2b38:	3203      	addne	r2, #3
 80a2b3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2b3e:	f1c2 0320 	rsb	r3, r2, #32
 80a2b42:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2b46:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b4a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2b4e:	ea40 000e 	orr.w	r0, r0, lr
 80a2b52:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b56:	4414      	add	r4, r2
 80a2b58:	e6bd      	b.n	80a28d6 <__adddf3+0xe6>
 80a2b5a:	bf00      	nop

080a2b5c <__aeabi_dmul>:
 80a2b5c:	b570      	push	{r4, r5, r6, lr}
 80a2b5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b6a:	bf1d      	ittte	ne
 80a2b6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b70:	ea94 0f0c 	teqne	r4, ip
 80a2b74:	ea95 0f0c 	teqne	r5, ip
 80a2b78:	f000 f8de 	bleq	80a2d38 <__aeabi_dmul+0x1dc>
 80a2b7c:	442c      	add	r4, r5
 80a2b7e:	ea81 0603 	eor.w	r6, r1, r3
 80a2b82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2b86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2b8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2b8e:	bf18      	it	ne
 80a2b90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2b94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2b9c:	d038      	beq.n	80a2c10 <__aeabi_dmul+0xb4>
 80a2b9e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2ba2:	f04f 0500 	mov.w	r5, #0
 80a2ba6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2baa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2bae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2bb2:	f04f 0600 	mov.w	r6, #0
 80a2bb6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2bba:	f09c 0f00 	teq	ip, #0
 80a2bbe:	bf18      	it	ne
 80a2bc0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2bc4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2bc8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2bcc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2bd0:	d204      	bcs.n	80a2bdc <__aeabi_dmul+0x80>
 80a2bd2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2bd6:	416d      	adcs	r5, r5
 80a2bd8:	eb46 0606 	adc.w	r6, r6, r6
 80a2bdc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2be0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2be4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2be8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2bec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2bf0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2bf4:	bf88      	it	hi
 80a2bf6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2bfa:	d81e      	bhi.n	80a2c3a <__aeabi_dmul+0xde>
 80a2bfc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2c00:	bf08      	it	eq
 80a2c02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2c06:	f150 0000 	adcs.w	r0, r0, #0
 80a2c0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2c0e:	bd70      	pop	{r4, r5, r6, pc}
 80a2c10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2c14:	ea46 0101 	orr.w	r1, r6, r1
 80a2c18:	ea40 0002 	orr.w	r0, r0, r2
 80a2c1c:	ea81 0103 	eor.w	r1, r1, r3
 80a2c20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2c24:	bfc2      	ittt	gt
 80a2c26:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2c2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2c2e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2c30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2c34:	f04f 0e00 	mov.w	lr, #0
 80a2c38:	3c01      	subs	r4, #1
 80a2c3a:	f300 80ab 	bgt.w	80a2d94 <__aeabi_dmul+0x238>
 80a2c3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2c42:	bfde      	ittt	le
 80a2c44:	2000      	movle	r0, #0
 80a2c46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2c4a:	bd70      	pople	{r4, r5, r6, pc}
 80a2c4c:	f1c4 0400 	rsb	r4, r4, #0
 80a2c50:	3c20      	subs	r4, #32
 80a2c52:	da35      	bge.n	80a2cc0 <__aeabi_dmul+0x164>
 80a2c54:	340c      	adds	r4, #12
 80a2c56:	dc1b      	bgt.n	80a2c90 <__aeabi_dmul+0x134>
 80a2c58:	f104 0414 	add.w	r4, r4, #20
 80a2c5c:	f1c4 0520 	rsb	r5, r4, #32
 80a2c60:	fa00 f305 	lsl.w	r3, r0, r5
 80a2c64:	fa20 f004 	lsr.w	r0, r0, r4
 80a2c68:	fa01 f205 	lsl.w	r2, r1, r5
 80a2c6c:	ea40 0002 	orr.w	r0, r0, r2
 80a2c70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2c74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2c7c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2c80:	eb42 0106 	adc.w	r1, r2, r6
 80a2c84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2c88:	bf08      	it	eq
 80a2c8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2c8e:	bd70      	pop	{r4, r5, r6, pc}
 80a2c90:	f1c4 040c 	rsb	r4, r4, #12
 80a2c94:	f1c4 0520 	rsb	r5, r4, #32
 80a2c98:	fa00 f304 	lsl.w	r3, r0, r4
 80a2c9c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2ca0:	fa01 f204 	lsl.w	r2, r1, r4
 80a2ca4:	ea40 0002 	orr.w	r0, r0, r2
 80a2ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2cac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2cb0:	f141 0100 	adc.w	r1, r1, #0
 80a2cb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2cb8:	bf08      	it	eq
 80a2cba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2cbe:	bd70      	pop	{r4, r5, r6, pc}
 80a2cc0:	f1c4 0520 	rsb	r5, r4, #32
 80a2cc4:	fa00 f205 	lsl.w	r2, r0, r5
 80a2cc8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2ccc:	fa20 f304 	lsr.w	r3, r0, r4
 80a2cd0:	fa01 f205 	lsl.w	r2, r1, r5
 80a2cd4:	ea43 0302 	orr.w	r3, r3, r2
 80a2cd8:	fa21 f004 	lsr.w	r0, r1, r4
 80a2cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2ce0:	fa21 f204 	lsr.w	r2, r1, r4
 80a2ce4:	ea20 0002 	bic.w	r0, r0, r2
 80a2ce8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2cec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2cf0:	bf08      	it	eq
 80a2cf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2cf6:	bd70      	pop	{r4, r5, r6, pc}
 80a2cf8:	f094 0f00 	teq	r4, #0
 80a2cfc:	d10f      	bne.n	80a2d1e <__aeabi_dmul+0x1c2>
 80a2cfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2d02:	0040      	lsls	r0, r0, #1
 80a2d04:	eb41 0101 	adc.w	r1, r1, r1
 80a2d08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2d0c:	bf08      	it	eq
 80a2d0e:	3c01      	subeq	r4, #1
 80a2d10:	d0f7      	beq.n	80a2d02 <__aeabi_dmul+0x1a6>
 80a2d12:	ea41 0106 	orr.w	r1, r1, r6
 80a2d16:	f095 0f00 	teq	r5, #0
 80a2d1a:	bf18      	it	ne
 80a2d1c:	4770      	bxne	lr
 80a2d1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2d22:	0052      	lsls	r2, r2, #1
 80a2d24:	eb43 0303 	adc.w	r3, r3, r3
 80a2d28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2d2c:	bf08      	it	eq
 80a2d2e:	3d01      	subeq	r5, #1
 80a2d30:	d0f7      	beq.n	80a2d22 <__aeabi_dmul+0x1c6>
 80a2d32:	ea43 0306 	orr.w	r3, r3, r6
 80a2d36:	4770      	bx	lr
 80a2d38:	ea94 0f0c 	teq	r4, ip
 80a2d3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2d40:	bf18      	it	ne
 80a2d42:	ea95 0f0c 	teqne	r5, ip
 80a2d46:	d00c      	beq.n	80a2d62 <__aeabi_dmul+0x206>
 80a2d48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d4c:	bf18      	it	ne
 80a2d4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d52:	d1d1      	bne.n	80a2cf8 <__aeabi_dmul+0x19c>
 80a2d54:	ea81 0103 	eor.w	r1, r1, r3
 80a2d58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d5c:	f04f 0000 	mov.w	r0, #0
 80a2d60:	bd70      	pop	{r4, r5, r6, pc}
 80a2d62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d66:	bf06      	itte	eq
 80a2d68:	4610      	moveq	r0, r2
 80a2d6a:	4619      	moveq	r1, r3
 80a2d6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d70:	d019      	beq.n	80a2da6 <__aeabi_dmul+0x24a>
 80a2d72:	ea94 0f0c 	teq	r4, ip
 80a2d76:	d102      	bne.n	80a2d7e <__aeabi_dmul+0x222>
 80a2d78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2d7c:	d113      	bne.n	80a2da6 <__aeabi_dmul+0x24a>
 80a2d7e:	ea95 0f0c 	teq	r5, ip
 80a2d82:	d105      	bne.n	80a2d90 <__aeabi_dmul+0x234>
 80a2d84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2d88:	bf1c      	itt	ne
 80a2d8a:	4610      	movne	r0, r2
 80a2d8c:	4619      	movne	r1, r3
 80a2d8e:	d10a      	bne.n	80a2da6 <__aeabi_dmul+0x24a>
 80a2d90:	ea81 0103 	eor.w	r1, r1, r3
 80a2d94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2d9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2da0:	f04f 0000 	mov.w	r0, #0
 80a2da4:	bd70      	pop	{r4, r5, r6, pc}
 80a2da6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2daa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2dae:	bd70      	pop	{r4, r5, r6, pc}

080a2db0 <__aeabi_ddiv>:
 80a2db0:	b570      	push	{r4, r5, r6, lr}
 80a2db2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2db6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2dba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2dbe:	bf1d      	ittte	ne
 80a2dc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2dc4:	ea94 0f0c 	teqne	r4, ip
 80a2dc8:	ea95 0f0c 	teqne	r5, ip
 80a2dcc:	f000 f8a7 	bleq	80a2f1e <__aeabi_ddiv+0x16e>
 80a2dd0:	eba4 0405 	sub.w	r4, r4, r5
 80a2dd4:	ea81 0e03 	eor.w	lr, r1, r3
 80a2dd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2ddc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2de0:	f000 8088 	beq.w	80a2ef4 <__aeabi_ddiv+0x144>
 80a2de4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2de8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2dec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2df0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2df4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2df8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2dfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2e00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2e04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2e08:	429d      	cmp	r5, r3
 80a2e0a:	bf08      	it	eq
 80a2e0c:	4296      	cmpeq	r6, r2
 80a2e0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2e12:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2e16:	d202      	bcs.n	80a2e1e <__aeabi_ddiv+0x6e>
 80a2e18:	085b      	lsrs	r3, r3, #1
 80a2e1a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e1e:	1ab6      	subs	r6, r6, r2
 80a2e20:	eb65 0503 	sbc.w	r5, r5, r3
 80a2e24:	085b      	lsrs	r3, r3, #1
 80a2e26:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2e2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2e32:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e36:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e3a:	bf22      	ittt	cs
 80a2e3c:	1ab6      	subcs	r6, r6, r2
 80a2e3e:	4675      	movcs	r5, lr
 80a2e40:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2e44:	085b      	lsrs	r3, r3, #1
 80a2e46:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e4a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e52:	bf22      	ittt	cs
 80a2e54:	1ab6      	subcs	r6, r6, r2
 80a2e56:	4675      	movcs	r5, lr
 80a2e58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2e5c:	085b      	lsrs	r3, r3, #1
 80a2e5e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e62:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e66:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e6a:	bf22      	ittt	cs
 80a2e6c:	1ab6      	subcs	r6, r6, r2
 80a2e6e:	4675      	movcs	r5, lr
 80a2e70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2e74:	085b      	lsrs	r3, r3, #1
 80a2e76:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e7a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e82:	bf22      	ittt	cs
 80a2e84:	1ab6      	subcs	r6, r6, r2
 80a2e86:	4675      	movcs	r5, lr
 80a2e88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2e8c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2e90:	d018      	beq.n	80a2ec4 <__aeabi_ddiv+0x114>
 80a2e92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2e96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2e9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2e9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2ea2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2ea6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2eaa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2eae:	d1c0      	bne.n	80a2e32 <__aeabi_ddiv+0x82>
 80a2eb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2eb4:	d10b      	bne.n	80a2ece <__aeabi_ddiv+0x11e>
 80a2eb6:	ea41 0100 	orr.w	r1, r1, r0
 80a2eba:	f04f 0000 	mov.w	r0, #0
 80a2ebe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2ec2:	e7b6      	b.n	80a2e32 <__aeabi_ddiv+0x82>
 80a2ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ec8:	bf04      	itt	eq
 80a2eca:	4301      	orreq	r1, r0
 80a2ecc:	2000      	moveq	r0, #0
 80a2ece:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2ed2:	bf88      	it	hi
 80a2ed4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2ed8:	f63f aeaf 	bhi.w	80a2c3a <__aeabi_dmul+0xde>
 80a2edc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2ee0:	bf04      	itt	eq
 80a2ee2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2ee6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2eea:	f150 0000 	adcs.w	r0, r0, #0
 80a2eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2ef2:	bd70      	pop	{r4, r5, r6, pc}
 80a2ef4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2ef8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2efc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2f00:	bfc2      	ittt	gt
 80a2f02:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2f06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2f0a:	bd70      	popgt	{r4, r5, r6, pc}
 80a2f0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2f10:	f04f 0e00 	mov.w	lr, #0
 80a2f14:	3c01      	subs	r4, #1
 80a2f16:	e690      	b.n	80a2c3a <__aeabi_dmul+0xde>
 80a2f18:	ea45 0e06 	orr.w	lr, r5, r6
 80a2f1c:	e68d      	b.n	80a2c3a <__aeabi_dmul+0xde>
 80a2f1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2f22:	ea94 0f0c 	teq	r4, ip
 80a2f26:	bf08      	it	eq
 80a2f28:	ea95 0f0c 	teqeq	r5, ip
 80a2f2c:	f43f af3b 	beq.w	80a2da6 <__aeabi_dmul+0x24a>
 80a2f30:	ea94 0f0c 	teq	r4, ip
 80a2f34:	d10a      	bne.n	80a2f4c <__aeabi_ddiv+0x19c>
 80a2f36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2f3a:	f47f af34 	bne.w	80a2da6 <__aeabi_dmul+0x24a>
 80a2f3e:	ea95 0f0c 	teq	r5, ip
 80a2f42:	f47f af25 	bne.w	80a2d90 <__aeabi_dmul+0x234>
 80a2f46:	4610      	mov	r0, r2
 80a2f48:	4619      	mov	r1, r3
 80a2f4a:	e72c      	b.n	80a2da6 <__aeabi_dmul+0x24a>
 80a2f4c:	ea95 0f0c 	teq	r5, ip
 80a2f50:	d106      	bne.n	80a2f60 <__aeabi_ddiv+0x1b0>
 80a2f52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f56:	f43f aefd 	beq.w	80a2d54 <__aeabi_dmul+0x1f8>
 80a2f5a:	4610      	mov	r0, r2
 80a2f5c:	4619      	mov	r1, r3
 80a2f5e:	e722      	b.n	80a2da6 <__aeabi_dmul+0x24a>
 80a2f60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2f64:	bf18      	it	ne
 80a2f66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f6a:	f47f aec5 	bne.w	80a2cf8 <__aeabi_dmul+0x19c>
 80a2f6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2f72:	f47f af0d 	bne.w	80a2d90 <__aeabi_dmul+0x234>
 80a2f76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2f7a:	f47f aeeb 	bne.w	80a2d54 <__aeabi_dmul+0x1f8>
 80a2f7e:	e712      	b.n	80a2da6 <__aeabi_dmul+0x24a>

080a2f80 <__gedf2>:
 80a2f80:	f04f 3cff 	mov.w	ip, #4294967295
 80a2f84:	e006      	b.n	80a2f94 <__cmpdf2+0x4>
 80a2f86:	bf00      	nop

080a2f88 <__ledf2>:
 80a2f88:	f04f 0c01 	mov.w	ip, #1
 80a2f8c:	e002      	b.n	80a2f94 <__cmpdf2+0x4>
 80a2f8e:	bf00      	nop

080a2f90 <__cmpdf2>:
 80a2f90:	f04f 0c01 	mov.w	ip, #1
 80a2f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2fa4:	bf18      	it	ne
 80a2fa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2faa:	d01b      	beq.n	80a2fe4 <__cmpdf2+0x54>
 80a2fac:	b001      	add	sp, #4
 80a2fae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2fb2:	bf0c      	ite	eq
 80a2fb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2fb8:	ea91 0f03 	teqne	r1, r3
 80a2fbc:	bf02      	ittt	eq
 80a2fbe:	ea90 0f02 	teqeq	r0, r2
 80a2fc2:	2000      	moveq	r0, #0
 80a2fc4:	4770      	bxeq	lr
 80a2fc6:	f110 0f00 	cmn.w	r0, #0
 80a2fca:	ea91 0f03 	teq	r1, r3
 80a2fce:	bf58      	it	pl
 80a2fd0:	4299      	cmppl	r1, r3
 80a2fd2:	bf08      	it	eq
 80a2fd4:	4290      	cmpeq	r0, r2
 80a2fd6:	bf2c      	ite	cs
 80a2fd8:	17d8      	asrcs	r0, r3, #31
 80a2fda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2fde:	f040 0001 	orr.w	r0, r0, #1
 80a2fe2:	4770      	bx	lr
 80a2fe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fec:	d102      	bne.n	80a2ff4 <__cmpdf2+0x64>
 80a2fee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2ff2:	d107      	bne.n	80a3004 <__cmpdf2+0x74>
 80a2ff4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2ff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2ffc:	d1d6      	bne.n	80a2fac <__cmpdf2+0x1c>
 80a2ffe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3002:	d0d3      	beq.n	80a2fac <__cmpdf2+0x1c>
 80a3004:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3008:	4770      	bx	lr
 80a300a:	bf00      	nop

080a300c <__aeabi_cdrcmple>:
 80a300c:	4684      	mov	ip, r0
 80a300e:	4610      	mov	r0, r2
 80a3010:	4662      	mov	r2, ip
 80a3012:	468c      	mov	ip, r1
 80a3014:	4619      	mov	r1, r3
 80a3016:	4663      	mov	r3, ip
 80a3018:	e000      	b.n	80a301c <__aeabi_cdcmpeq>
 80a301a:	bf00      	nop

080a301c <__aeabi_cdcmpeq>:
 80a301c:	b501      	push	{r0, lr}
 80a301e:	f7ff ffb7 	bl	80a2f90 <__cmpdf2>
 80a3022:	2800      	cmp	r0, #0
 80a3024:	bf48      	it	mi
 80a3026:	f110 0f00 	cmnmi.w	r0, #0
 80a302a:	bd01      	pop	{r0, pc}

080a302c <__aeabi_dcmpeq>:
 80a302c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3030:	f7ff fff4 	bl	80a301c <__aeabi_cdcmpeq>
 80a3034:	bf0c      	ite	eq
 80a3036:	2001      	moveq	r0, #1
 80a3038:	2000      	movne	r0, #0
 80a303a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a303e:	bf00      	nop

080a3040 <__aeabi_dcmplt>:
 80a3040:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3044:	f7ff ffea 	bl	80a301c <__aeabi_cdcmpeq>
 80a3048:	bf34      	ite	cc
 80a304a:	2001      	movcc	r0, #1
 80a304c:	2000      	movcs	r0, #0
 80a304e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3052:	bf00      	nop

080a3054 <__aeabi_dcmple>:
 80a3054:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3058:	f7ff ffe0 	bl	80a301c <__aeabi_cdcmpeq>
 80a305c:	bf94      	ite	ls
 80a305e:	2001      	movls	r0, #1
 80a3060:	2000      	movhi	r0, #0
 80a3062:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3066:	bf00      	nop

080a3068 <__aeabi_dcmpge>:
 80a3068:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a306c:	f7ff ffce 	bl	80a300c <__aeabi_cdrcmple>
 80a3070:	bf94      	ite	ls
 80a3072:	2001      	movls	r0, #1
 80a3074:	2000      	movhi	r0, #0
 80a3076:	f85d fb08 	ldr.w	pc, [sp], #8
 80a307a:	bf00      	nop

080a307c <__aeabi_dcmpgt>:
 80a307c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3080:	f7ff ffc4 	bl	80a300c <__aeabi_cdrcmple>
 80a3084:	bf34      	ite	cc
 80a3086:	2001      	movcc	r0, #1
 80a3088:	2000      	movcs	r0, #0
 80a308a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a308e:	bf00      	nop

080a3090 <__aeabi_dcmpun>:
 80a3090:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3098:	d102      	bne.n	80a30a0 <__aeabi_dcmpun+0x10>
 80a309a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a309e:	d10a      	bne.n	80a30b6 <__aeabi_dcmpun+0x26>
 80a30a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a30a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a30a8:	d102      	bne.n	80a30b0 <__aeabi_dcmpun+0x20>
 80a30aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a30ae:	d102      	bne.n	80a30b6 <__aeabi_dcmpun+0x26>
 80a30b0:	f04f 0000 	mov.w	r0, #0
 80a30b4:	4770      	bx	lr
 80a30b6:	f04f 0001 	mov.w	r0, #1
 80a30ba:	4770      	bx	lr

080a30bc <__aeabi_d2iz>:
 80a30bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a30c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a30c4:	d215      	bcs.n	80a30f2 <__aeabi_d2iz+0x36>
 80a30c6:	d511      	bpl.n	80a30ec <__aeabi_d2iz+0x30>
 80a30c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a30cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a30d0:	d912      	bls.n	80a30f8 <__aeabi_d2iz+0x3c>
 80a30d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a30d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a30da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a30de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a30e2:	fa23 f002 	lsr.w	r0, r3, r2
 80a30e6:	bf18      	it	ne
 80a30e8:	4240      	negne	r0, r0
 80a30ea:	4770      	bx	lr
 80a30ec:	f04f 0000 	mov.w	r0, #0
 80a30f0:	4770      	bx	lr
 80a30f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a30f6:	d105      	bne.n	80a3104 <__aeabi_d2iz+0x48>
 80a30f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a30fc:	bf08      	it	eq
 80a30fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3102:	4770      	bx	lr
 80a3104:	f04f 0000 	mov.w	r0, #0
 80a3108:	4770      	bx	lr
 80a310a:	bf00      	nop

080a310c <__aeabi_d2uiz>:
 80a310c:	004a      	lsls	r2, r1, #1
 80a310e:	d211      	bcs.n	80a3134 <__aeabi_d2uiz+0x28>
 80a3110:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3114:	d211      	bcs.n	80a313a <__aeabi_d2uiz+0x2e>
 80a3116:	d50d      	bpl.n	80a3134 <__aeabi_d2uiz+0x28>
 80a3118:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a311c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3120:	d40e      	bmi.n	80a3140 <__aeabi_d2uiz+0x34>
 80a3122:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a312a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a312e:	fa23 f002 	lsr.w	r0, r3, r2
 80a3132:	4770      	bx	lr
 80a3134:	f04f 0000 	mov.w	r0, #0
 80a3138:	4770      	bx	lr
 80a313a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a313e:	d102      	bne.n	80a3146 <__aeabi_d2uiz+0x3a>
 80a3140:	f04f 30ff 	mov.w	r0, #4294967295
 80a3144:	4770      	bx	lr
 80a3146:	f04f 0000 	mov.w	r0, #0
 80a314a:	4770      	bx	lr

080a314c <__aeabi_d2f>:
 80a314c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3150:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3154:	bf24      	itt	cs
 80a3156:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a315a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a315e:	d90d      	bls.n	80a317c <__aeabi_d2f+0x30>
 80a3160:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3164:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3168:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a316c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3170:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3174:	bf08      	it	eq
 80a3176:	f020 0001 	biceq.w	r0, r0, #1
 80a317a:	4770      	bx	lr
 80a317c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3180:	d121      	bne.n	80a31c6 <__aeabi_d2f+0x7a>
 80a3182:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3186:	bfbc      	itt	lt
 80a3188:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a318c:	4770      	bxlt	lr
 80a318e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3192:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3196:	f1c2 0218 	rsb	r2, r2, #24
 80a319a:	f1c2 0c20 	rsb	ip, r2, #32
 80a319e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a31a2:	fa20 f002 	lsr.w	r0, r0, r2
 80a31a6:	bf18      	it	ne
 80a31a8:	f040 0001 	orrne.w	r0, r0, #1
 80a31ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a31b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a31b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a31b8:	ea40 000c 	orr.w	r0, r0, ip
 80a31bc:	fa23 f302 	lsr.w	r3, r3, r2
 80a31c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a31c4:	e7cc      	b.n	80a3160 <__aeabi_d2f+0x14>
 80a31c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a31ca:	d107      	bne.n	80a31dc <__aeabi_d2f+0x90>
 80a31cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a31d0:	bf1e      	ittt	ne
 80a31d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a31d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a31da:	4770      	bxne	lr
 80a31dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a31e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a31e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a31e8:	4770      	bx	lr
 80a31ea:	bf00      	nop

080a31ec <__aeabi_frsub>:
 80a31ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a31f0:	e002      	b.n	80a31f8 <__addsf3>
 80a31f2:	bf00      	nop

080a31f4 <__aeabi_fsub>:
 80a31f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a31f8 <__addsf3>:
 80a31f8:	0042      	lsls	r2, r0, #1
 80a31fa:	bf1f      	itttt	ne
 80a31fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3200:	ea92 0f03 	teqne	r2, r3
 80a3204:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3208:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a320c:	d06a      	beq.n	80a32e4 <__addsf3+0xec>
 80a320e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3212:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3216:	bfc1      	itttt	gt
 80a3218:	18d2      	addgt	r2, r2, r3
 80a321a:	4041      	eorgt	r1, r0
 80a321c:	4048      	eorgt	r0, r1
 80a321e:	4041      	eorgt	r1, r0
 80a3220:	bfb8      	it	lt
 80a3222:	425b      	neglt	r3, r3
 80a3224:	2b19      	cmp	r3, #25
 80a3226:	bf88      	it	hi
 80a3228:	4770      	bxhi	lr
 80a322a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a322e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3236:	bf18      	it	ne
 80a3238:	4240      	negne	r0, r0
 80a323a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a323e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3242:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3246:	bf18      	it	ne
 80a3248:	4249      	negne	r1, r1
 80a324a:	ea92 0f03 	teq	r2, r3
 80a324e:	d03f      	beq.n	80a32d0 <__addsf3+0xd8>
 80a3250:	f1a2 0201 	sub.w	r2, r2, #1
 80a3254:	fa41 fc03 	asr.w	ip, r1, r3
 80a3258:	eb10 000c 	adds.w	r0, r0, ip
 80a325c:	f1c3 0320 	rsb	r3, r3, #32
 80a3260:	fa01 f103 	lsl.w	r1, r1, r3
 80a3264:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3268:	d502      	bpl.n	80a3270 <__addsf3+0x78>
 80a326a:	4249      	negs	r1, r1
 80a326c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3270:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3274:	d313      	bcc.n	80a329e <__addsf3+0xa6>
 80a3276:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a327a:	d306      	bcc.n	80a328a <__addsf3+0x92>
 80a327c:	0840      	lsrs	r0, r0, #1
 80a327e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3282:	f102 0201 	add.w	r2, r2, #1
 80a3286:	2afe      	cmp	r2, #254	; 0xfe
 80a3288:	d251      	bcs.n	80a332e <__addsf3+0x136>
 80a328a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a328e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3292:	bf08      	it	eq
 80a3294:	f020 0001 	biceq.w	r0, r0, #1
 80a3298:	ea40 0003 	orr.w	r0, r0, r3
 80a329c:	4770      	bx	lr
 80a329e:	0049      	lsls	r1, r1, #1
 80a32a0:	eb40 0000 	adc.w	r0, r0, r0
 80a32a4:	3a01      	subs	r2, #1
 80a32a6:	bf28      	it	cs
 80a32a8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a32ac:	d2ed      	bcs.n	80a328a <__addsf3+0x92>
 80a32ae:	fab0 fc80 	clz	ip, r0
 80a32b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80a32b6:	ebb2 020c 	subs.w	r2, r2, ip
 80a32ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80a32be:	bfaa      	itet	ge
 80a32c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a32c4:	4252      	neglt	r2, r2
 80a32c6:	4318      	orrge	r0, r3
 80a32c8:	bfbc      	itt	lt
 80a32ca:	40d0      	lsrlt	r0, r2
 80a32cc:	4318      	orrlt	r0, r3
 80a32ce:	4770      	bx	lr
 80a32d0:	f092 0f00 	teq	r2, #0
 80a32d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a32d8:	bf06      	itte	eq
 80a32da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a32de:	3201      	addeq	r2, #1
 80a32e0:	3b01      	subne	r3, #1
 80a32e2:	e7b5      	b.n	80a3250 <__addsf3+0x58>
 80a32e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a32e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a32ec:	bf18      	it	ne
 80a32ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a32f2:	d021      	beq.n	80a3338 <__addsf3+0x140>
 80a32f4:	ea92 0f03 	teq	r2, r3
 80a32f8:	d004      	beq.n	80a3304 <__addsf3+0x10c>
 80a32fa:	f092 0f00 	teq	r2, #0
 80a32fe:	bf08      	it	eq
 80a3300:	4608      	moveq	r0, r1
 80a3302:	4770      	bx	lr
 80a3304:	ea90 0f01 	teq	r0, r1
 80a3308:	bf1c      	itt	ne
 80a330a:	2000      	movne	r0, #0
 80a330c:	4770      	bxne	lr
 80a330e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3312:	d104      	bne.n	80a331e <__addsf3+0x126>
 80a3314:	0040      	lsls	r0, r0, #1
 80a3316:	bf28      	it	cs
 80a3318:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a331c:	4770      	bx	lr
 80a331e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3322:	bf3c      	itt	cc
 80a3324:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3328:	4770      	bxcc	lr
 80a332a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a332e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3332:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3336:	4770      	bx	lr
 80a3338:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a333c:	bf16      	itet	ne
 80a333e:	4608      	movne	r0, r1
 80a3340:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3344:	4601      	movne	r1, r0
 80a3346:	0242      	lsls	r2, r0, #9
 80a3348:	bf06      	itte	eq
 80a334a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a334e:	ea90 0f01 	teqeq	r0, r1
 80a3352:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3356:	4770      	bx	lr

080a3358 <__aeabi_ui2f>:
 80a3358:	f04f 0300 	mov.w	r3, #0
 80a335c:	e004      	b.n	80a3368 <__aeabi_i2f+0x8>
 80a335e:	bf00      	nop

080a3360 <__aeabi_i2f>:
 80a3360:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3364:	bf48      	it	mi
 80a3366:	4240      	negmi	r0, r0
 80a3368:	ea5f 0c00 	movs.w	ip, r0
 80a336c:	bf08      	it	eq
 80a336e:	4770      	bxeq	lr
 80a3370:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3374:	4601      	mov	r1, r0
 80a3376:	f04f 0000 	mov.w	r0, #0
 80a337a:	e01c      	b.n	80a33b6 <__aeabi_l2f+0x2a>

080a337c <__aeabi_ul2f>:
 80a337c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3380:	bf08      	it	eq
 80a3382:	4770      	bxeq	lr
 80a3384:	f04f 0300 	mov.w	r3, #0
 80a3388:	e00a      	b.n	80a33a0 <__aeabi_l2f+0x14>
 80a338a:	bf00      	nop

080a338c <__aeabi_l2f>:
 80a338c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3390:	bf08      	it	eq
 80a3392:	4770      	bxeq	lr
 80a3394:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3398:	d502      	bpl.n	80a33a0 <__aeabi_l2f+0x14>
 80a339a:	4240      	negs	r0, r0
 80a339c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a33a0:	ea5f 0c01 	movs.w	ip, r1
 80a33a4:	bf02      	ittt	eq
 80a33a6:	4684      	moveq	ip, r0
 80a33a8:	4601      	moveq	r1, r0
 80a33aa:	2000      	moveq	r0, #0
 80a33ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a33b0:	bf08      	it	eq
 80a33b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a33b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a33ba:	fabc f28c 	clz	r2, ip
 80a33be:	3a08      	subs	r2, #8
 80a33c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a33c4:	db10      	blt.n	80a33e8 <__aeabi_l2f+0x5c>
 80a33c6:	fa01 fc02 	lsl.w	ip, r1, r2
 80a33ca:	4463      	add	r3, ip
 80a33cc:	fa00 fc02 	lsl.w	ip, r0, r2
 80a33d0:	f1c2 0220 	rsb	r2, r2, #32
 80a33d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a33d8:	fa20 f202 	lsr.w	r2, r0, r2
 80a33dc:	eb43 0002 	adc.w	r0, r3, r2
 80a33e0:	bf08      	it	eq
 80a33e2:	f020 0001 	biceq.w	r0, r0, #1
 80a33e6:	4770      	bx	lr
 80a33e8:	f102 0220 	add.w	r2, r2, #32
 80a33ec:	fa01 fc02 	lsl.w	ip, r1, r2
 80a33f0:	f1c2 0220 	rsb	r2, r2, #32
 80a33f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a33f8:	fa21 f202 	lsr.w	r2, r1, r2
 80a33fc:	eb43 0002 	adc.w	r0, r3, r2
 80a3400:	bf08      	it	eq
 80a3402:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3406:	4770      	bx	lr

080a3408 <__aeabi_fmul>:
 80a3408:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a340c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3410:	bf1e      	ittt	ne
 80a3412:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3416:	ea92 0f0c 	teqne	r2, ip
 80a341a:	ea93 0f0c 	teqne	r3, ip
 80a341e:	d06f      	beq.n	80a3500 <__aeabi_fmul+0xf8>
 80a3420:	441a      	add	r2, r3
 80a3422:	ea80 0c01 	eor.w	ip, r0, r1
 80a3426:	0240      	lsls	r0, r0, #9
 80a3428:	bf18      	it	ne
 80a342a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a342e:	d01e      	beq.n	80a346e <__aeabi_fmul+0x66>
 80a3430:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3434:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3438:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a343c:	fba0 3101 	umull	r3, r1, r0, r1
 80a3440:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3444:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3448:	bf3e      	ittt	cc
 80a344a:	0049      	lslcc	r1, r1, #1
 80a344c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3450:	005b      	lslcc	r3, r3, #1
 80a3452:	ea40 0001 	orr.w	r0, r0, r1
 80a3456:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a345a:	2afd      	cmp	r2, #253	; 0xfd
 80a345c:	d81d      	bhi.n	80a349a <__aeabi_fmul+0x92>
 80a345e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3462:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3466:	bf08      	it	eq
 80a3468:	f020 0001 	biceq.w	r0, r0, #1
 80a346c:	4770      	bx	lr
 80a346e:	f090 0f00 	teq	r0, #0
 80a3472:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3476:	bf08      	it	eq
 80a3478:	0249      	lsleq	r1, r1, #9
 80a347a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a347e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3482:	3a7f      	subs	r2, #127	; 0x7f
 80a3484:	bfc2      	ittt	gt
 80a3486:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a348a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a348e:	4770      	bxgt	lr
 80a3490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3494:	f04f 0300 	mov.w	r3, #0
 80a3498:	3a01      	subs	r2, #1
 80a349a:	dc5d      	bgt.n	80a3558 <__aeabi_fmul+0x150>
 80a349c:	f112 0f19 	cmn.w	r2, #25
 80a34a0:	bfdc      	itt	le
 80a34a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a34a6:	4770      	bxle	lr
 80a34a8:	f1c2 0200 	rsb	r2, r2, #0
 80a34ac:	0041      	lsls	r1, r0, #1
 80a34ae:	fa21 f102 	lsr.w	r1, r1, r2
 80a34b2:	f1c2 0220 	rsb	r2, r2, #32
 80a34b6:	fa00 fc02 	lsl.w	ip, r0, r2
 80a34ba:	ea5f 0031 	movs.w	r0, r1, rrx
 80a34be:	f140 0000 	adc.w	r0, r0, #0
 80a34c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a34c6:	bf08      	it	eq
 80a34c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a34cc:	4770      	bx	lr
 80a34ce:	f092 0f00 	teq	r2, #0
 80a34d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a34d6:	bf02      	ittt	eq
 80a34d8:	0040      	lsleq	r0, r0, #1
 80a34da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a34de:	3a01      	subeq	r2, #1
 80a34e0:	d0f9      	beq.n	80a34d6 <__aeabi_fmul+0xce>
 80a34e2:	ea40 000c 	orr.w	r0, r0, ip
 80a34e6:	f093 0f00 	teq	r3, #0
 80a34ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a34ee:	bf02      	ittt	eq
 80a34f0:	0049      	lsleq	r1, r1, #1
 80a34f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a34f6:	3b01      	subeq	r3, #1
 80a34f8:	d0f9      	beq.n	80a34ee <__aeabi_fmul+0xe6>
 80a34fa:	ea41 010c 	orr.w	r1, r1, ip
 80a34fe:	e78f      	b.n	80a3420 <__aeabi_fmul+0x18>
 80a3500:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3504:	ea92 0f0c 	teq	r2, ip
 80a3508:	bf18      	it	ne
 80a350a:	ea93 0f0c 	teqne	r3, ip
 80a350e:	d00a      	beq.n	80a3526 <__aeabi_fmul+0x11e>
 80a3510:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3514:	bf18      	it	ne
 80a3516:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a351a:	d1d8      	bne.n	80a34ce <__aeabi_fmul+0xc6>
 80a351c:	ea80 0001 	eor.w	r0, r0, r1
 80a3520:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3524:	4770      	bx	lr
 80a3526:	f090 0f00 	teq	r0, #0
 80a352a:	bf17      	itett	ne
 80a352c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3530:	4608      	moveq	r0, r1
 80a3532:	f091 0f00 	teqne	r1, #0
 80a3536:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a353a:	d014      	beq.n	80a3566 <__aeabi_fmul+0x15e>
 80a353c:	ea92 0f0c 	teq	r2, ip
 80a3540:	d101      	bne.n	80a3546 <__aeabi_fmul+0x13e>
 80a3542:	0242      	lsls	r2, r0, #9
 80a3544:	d10f      	bne.n	80a3566 <__aeabi_fmul+0x15e>
 80a3546:	ea93 0f0c 	teq	r3, ip
 80a354a:	d103      	bne.n	80a3554 <__aeabi_fmul+0x14c>
 80a354c:	024b      	lsls	r3, r1, #9
 80a354e:	bf18      	it	ne
 80a3550:	4608      	movne	r0, r1
 80a3552:	d108      	bne.n	80a3566 <__aeabi_fmul+0x15e>
 80a3554:	ea80 0001 	eor.w	r0, r0, r1
 80a3558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a355c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3564:	4770      	bx	lr
 80a3566:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a356a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a356e:	4770      	bx	lr

080a3570 <__aeabi_fdiv>:
 80a3570:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3574:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3578:	bf1e      	ittt	ne
 80a357a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a357e:	ea92 0f0c 	teqne	r2, ip
 80a3582:	ea93 0f0c 	teqne	r3, ip
 80a3586:	d069      	beq.n	80a365c <__aeabi_fdiv+0xec>
 80a3588:	eba2 0203 	sub.w	r2, r2, r3
 80a358c:	ea80 0c01 	eor.w	ip, r0, r1
 80a3590:	0249      	lsls	r1, r1, #9
 80a3592:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3596:	d037      	beq.n	80a3608 <__aeabi_fdiv+0x98>
 80a3598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a359c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a35a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a35a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a35a8:	428b      	cmp	r3, r1
 80a35aa:	bf38      	it	cc
 80a35ac:	005b      	lslcc	r3, r3, #1
 80a35ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a35b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a35b6:	428b      	cmp	r3, r1
 80a35b8:	bf24      	itt	cs
 80a35ba:	1a5b      	subcs	r3, r3, r1
 80a35bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a35c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a35c4:	bf24      	itt	cs
 80a35c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a35ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a35ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a35d2:	bf24      	itt	cs
 80a35d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a35d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a35dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a35e0:	bf24      	itt	cs
 80a35e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a35e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a35ea:	011b      	lsls	r3, r3, #4
 80a35ec:	bf18      	it	ne
 80a35ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a35f2:	d1e0      	bne.n	80a35b6 <__aeabi_fdiv+0x46>
 80a35f4:	2afd      	cmp	r2, #253	; 0xfd
 80a35f6:	f63f af50 	bhi.w	80a349a <__aeabi_fmul+0x92>
 80a35fa:	428b      	cmp	r3, r1
 80a35fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3600:	bf08      	it	eq
 80a3602:	f020 0001 	biceq.w	r0, r0, #1
 80a3606:	4770      	bx	lr
 80a3608:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a360c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3610:	327f      	adds	r2, #127	; 0x7f
 80a3612:	bfc2      	ittt	gt
 80a3614:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3618:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a361c:	4770      	bxgt	lr
 80a361e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3622:	f04f 0300 	mov.w	r3, #0
 80a3626:	3a01      	subs	r2, #1
 80a3628:	e737      	b.n	80a349a <__aeabi_fmul+0x92>
 80a362a:	f092 0f00 	teq	r2, #0
 80a362e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3632:	bf02      	ittt	eq
 80a3634:	0040      	lsleq	r0, r0, #1
 80a3636:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a363a:	3a01      	subeq	r2, #1
 80a363c:	d0f9      	beq.n	80a3632 <__aeabi_fdiv+0xc2>
 80a363e:	ea40 000c 	orr.w	r0, r0, ip
 80a3642:	f093 0f00 	teq	r3, #0
 80a3646:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a364a:	bf02      	ittt	eq
 80a364c:	0049      	lsleq	r1, r1, #1
 80a364e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3652:	3b01      	subeq	r3, #1
 80a3654:	d0f9      	beq.n	80a364a <__aeabi_fdiv+0xda>
 80a3656:	ea41 010c 	orr.w	r1, r1, ip
 80a365a:	e795      	b.n	80a3588 <__aeabi_fdiv+0x18>
 80a365c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3660:	ea92 0f0c 	teq	r2, ip
 80a3664:	d108      	bne.n	80a3678 <__aeabi_fdiv+0x108>
 80a3666:	0242      	lsls	r2, r0, #9
 80a3668:	f47f af7d 	bne.w	80a3566 <__aeabi_fmul+0x15e>
 80a366c:	ea93 0f0c 	teq	r3, ip
 80a3670:	f47f af70 	bne.w	80a3554 <__aeabi_fmul+0x14c>
 80a3674:	4608      	mov	r0, r1
 80a3676:	e776      	b.n	80a3566 <__aeabi_fmul+0x15e>
 80a3678:	ea93 0f0c 	teq	r3, ip
 80a367c:	d104      	bne.n	80a3688 <__aeabi_fdiv+0x118>
 80a367e:	024b      	lsls	r3, r1, #9
 80a3680:	f43f af4c 	beq.w	80a351c <__aeabi_fmul+0x114>
 80a3684:	4608      	mov	r0, r1
 80a3686:	e76e      	b.n	80a3566 <__aeabi_fmul+0x15e>
 80a3688:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a368c:	bf18      	it	ne
 80a368e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3692:	d1ca      	bne.n	80a362a <__aeabi_fdiv+0xba>
 80a3694:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3698:	f47f af5c 	bne.w	80a3554 <__aeabi_fmul+0x14c>
 80a369c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a36a0:	f47f af3c 	bne.w	80a351c <__aeabi_fmul+0x114>
 80a36a4:	e75f      	b.n	80a3566 <__aeabi_fmul+0x15e>
 80a36a6:	bf00      	nop

080a36a8 <atexit>:
 80a36a8:	2300      	movs	r3, #0
 80a36aa:	4601      	mov	r1, r0
 80a36ac:	461a      	mov	r2, r3
 80a36ae:	4618      	mov	r0, r3
 80a36b0:	f000 b842 	b.w	80a3738 <__register_exitproc>

080a36b4 <memcpy>:
 80a36b4:	440a      	add	r2, r1
 80a36b6:	4291      	cmp	r1, r2
 80a36b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80a36bc:	d100      	bne.n	80a36c0 <memcpy+0xc>
 80a36be:	4770      	bx	lr
 80a36c0:	b510      	push	{r4, lr}
 80a36c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a36c6:	4291      	cmp	r1, r2
 80a36c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a36cc:	d1f9      	bne.n	80a36c2 <memcpy+0xe>
 80a36ce:	bd10      	pop	{r4, pc}

080a36d0 <memset>:
 80a36d0:	4603      	mov	r3, r0
 80a36d2:	4402      	add	r2, r0
 80a36d4:	4293      	cmp	r3, r2
 80a36d6:	d100      	bne.n	80a36da <memset+0xa>
 80a36d8:	4770      	bx	lr
 80a36da:	f803 1b01 	strb.w	r1, [r3], #1
 80a36de:	e7f9      	b.n	80a36d4 <memset+0x4>

080a36e0 <srand>:
 80a36e0:	b538      	push	{r3, r4, r5, lr}
 80a36e2:	4b0d      	ldr	r3, [pc, #52]	; (80a3718 <srand+0x38>)
 80a36e4:	4604      	mov	r4, r0
 80a36e6:	681d      	ldr	r5, [r3, #0]
 80a36e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a36ea:	b97b      	cbnz	r3, 80a370c <srand+0x2c>
 80a36ec:	2018      	movs	r0, #24
 80a36ee:	f7fd f9a1 	bl	80a0a34 <malloc>
 80a36f2:	4a0a      	ldr	r2, [pc, #40]	; (80a371c <srand+0x3c>)
 80a36f4:	4b0a      	ldr	r3, [pc, #40]	; (80a3720 <srand+0x40>)
 80a36f6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a36f8:	e9c0 2300 	strd	r2, r3, [r0]
 80a36fc:	4b09      	ldr	r3, [pc, #36]	; (80a3724 <srand+0x44>)
 80a36fe:	2201      	movs	r2, #1
 80a3700:	6083      	str	r3, [r0, #8]
 80a3702:	230b      	movs	r3, #11
 80a3704:	8183      	strh	r3, [r0, #12]
 80a3706:	2300      	movs	r3, #0
 80a3708:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a370c:	2200      	movs	r2, #0
 80a370e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3710:	611c      	str	r4, [r3, #16]
 80a3712:	615a      	str	r2, [r3, #20]
 80a3714:	bd38      	pop	{r3, r4, r5, pc}
 80a3716:	bf00      	nop
 80a3718:	20000008 	.word	0x20000008
 80a371c:	abcd330e 	.word	0xabcd330e
 80a3720:	e66d1234 	.word	0xe66d1234
 80a3724:	0005deec 	.word	0x0005deec

080a3728 <strlen>:
 80a3728:	4603      	mov	r3, r0
 80a372a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a372e:	2a00      	cmp	r2, #0
 80a3730:	d1fb      	bne.n	80a372a <strlen+0x2>
 80a3732:	1a18      	subs	r0, r3, r0
 80a3734:	3801      	subs	r0, #1
 80a3736:	4770      	bx	lr

080a3738 <__register_exitproc>:
 80a3738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a373c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a37fc <__register_exitproc+0xc4>
 80a3740:	4606      	mov	r6, r0
 80a3742:	f8d8 0000 	ldr.w	r0, [r8]
 80a3746:	461f      	mov	r7, r3
 80a3748:	460d      	mov	r5, r1
 80a374a:	4691      	mov	r9, r2
 80a374c:	f000 f858 	bl	80a3800 <__retarget_lock_acquire_recursive>
 80a3750:	4b26      	ldr	r3, [pc, #152]	; (80a37ec <__register_exitproc+0xb4>)
 80a3752:	681c      	ldr	r4, [r3, #0]
 80a3754:	b934      	cbnz	r4, 80a3764 <__register_exitproc+0x2c>
 80a3756:	4c26      	ldr	r4, [pc, #152]	; (80a37f0 <__register_exitproc+0xb8>)
 80a3758:	601c      	str	r4, [r3, #0]
 80a375a:	4b26      	ldr	r3, [pc, #152]	; (80a37f4 <__register_exitproc+0xbc>)
 80a375c:	b113      	cbz	r3, 80a3764 <__register_exitproc+0x2c>
 80a375e:	681b      	ldr	r3, [r3, #0]
 80a3760:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3764:	6863      	ldr	r3, [r4, #4]
 80a3766:	2b1f      	cmp	r3, #31
 80a3768:	dd07      	ble.n	80a377a <__register_exitproc+0x42>
 80a376a:	f8d8 0000 	ldr.w	r0, [r8]
 80a376e:	f000 f849 	bl	80a3804 <__retarget_lock_release_recursive>
 80a3772:	f04f 30ff 	mov.w	r0, #4294967295
 80a3776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a377a:	b35e      	cbz	r6, 80a37d4 <__register_exitproc+0x9c>
 80a377c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3780:	b988      	cbnz	r0, 80a37a6 <__register_exitproc+0x6e>
 80a3782:	4b1d      	ldr	r3, [pc, #116]	; (80a37f8 <__register_exitproc+0xc0>)
 80a3784:	b923      	cbnz	r3, 80a3790 <__register_exitproc+0x58>
 80a3786:	f8d8 0000 	ldr.w	r0, [r8]
 80a378a:	f000 f83a 	bl	80a3802 <__retarget_lock_release>
 80a378e:	e7f0      	b.n	80a3772 <__register_exitproc+0x3a>
 80a3790:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3794:	f7fd f94e 	bl	80a0a34 <malloc>
 80a3798:	2800      	cmp	r0, #0
 80a379a:	d0f4      	beq.n	80a3786 <__register_exitproc+0x4e>
 80a379c:	2300      	movs	r3, #0
 80a379e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a37a2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a37a6:	2201      	movs	r2, #1
 80a37a8:	6863      	ldr	r3, [r4, #4]
 80a37aa:	2e02      	cmp	r6, #2
 80a37ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a37b0:	fa02 f203 	lsl.w	r2, r2, r3
 80a37b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a37b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a37bc:	ea43 0302 	orr.w	r3, r3, r2
 80a37c0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a37c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a37c8:	bf02      	ittt	eq
 80a37ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a37ce:	431a      	orreq	r2, r3
 80a37d0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a37d4:	6863      	ldr	r3, [r4, #4]
 80a37d6:	f8d8 0000 	ldr.w	r0, [r8]
 80a37da:	1c5a      	adds	r2, r3, #1
 80a37dc:	3302      	adds	r3, #2
 80a37de:	6062      	str	r2, [r4, #4]
 80a37e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a37e4:	f000 f80e 	bl	80a3804 <__retarget_lock_release_recursive>
 80a37e8:	2000      	movs	r0, #0
 80a37ea:	e7c4      	b.n	80a3776 <__register_exitproc+0x3e>
 80a37ec:	2000061c 	.word	0x2000061c
 80a37f0:	20000590 	.word	0x20000590
 80a37f4:	00000000 	.word	0x00000000
 80a37f8:	080a0a35 	.word	0x080a0a35
 80a37fc:	2000006c 	.word	0x2000006c

080a3800 <__retarget_lock_acquire_recursive>:
 80a3800:	4770      	bx	lr

080a3802 <__retarget_lock_release>:
 80a3802:	4770      	bx	lr

080a3804 <__retarget_lock_release_recursive>:
 80a3804:	4770      	bx	lr

080a3806 <link_code_end>:
	...

080a3808 <dynalib_user>:
 80a3808:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a3818:	0000 0000 6553 736e 726f 7220 6165 6964     ....Sensor readi
 80a3828:	676e 7420 7365 2174 5300 6e65 6f73 2072     ng test!.Sensor 
 80a3838:	4844 3a54 0020 7548 656d 6164 3a64 0020     DHT: .Humedad: .
 80a3848:	6554 706d 7265 7461 7275 3a61 0020 7250     Temperatura: .Pr
 80a3858:	6d6f 6465 6f69 7420 6d65 6570 6172 7574     omedio temperatu
 80a3868:	6172 203a 5300 6e65 6f73 2072 554c 3a58     ra: .Sensor LUX:
 80a3878:	0020 754c 3a7a 0020 616e 006e 6e69 0066      .Luz: .nan.inf.
 80a3888:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
 80a3898:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80a38a8:	7463 6d69 0065 0000                         ctime...

080a38b0 <_ZTV9IPAddress>:
	...
 80a38b8:	0ee5 080a 0ed5 080a 0ed7 080a               ............

080a38c4 <_ZTV9USBSerial>:
	...
 80a38cc:	0fa3 080a 1009 080a 0fe1 080a 0ab9 080a     ................
 80a38dc:	0fd3 080a 0fa5 080a 0fb5 080a 1003 080a     ................
 80a38ec:	0fc5 080a 0f9d 080a                         ........

080a38f4 <_ZTV11USARTSerial>:
	...
 80a38fc:	1139 080a 11a3 080a 117f 080a 0ab9 080a     9...............
 80a390c:	114f 080a 116b 080a 115d 080a 1179 080a     O...k...]...y...
 80a391c:	113b 080a 1141 080a                         ;...A...

080a3924 <_ZTV7TwoWire>:
	...
 80a392c:	1225 080a 126f 080a 1247 080a 1227 080a     %...o...G...'...
 80a393c:	124f 080a 1257 080a 125f 080a 1267 080a     O...W..._...g...

080a394c <_ZTVN5spark9WiFiClassE>:
	...
 80a3954:	1337 080a 132d 080a 1323 080a 12a1 080a     7...-...#.......
 80a3964:	0d31 080a 1317 080a 1395 080a 139d 080a     1...............
 80a3974:	130b 080a 1303 080a 12f9 080a 12ef 080a     ................
 80a3984:	12ab 080a                                   ....

080a3988 <_ZTVN5spark12NetworkClassE>:
	...
 80a3990:	1355 080a 135f 080a 1369 080a 1373 080a     U..._...i...s...
 80a39a0:	137d 080a 1389 080a 1395 080a 139d 080a     }...............
 80a39b0:	13a5 080a 13b1 080a 13b9 080a 13c3 080a     ................
 80a39c0:	13cd 080a                                   ....

080a39c4 <_ZSt7nothrow>:
 80a39c4:	0000 0000 6f70 0077 0000 0000               ....pow.....

080a39d0 <TWO52>:
 80a39d0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a39e0 <link_const_variable_data_end>:
 80a39e0:	080a022d 	.word	0x080a022d
 80a39e4:	080a0a95 	.word	0x080a0a95
 80a39e8:	080a0d3d 	.word	0x080a0d3d
 80a39ec:	080a0d4d 	.word	0x080a0d4d
 80a39f0:	080a0d69 	.word	0x080a0d69
 80a39f4:	080a1341 	.word	0x080a1341
 80a39f8:	080a141d 	.word	0x080a141d
 80a39fc:	080a1515 	.word	0x080a1515
