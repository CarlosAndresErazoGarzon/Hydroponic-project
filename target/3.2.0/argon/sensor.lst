
c:/Users/anes_/Documents/Hidroponicos/Hydroponic-project/sensor/target/3.2.0/argon/sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a40  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b7a60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e62c  000b7a64  0001e62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000154  2003e69c  2003e69c  0002e69c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b7ad4  000b7ad4  00027ad4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b7afc  000b7afc  00027afc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ff308  00000000  00000000  00027b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00011bfd  00000000  00000000  00126e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00032215  00000000  00000000  00138a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000028a0  00000000  00000000  0016ac1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000094b8  00000000  00000000  0016d4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038122  00000000  00000000  00176972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00039b8f  00000000  00000000  001aea94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00124dc1  00000000  00000000  001e8623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000074f0  00000000  00000000  0030d3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 faff 	bl	b7634 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fb07 	bl	b7650 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e62c 	.word	0x2003e62c
   b404c:	000b7a64 	.word	0x000b7a64
   b4050:	2003e69c 	.word	0x2003e69c
   b4054:	2003e69c 	.word	0x2003e69c
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 f8a3 	bl	b51ac <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7a3c 	.word	0x000b7a3c
   b4080:	000b7a60 	.word	0x000b7a60

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b814 	b.w	b40b0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f827 	bl	b40dc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 b843 	b.w	b511c <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 be2d 	b.w	b4cf4 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 be33 	b.w	b4d04 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:

DHT dht(DHTPIN, DHTYPE);


// setup() runs once, when the device is first turned on.
void setup() {
   b40b0:	b508      	push	{r3, lr}
	Serial.begin(9600); 
   b40b2:	f001 f983 	bl	b53bc <_Z16_fetch_usbserialv>
   b40b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40ba:	f001 f973 	bl	b53a4 <_ZN9USBSerial5beginEl>
	Serial.println("DHTxx test!");
   b40be:	f001 f97d 	bl	b53bc <_Z16_fetch_usbserialv>
   b40c2:	4904      	ldr	r1, [pc, #16]	; (b40d4 <setup+0x24>)
   b40c4:	f000 fedb 	bl	b4e7e <_ZN5Print7printlnEPKc>

	dht.begin();

}
   b40c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dht.begin();
   b40cc:	4802      	ldr	r0, [pc, #8]	; (b40d8 <setup+0x28>)
   b40ce:	f000 b8b1 	b.w	b4234 <_ZN3DHT5beginEv>
   b40d2:	bf00      	nop
   b40d4:	000b77ac 	.word	0x000b77ac
   b40d8:	2003e69c 	.word	0x2003e69c

000b40dc <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b40dc:	b508      	push	{r3, lr}


// Reading temperature or humidity takes about 250 milliseconds!
// Sensor readings may also be up to 2 seconds 'old' (its a 
// very slow sensor)
	float h = dht.getHumidity();
   b40de:	482e      	ldr	r0, [pc, #184]	; (b4198 <loop+0xbc>)
void loop() {
   b40e0:	ed2d 8b04 	vpush	{d8-d9}
	float h = dht.getHumidity();
   b40e4:	f000 fc1a 	bl	b491c <_ZN3DHT11getHumidityEv>
// Read temperature as Celsius
	float t = dht.getTempCelcius();
   b40e8:	482b      	ldr	r0, [pc, #172]	; (b4198 <loop+0xbc>)
	float h = dht.getHumidity();
   b40ea:	eef0 8a40 	vmov.f32	s17, s0
	float t = dht.getTempCelcius();
   b40ee:	f000 fbe7 	bl	b48c0 <_ZN3DHT14getTempCelciusEv>
  
// Check if any reads failed and exit early (to try again).
	if (isnan(h) || isnan(t)) {
   b40f2:	eef4 8a40 	vcmp.f32	s17, s0
   b40f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float t = dht.getTempCelcius();
   b40fa:	eeb0 8a40 	vmov.f32	s16, s0
	if (isnan(h) || isnan(t)) {
   b40fe:	d708      	bvc.n	b4112 <loop+0x36>
		Serial.println("Failed to read from DHT sensor!");
   b4100:	f001 f95c 	bl	b53bc <_Z16_fetch_usbserialv>
	Serial.println(dp);

	//Particle.publish("temperature", String(h)); // publish to cloud YA FUNCIONA!!!
  delay(5000);

   b4104:	ecbd 8b04 	vpop	{d8-d9}
		Serial.println("Failed to read from DHT sensor!");
   b4108:	4924      	ldr	r1, [pc, #144]	; (b419c <loop+0xc0>)
   b410a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Serial.println("Failed to read from DHT sensor!");
   b410e:	f000 beb6 	b.w	b4e7e <_ZN5Print7printlnEPKc>
	float hi = dht.getHeatIndex();
   b4112:	4821      	ldr	r0, [pc, #132]	; (b4198 <loop+0xbc>)
   b4114:	f000 fc04 	bl	b4920 <_ZN3DHT12getHeatIndexEv>
	float dp = dht.getDewPoint();
   b4118:	481f      	ldr	r0, [pc, #124]	; (b4198 <loop+0xbc>)
	float hi = dht.getHeatIndex();
   b411a:	eef0 9a40 	vmov.f32	s19, s0
	float dp = dht.getDewPoint();
   b411e:	f000 fc27 	bl	b4970 <_ZN3DHT11getDewPointEv>
   b4122:	eeb0 9a40 	vmov.f32	s18, s0
  Serial.print("Humedad: ");
   b4126:	f001 f949 	bl	b53bc <_Z16_fetch_usbserialv>
   b412a:	491d      	ldr	r1, [pc, #116]	; (b41a0 <loop+0xc4>)
   b412c:	f000 fe94 	bl	b4e58 <_ZN5Print5printEPKc>
	Serial.println(h); 
   b4130:	f001 f944 	bl	b53bc <_Z16_fetch_usbserialv>
   b4134:	eeb0 0a68 	vmov.f32	s0, s17
   b4138:	2102      	movs	r1, #2
   b413a:	f000 ff9c 	bl	b5076 <_ZN5Print7printlnEfi>
  Serial.print("Temperatura: ");
   b413e:	f001 f93d 	bl	b53bc <_Z16_fetch_usbserialv>
   b4142:	4918      	ldr	r1, [pc, #96]	; (b41a4 <loop+0xc8>)
   b4144:	f000 fe88 	bl	b4e58 <_ZN5Print5printEPKc>
	Serial.println(t); 
   b4148:	f001 f938 	bl	b53bc <_Z16_fetch_usbserialv>
   b414c:	eeb0 0a48 	vmov.f32	s0, s16
   b4150:	2102      	movs	r1, #2
   b4152:	f000 ff90 	bl	b5076 <_ZN5Print7printlnEfi>
  Serial.print("Heat index: ");
   b4156:	f001 f931 	bl	b53bc <_Z16_fetch_usbserialv>
   b415a:	4913      	ldr	r1, [pc, #76]	; (b41a8 <loop+0xcc>)
   b415c:	f000 fe7c 	bl	b4e58 <_ZN5Print5printEPKc>
	Serial.println(hi);
   b4160:	f001 f92c 	bl	b53bc <_Z16_fetch_usbserialv>
   b4164:	eeb0 0a69 	vmov.f32	s0, s19
   b4168:	2102      	movs	r1, #2
   b416a:	f000 ff84 	bl	b5076 <_ZN5Print7printlnEfi>
  Serial.print("Dew Point: ");
   b416e:	f001 f925 	bl	b53bc <_Z16_fetch_usbserialv>
   b4172:	490e      	ldr	r1, [pc, #56]	; (b41ac <loop+0xd0>)
   b4174:	f000 fe70 	bl	b4e58 <_ZN5Print5printEPKc>
	Serial.println(dp);
   b4178:	f001 f920 	bl	b53bc <_Z16_fetch_usbserialv>
   b417c:	eeb0 0a49 	vmov.f32	s0, s18
   b4180:	2102      	movs	r1, #2
   b4182:	f000 ff78 	bl	b5076 <_ZN5Print7printlnEfi>
   b4186:	ecbd 8b04 	vpop	{d8-d9}
  delay(5000);
   b418a:	f241 3088 	movw	r0, #5000	; 0x1388
   b418e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(5000);
   b4192:	f000 bf97 	b.w	b50c4 <delay>
   b4196:	bf00      	nop
   b4198:	2003e69c 	.word	0x2003e69c
   b419c:	000b77b8 	.word	0x000b77b8
   b41a0:	000b77d8 	.word	0x000b77d8
   b41a4:	000b77e2 	.word	0x000b77e2
   b41a8:	000b77f0 	.word	0x000b77f0
   b41ac:	000b77fd 	.word	0x000b77fd

000b41b0 <_GLOBAL__sub_I_dht>:
DHT dht(DHTPIN, DHTYPE);
   b41b0:	4802      	ldr	r0, [pc, #8]	; (b41bc <_GLOBAL__sub_I_dht+0xc>)
   b41b2:	2306      	movs	r3, #6
   b41b4:	220b      	movs	r2, #11
   b41b6:	2108      	movs	r1, #8
   b41b8:	f000 b835 	b.w	b4226 <_ZN3DHTC1Ehhh>
   b41bc:	2003e69c 	.word	0x2003e69c

000b41c0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b41c0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b41c2:	6803      	ldr	r3, [r0, #0]
   b41c4:	2b2f      	cmp	r3, #47	; 0x2f
{
   b41c6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b41c8:	d904      	bls.n	b41d4 <nrf_gpio_pin_port_decode+0x14>
   b41ca:	4a07      	ldr	r2, [pc, #28]	; (b41e8 <nrf_gpio_pin_port_decode+0x28>)
   b41cc:	2100      	movs	r1, #0
   b41ce:	200a      	movs	r0, #10
   b41d0:	f000 fcfc 	bl	b4bcc <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b41d4:	6823      	ldr	r3, [r4, #0]
   b41d6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b41d8:	bf83      	ittte	hi
   b41da:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b41de:	4803      	ldrhi	r0, [pc, #12]	; (b41ec <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b41e0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b41e2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b41e6:	bd10      	pop	{r4, pc}
   b41e8:	000b4a0d 	.word	0x000b4a0d
   b41ec:	50000300 	.word	0x50000300

000b41f0 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   b41f0:	b507      	push	{r0, r1, r2, lr}
   b41f2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b41f4:	a801      	add	r0, sp, #4
   b41f6:	f7ff ffe3 	bl	b41c0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b41fa:	9a01      	ldr	r2, [sp, #4]
   b41fc:	2301      	movs	r3, #1
   b41fe:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b4200:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   b4204:	b003      	add	sp, #12
   b4206:	f85d fb04 	ldr.w	pc, [sp], #4

000b420a <nrf_gpio_pin_read>:
{
   b420a:	b507      	push	{r0, r1, r2, lr}
   b420c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b420e:	a801      	add	r0, sp, #4
   b4210:	f7ff ffd6 	bl	b41c0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b4214:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   b4216:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b421a:	40d8      	lsrs	r0, r3
}
   b421c:	f000 0001 	and.w	r0, r0, #1
   b4220:	b003      	add	sp, #12
   b4222:	f85d fb04 	ldr.w	pc, [sp], #4

000b4226 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b4226:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b4228:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b422a:	2301      	movs	r3, #1
	_pin = pin;
   b422c:	7181      	strb	r1, [r0, #6]
	_type = type;
   b422e:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b4230:	7403      	strb	r3, [r0, #16]
}
   b4232:	bd10      	pop	{r4, pc}

000b4234 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b4234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4238:	4604      	mov	r4, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b423a:	4f1c      	ldr	r7, [pc, #112]	; (b42ac <_ZN3DHT5beginEv+0x78>)
// set up the pins!
	pinMode(_pin, INPUT);
   b423c:	7980      	ldrb	r0, [r0, #6]
   b423e:	4e1c      	ldr	r6, [pc, #112]	; (b42b0 <_ZN3DHT5beginEv+0x7c>)
   b4240:	2100      	movs	r1, #0
   b4242:	f001 fa9d 	bl	b5780 <pinMode>
	pinSetFast(_pin);
   b4246:	79a5      	ldrb	r5, [r4, #6]
   b4248:	783b      	ldrb	r3, [r7, #0]
   b424a:	f3bf 8f5b 	dmb	ish
   b424e:	f013 0f01 	tst.w	r3, #1
   b4252:	d109      	bne.n	b4268 <_ZN3DHT5beginEv+0x34>
   b4254:	4638      	mov	r0, r7
   b4256:	f7ff ff22 	bl	b409e <__cxa_guard_acquire>
   b425a:	b128      	cbz	r0, b4268 <_ZN3DHT5beginEv+0x34>
   b425c:	f000 fbae 	bl	b49bc <HAL_Pin_Map>
   b4260:	6030      	str	r0, [r6, #0]
   b4262:	4638      	mov	r0, r7
   b4264:	f7ff ff20 	bl	b40a8 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4268:	6833      	ldr	r3, [r6, #0]
   b426a:	012d      	lsls	r5, r5, #4
   b426c:	f813 8005 	ldrb.w	r8, [r3, r5]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4270:	783b      	ldrb	r3, [r7, #0]
   b4272:	f3bf 8f5b 	dmb	ish
   b4276:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4278:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b427c:	d409      	bmi.n	b4292 <_ZN3DHT5beginEv+0x5e>
   b427e:	480b      	ldr	r0, [pc, #44]	; (b42ac <_ZN3DHT5beginEv+0x78>)
   b4280:	f7ff ff0d 	bl	b409e <__cxa_guard_acquire>
   b4284:	b128      	cbz	r0, b4292 <_ZN3DHT5beginEv+0x5e>
   b4286:	f000 fb99 	bl	b49bc <HAL_Pin_Map>
   b428a:	6030      	str	r0, [r6, #0]
   b428c:	4807      	ldr	r0, [pc, #28]	; (b42ac <_ZN3DHT5beginEv+0x78>)
   b428e:	f7ff ff0b 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4292:	6833      	ldr	r3, [r6, #0]
   b4294:	441d      	add	r5, r3
   b4296:	7868      	ldrb	r0, [r5, #1]
   b4298:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b429c:	ea40 0008 	orr.w	r0, r0, r8
   b42a0:	f7ff ffa6 	bl	b41f0 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   b42a4:	2300      	movs	r3, #0
   b42a6:	60e3      	str	r3, [r4, #12]
}
   b42a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b42ac:	2003e6b0 	.word	0x2003e6b0
   b42b0:	2003e6b4 	.word	0x2003e6b4

000b42b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   b42b4:	b510      	push	{r4, lr}
   b42b6:	ed2d 8b02 	vpush	{d8}
   b42ba:	ee10 4a10 	vmov	r4, s0
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b42be:	f002 fe01 	bl	b6ec4 <__aeabi_i2d>
   b42c2:	ec41 0b18 	vmov	d8, r0, r1
   b42c6:	4620      	mov	r0, r4
   b42c8:	f002 fe0e 	bl	b6ee8 <__aeabi_f2d>
   b42cc:	eeb0 1a48 	vmov.f32	s2, s16
   b42d0:	eef0 1a68 	vmov.f32	s3, s17
    }
   b42d4:	ecbd 8b02 	vpop	{d8}
      return pow(__type(__x), __type(__y));
   b42d8:	ec41 0b10 	vmov	d0, r0, r1
    }
   b42dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return pow(__type(__x), __type(__y));
   b42e0:	f001 bade 	b.w	b58a0 <pow>
   b42e4:	0000      	movs	r0, r0
	...

000b42e8 <_ZN3DHT16computeHeatIndexEff>:
		}
	}
	return NAN;
}

float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   b42e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
   b42ec:	ee10 0a10 	vmov	r0, s0
float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   b42f0:	ed2d 8b02 	vpush	{d8}
   b42f4:	eeb0 8a60 	vmov.f32	s16, s1
   b42f8:	eef0 8a40 	vmov.f32	s17, s0
		 2.04901523 * tempFahrenheit + 
   b42fc:	f002 fdf4 	bl	b6ee8 <__aeabi_f2d>
   b4300:	4604      	mov	r4, r0
		10.14333127 * percentHumidity +
   b4302:	ee18 0a10 	vmov	r0, s16
		 2.04901523 * tempFahrenheit + 
   b4306:	460d      	mov	r5, r1
		10.14333127 * percentHumidity +
   b4308:	f002 fdee 	bl	b6ee8 <__aeabi_f2d>
		 2.04901523 * tempFahrenheit + 
   b430c:	a354      	add	r3, pc, #336	; (adr r3, b4460 <_ZN3DHT16computeHeatIndexEff+0x178>)
   b430e:	e9d3 2300 	ldrd	r2, r3, [r3]
		10.14333127 * percentHumidity +
   b4312:	4606      	mov	r6, r0
   b4314:	460f      	mov	r7, r1
		 2.04901523 * tempFahrenheit + 
   b4316:	4620      	mov	r0, r4
   b4318:	4629      	mov	r1, r5
   b431a:	f002 fe3d 	bl	b6f98 <__aeabi_dmul>
	return -42.379 + 
   b431e:	a352      	add	r3, pc, #328	; (adr r3, b4468 <_ZN3DHT16computeHeatIndexEff+0x180>)
   b4320:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4324:	f002 fc80 	bl	b6c28 <__aeabi_dsub>
		10.14333127 * percentHumidity +
   b4328:	a351      	add	r3, pc, #324	; (adr r3, b4470 <_ZN3DHT16computeHeatIndexEff+0x188>)
   b432a:	e9d3 2300 	ldrd	r2, r3, [r3]
	return -42.379 + 
   b432e:	4680      	mov	r8, r0
   b4330:	4689      	mov	r9, r1
		10.14333127 * percentHumidity +
   b4332:	4630      	mov	r0, r6
   b4334:	4639      	mov	r1, r7
   b4336:	f002 fe2f 	bl	b6f98 <__aeabi_dmul>
   b433a:	4602      	mov	r2, r0
   b433c:	460b      	mov	r3, r1
		 2.04901523 * tempFahrenheit + 
   b433e:	4640      	mov	r0, r8
   b4340:	4649      	mov	r1, r9
   b4342:	f002 fc73 	bl	b6c2c <__adddf3>
		-0.22475541 * tempFahrenheit * percentHumidity +
   b4346:	a34c      	add	r3, pc, #304	; (adr r3, b4478 <_ZN3DHT16computeHeatIndexEff+0x190>)
   b4348:	e9d3 2300 	ldrd	r2, r3, [r3]
		 2.04901523 * tempFahrenheit + 
   b434c:	4680      	mov	r8, r0
   b434e:	4689      	mov	r9, r1
		-0.22475541 * tempFahrenheit * percentHumidity +
   b4350:	4620      	mov	r0, r4
   b4352:	4629      	mov	r1, r5
   b4354:	f002 fe20 	bl	b6f98 <__aeabi_dmul>
   b4358:	4632      	mov	r2, r6
   b435a:	463b      	mov	r3, r7
   b435c:	f002 fe1c 	bl	b6f98 <__aeabi_dmul>
   b4360:	4602      	mov	r2, r0
   b4362:	460b      	mov	r3, r1
		10.14333127 * percentHumidity +
   b4364:	4640      	mov	r0, r8
   b4366:	4649      	mov	r1, r9
   b4368:	f002 fc60 	bl	b6c2c <__adddf3>
		-0.00683783 * pow(tempFahrenheit, 2) +
   b436c:	eeb0 0a68 	vmov.f32	s0, s17
		10.14333127 * percentHumidity +
   b4370:	4680      	mov	r8, r0
		-0.00683783 * pow(tempFahrenheit, 2) +
   b4372:	2002      	movs	r0, #2
		10.14333127 * percentHumidity +
   b4374:	4689      	mov	r9, r1
		-0.00683783 * pow(tempFahrenheit, 2) +
   b4376:	f7ff ff9d 	bl	b42b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   b437a:	a341      	add	r3, pc, #260	; (adr r3, b4480 <_ZN3DHT16computeHeatIndexEff+0x198>)
   b437c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4380:	ec51 0b10 	vmov	r0, r1, d0
   b4384:	f002 fe08 	bl	b6f98 <__aeabi_dmul>
		-0.22475541 * tempFahrenheit * percentHumidity +
   b4388:	4642      	mov	r2, r8
   b438a:	464b      	mov	r3, r9
   b438c:	f002 fc4e 	bl	b6c2c <__adddf3>
		-0.05481717 * pow(percentHumidity, 2) + 
   b4390:	eeb0 0a48 	vmov.f32	s0, s16
		-0.22475541 * tempFahrenheit * percentHumidity +
   b4394:	4680      	mov	r8, r0
		-0.05481717 * pow(percentHumidity, 2) + 
   b4396:	2002      	movs	r0, #2
		-0.22475541 * tempFahrenheit * percentHumidity +
   b4398:	4689      	mov	r9, r1
		-0.05481717 * pow(percentHumidity, 2) + 
   b439a:	f7ff ff8b 	bl	b42b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   b439e:	a33a      	add	r3, pc, #232	; (adr r3, b4488 <_ZN3DHT16computeHeatIndexEff+0x1a0>)
   b43a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43a4:	ec51 0b10 	vmov	r0, r1, d0
   b43a8:	f002 fdf6 	bl	b6f98 <__aeabi_dmul>
		-0.00683783 * pow(tempFahrenheit, 2) +
   b43ac:	4642      	mov	r2, r8
   b43ae:	464b      	mov	r3, r9
   b43b0:	f002 fc3c 	bl	b6c2c <__adddf3>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   b43b4:	eeb0 0a68 	vmov.f32	s0, s17
		-0.00683783 * pow(tempFahrenheit, 2) +
   b43b8:	4680      	mov	r8, r0
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   b43ba:	2002      	movs	r0, #2
		-0.00683783 * pow(tempFahrenheit, 2) +
   b43bc:	4689      	mov	r9, r1
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   b43be:	f7ff ff79 	bl	b42b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   b43c2:	a333      	add	r3, pc, #204	; (adr r3, b4490 <_ZN3DHT16computeHeatIndexEff+0x1a8>)
   b43c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43c8:	ec51 0b10 	vmov	r0, r1, d0
   b43cc:	f002 fde4 	bl	b6f98 <__aeabi_dmul>
   b43d0:	4632      	mov	r2, r6
   b43d2:	463b      	mov	r3, r7
   b43d4:	f002 fde0 	bl	b6f98 <__aeabi_dmul>
		-0.05481717 * pow(percentHumidity, 2) + 
   b43d8:	4642      	mov	r2, r8
   b43da:	464b      	mov	r3, r9
   b43dc:	f002 fc26 	bl	b6c2c <__adddf3>
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   b43e0:	eeb0 0a48 	vmov.f32	s0, s16
		-0.05481717 * pow(percentHumidity, 2) + 
   b43e4:	4606      	mov	r6, r0
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   b43e6:	2002      	movs	r0, #2
		-0.05481717 * pow(percentHumidity, 2) + 
   b43e8:	460f      	mov	r7, r1
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   b43ea:	f7ff ff63 	bl	b42b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   b43ee:	ec59 8b10 	vmov	r8, r9, d0
   b43f2:	a329      	add	r3, pc, #164	; (adr r3, b4498 <_ZN3DHT16computeHeatIndexEff+0x1b0>)
   b43f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43f8:	4620      	mov	r0, r4
   b43fa:	4629      	mov	r1, r5
   b43fc:	f002 fdcc 	bl	b6f98 <__aeabi_dmul>
   b4400:	4642      	mov	r2, r8
   b4402:	464b      	mov	r3, r9
   b4404:	f002 fdc8 	bl	b6f98 <__aeabi_dmul>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   b4408:	4632      	mov	r2, r6
   b440a:	463b      	mov	r3, r7
   b440c:	f002 fc0e 	bl	b6c2c <__adddf3>
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   b4410:	eeb0 0a68 	vmov.f32	s0, s17
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   b4414:	4604      	mov	r4, r0
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   b4416:	2002      	movs	r0, #2
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
   b4418:	460d      	mov	r5, r1
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   b441a:	f7ff ff4b 	bl	b42b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   b441e:	2002      	movs	r0, #2
   b4420:	ec59 8b10 	vmov	r8, r9, d0
   b4424:	eeb0 0a48 	vmov.f32	s0, s16
   b4428:	f7ff ff44 	bl	b42b4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
   b442c:	ec57 6b10 	vmov	r6, r7, d0
   b4430:	a31b      	add	r3, pc, #108	; (adr r3, b44a0 <_ZN3DHT16computeHeatIndexEff+0x1b8>)
   b4432:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4436:	4640      	mov	r0, r8
   b4438:	4649      	mov	r1, r9
   b443a:	f002 fdad 	bl	b6f98 <__aeabi_dmul>
   b443e:	4632      	mov	r2, r6
   b4440:	463b      	mov	r3, r7
   b4442:	f002 fda9 	bl	b6f98 <__aeabi_dmul>
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
   b4446:	4622      	mov	r2, r4
   b4448:	462b      	mov	r3, r5
   b444a:	f002 fbef 	bl	b6c2c <__adddf3>
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   b444e:	f003 f89b 	bl	b7588 <__aeabi_d2f>
}
   b4452:	ecbd 8b02 	vpop	{d8}
   b4456:	ee00 0a10 	vmov	s0, r0
   b445a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b445e:	bf00      	nop
   b4460:	18ced8ec 	.word	0x18ced8ec
   b4464:	40006462 	.word	0x40006462
   b4468:	126e978d 	.word	0x126e978d
   b446c:	40453083 	.word	0x40453083
   b4470:	b75a49cd 	.word	0xb75a49cd
   b4474:	40244962 	.word	0x40244962
   b4478:	07c647f8 	.word	0x07c647f8
   b447c:	bfccc4c9 	.word	0xbfccc4c9
   b4480:	039c16cc 	.word	0x039c16cc
   b4484:	bf7c01fc 	.word	0xbf7c01fc
   b4488:	00d18c24 	.word	0x00d18c24
   b448c:	bfac10ff 	.word	0xbfac10ff
   b4490:	8760dce5 	.word	0x8760dce5
   b4494:	3f5421b5 	.word	0x3f5421b5
   b4498:	013330da 	.word	0x013330da
   b449c:	3f4bf1f9 	.word	0x3f4bf1f9
   b44a0:	11d3bd01 	.word	0x11d3bd01
   b44a4:	bec0b17e 	.word	0xbec0b17e

000b44a8 <_ZN3DHT15computeDewPointEff>:

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
   b44a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b44ac:	ee10 0a10 	vmov	r0, s0
   b44b0:	ed2d 8b02 	vpush	{d8}
   b44b4:	eeb0 8a60 	vmov.f32	s16, s1
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   b44b8:	f002 fd16 	bl	b6ee8 <__aeabi_f2d>
  { return __builtin_logf(__x); }
   b44bc:	ed9f 0a28 	vldr	s0, [pc, #160]	; b4560 <_ZN3DHT15computeDewPointEff+0xb8>
   b44c0:	ee88 0a00 	vdiv.f32	s0, s16, s0
   b44c4:	4604      	mov	r4, r0
   b44c6:	460d      	mov	r5, r1
   b44c8:	f001 fabc 	bl	b5a44 <logf>
   b44cc:	a320      	add	r3, pc, #128	; (adr r3, b4550 <_ZN3DHT15computeDewPointEff+0xa8>)
   b44ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b44d2:	4620      	mov	r0, r4
   b44d4:	4629      	mov	r1, r5
   b44d6:	ee10 6a10 	vmov	r6, s0
   b44da:	f002 fd5d 	bl	b6f98 <__aeabi_dmul>
   b44de:	a31e      	add	r3, pc, #120	; (adr r3, b4558 <_ZN3DHT15computeDewPointEff+0xb0>)
   b44e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b44e4:	4680      	mov	r8, r0
   b44e6:	4689      	mov	r9, r1
   b44e8:	4620      	mov	r0, r4
   b44ea:	4629      	mov	r1, r5
   b44ec:	f002 fb9e 	bl	b6c2c <__adddf3>
   b44f0:	4602      	mov	r2, r0
   b44f2:	460b      	mov	r3, r1
   b44f4:	4640      	mov	r0, r8
   b44f6:	4649      	mov	r1, r9
   b44f8:	f002 fe78 	bl	b71ec <__aeabi_ddiv>
   b44fc:	4604      	mov	r4, r0
   b44fe:	4630      	mov	r0, r6
   b4500:	460d      	mov	r5, r1
   b4502:	f002 fcf1 	bl	b6ee8 <__aeabi_f2d>
   b4506:	4602      	mov	r2, r0
   b4508:	460b      	mov	r3, r1
   b450a:	4620      	mov	r0, r4
   b450c:	4629      	mov	r1, r5
   b450e:	f002 fb8d 	bl	b6c2c <__adddf3>
	double Td = (b * tC) / (a - tC);
   b4512:	a311      	add	r3, pc, #68	; (adr r3, b4558 <_ZN3DHT15computeDewPointEff+0xb0>)
   b4514:	e9d3 2300 	ldrd	r2, r3, [r3]
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   b4518:	4606      	mov	r6, r0
   b451a:	460f      	mov	r7, r1
	double Td = (b * tC) / (a - tC);
   b451c:	f002 fd3c 	bl	b6f98 <__aeabi_dmul>
   b4520:	4632      	mov	r2, r6
   b4522:	4604      	mov	r4, r0
   b4524:	460d      	mov	r5, r1
   b4526:	463b      	mov	r3, r7
   b4528:	a109      	add	r1, pc, #36	; (adr r1, b4550 <_ZN3DHT15computeDewPointEff+0xa8>)
   b452a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b452e:	f002 fb7b 	bl	b6c28 <__aeabi_dsub>
   b4532:	4602      	mov	r2, r0
   b4534:	460b      	mov	r3, r1
   b4536:	4620      	mov	r0, r4
   b4538:	4629      	mov	r1, r5
   b453a:	f002 fe57 	bl	b71ec <__aeabi_ddiv>
	return Td;
   b453e:	f003 f823 	bl	b7588 <__aeabi_d2f>
}
   b4542:	ecbd 8b02 	vpop	{d8}
   b4546:	ee00 0a10 	vmov	s0, r0
   b454a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b454e:	bf00      	nop
   b4550:	4189374c 	.word	0x4189374c
   b4554:	40314560 	.word	0x40314560
   b4558:	66666666 	.word	0x66666666
   b455c:	406db666 	.word	0x406db666
   b4560:	42c80000 	.word	0x42c80000

000b4564 <_ZN3DHT4readEv>:

boolean DHT::read(void) {
   b4564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4568:	4604      	mov	r4, r0
   b456a:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b456c:	f000 fa56 	bl	b4a1c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b4570:	68e3      	ldr	r3, [r4, #12]
   b4572:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b4574:	bf84      	itt	hi
   b4576:	2300      	movhi	r3, #0
   b4578:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b457a:	7c23      	ldrb	r3, [r4, #16]
   b457c:	b92b      	cbnz	r3, b458a <_ZN3DHT4readEv+0x26>
   b457e:	68e3      	ldr	r3, [r4, #12]
   b4580:	1ac0      	subs	r0, r0, r3
   b4582:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b4586:	f0c0 8160 	bcc.w	b484a <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b458a:	2500      	movs	r5, #0
   b458c:	7425      	strb	r5, [r4, #16]
   b458e:	f000 fa45 	bl	b4a1c <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4592:	4eb0      	ldr	r6, [pc, #704]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b4594:	6025      	str	r5, [r4, #0]
   b4596:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   b4598:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   b459a:	79a7      	ldrb	r7, [r4, #6]
   b459c:	7833      	ldrb	r3, [r6, #0]
   b459e:	4dae      	ldr	r5, [pc, #696]	; (b4858 <_ZN3DHT4readEv+0x2f4>)
   b45a0:	f3bf 8f5b 	dmb	ish
   b45a4:	f013 0f01 	tst.w	r3, #1
   b45a8:	d109      	bne.n	b45be <_ZN3DHT4readEv+0x5a>
   b45aa:	4630      	mov	r0, r6
   b45ac:	f7ff fd77 	bl	b409e <__cxa_guard_acquire>
   b45b0:	b128      	cbz	r0, b45be <_ZN3DHT4readEv+0x5a>
   b45b2:	f000 fa03 	bl	b49bc <HAL_Pin_Map>
   b45b6:	6028      	str	r0, [r5, #0]
   b45b8:	4630      	mov	r0, r6
   b45ba:	f7ff fd75 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b45be:	682b      	ldr	r3, [r5, #0]
   b45c0:	013f      	lsls	r7, r7, #4
   b45c2:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b45c6:	7833      	ldrb	r3, [r6, #0]
   b45c8:	f3bf 8f5b 	dmb	ish
   b45cc:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b45ce:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b45d2:	d409      	bmi.n	b45e8 <_ZN3DHT4readEv+0x84>
   b45d4:	489f      	ldr	r0, [pc, #636]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b45d6:	f7ff fd62 	bl	b409e <__cxa_guard_acquire>
   b45da:	b128      	cbz	r0, b45e8 <_ZN3DHT4readEv+0x84>
   b45dc:	f000 f9ee 	bl	b49bc <HAL_Pin_Map>
   b45e0:	6028      	str	r0, [r5, #0]
   b45e2:	489c      	ldr	r0, [pc, #624]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b45e4:	f7ff fd60 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b45e8:	682b      	ldr	r3, [r5, #0]
   b45ea:	443b      	add	r3, r7
   b45ec:	7858      	ldrb	r0, [r3, #1]
   b45ee:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b45f2:	ea40 0008 	orr.w	r0, r0, r8
   b45f6:	f7ff fdfb 	bl	b41f0 <nrf_gpio_pin_set>
	delay(250);
   b45fa:	20fa      	movs	r0, #250	; 0xfa
   b45fc:	f000 fd62 	bl	b50c4 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b4600:	79a0      	ldrb	r0, [r4, #6]
   b4602:	2101      	movs	r1, #1
   b4604:	f001 f8bc 	bl	b5780 <pinMode>
	pinResetFast(_pin);
   b4608:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b460a:	7833      	ldrb	r3, [r6, #0]
   b460c:	f3bf 8f5b 	dmb	ish
   b4610:	07da      	lsls	r2, r3, #31
   b4612:	d409      	bmi.n	b4628 <_ZN3DHT4readEv+0xc4>
   b4614:	488f      	ldr	r0, [pc, #572]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b4616:	f7ff fd42 	bl	b409e <__cxa_guard_acquire>
   b461a:	b128      	cbz	r0, b4628 <_ZN3DHT4readEv+0xc4>
   b461c:	f000 f9ce 	bl	b49bc <HAL_Pin_Map>
   b4620:	6028      	str	r0, [r5, #0]
   b4622:	488c      	ldr	r0, [pc, #560]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b4624:	f7ff fd40 	bl	b40a8 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4628:	682b      	ldr	r3, [r5, #0]
   b462a:	013f      	lsls	r7, r7, #4
   b462c:	5ddb      	ldrb	r3, [r3, r7]
   b462e:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4632:	7833      	ldrb	r3, [r6, #0]
   b4634:	f3bf 8f5b 	dmb	ish
   b4638:	07db      	lsls	r3, r3, #31
   b463a:	d409      	bmi.n	b4650 <_ZN3DHT4readEv+0xec>
   b463c:	4885      	ldr	r0, [pc, #532]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b463e:	f7ff fd2e 	bl	b409e <__cxa_guard_acquire>
   b4642:	b128      	cbz	r0, b4650 <_ZN3DHT4readEv+0xec>
   b4644:	f000 f9ba 	bl	b49bc <HAL_Pin_Map>
   b4648:	6028      	str	r0, [r5, #0]
   b464a:	4882      	ldr	r0, [pc, #520]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b464c:	f7ff fd2c 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4650:	682b      	ldr	r3, [r5, #0]
   b4652:	443b      	add	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4654:	a803      	add	r0, sp, #12
   b4656:	785b      	ldrb	r3, [r3, #1]
   b4658:	f003 031f 	and.w	r3, r3, #31
   b465c:	ea43 0308 	orr.w	r3, r3, r8
   b4660:	9303      	str	r3, [sp, #12]
   b4662:	f7ff fdad 	bl	b41c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b4666:	9a03      	ldr	r2, [sp, #12]
   b4668:	2301      	movs	r3, #1
   b466a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b466c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   b4670:	2014      	movs	r0, #20
   b4672:	f000 fd27 	bl	b50c4 <delay>
	noInterrupts();
   b4676:	f000 fec7 	bl	b5408 <_Z12noInterruptsv>
	pinSetFast(_pin);
   b467a:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b467c:	7833      	ldrb	r3, [r6, #0]
   b467e:	f3bf 8f5b 	dmb	ish
   b4682:	07d8      	lsls	r0, r3, #31
   b4684:	d409      	bmi.n	b469a <_ZN3DHT4readEv+0x136>
   b4686:	4873      	ldr	r0, [pc, #460]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b4688:	f7ff fd09 	bl	b409e <__cxa_guard_acquire>
   b468c:	b128      	cbz	r0, b469a <_ZN3DHT4readEv+0x136>
   b468e:	f000 f995 	bl	b49bc <HAL_Pin_Map>
   b4692:	6028      	str	r0, [r5, #0]
   b4694:	486f      	ldr	r0, [pc, #444]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b4696:	f7ff fd07 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b469a:	682b      	ldr	r3, [r5, #0]
   b469c:	013f      	lsls	r7, r7, #4
   b469e:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b46a2:	7833      	ldrb	r3, [r6, #0]
   b46a4:	f3bf 8f5b 	dmb	ish
   b46a8:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b46aa:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b46ae:	d409      	bmi.n	b46c4 <_ZN3DHT4readEv+0x160>
   b46b0:	4868      	ldr	r0, [pc, #416]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b46b2:	f7ff fcf4 	bl	b409e <__cxa_guard_acquire>
   b46b6:	b128      	cbz	r0, b46c4 <_ZN3DHT4readEv+0x160>
   b46b8:	f000 f980 	bl	b49bc <HAL_Pin_Map>
   b46bc:	6028      	str	r0, [r5, #0]
   b46be:	4865      	ldr	r0, [pc, #404]	; (b4854 <_ZN3DHT4readEv+0x2f0>)
   b46c0:	f7ff fcf2 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b46c4:	682b      	ldr	r3, [r5, #0]
   b46c6:	443b      	add	r3, r7
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   b46c8:	2700      	movs	r7, #0
   b46ca:	7858      	ldrb	r0, [r3, #1]
   b46cc:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b46d0:	ea40 0008 	orr.w	r0, r0, r8
   b46d4:	f7ff fd8c 	bl	b41f0 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b46d8:	2028      	movs	r0, #40	; 0x28
   b46da:	f000 f997 	bl	b4a0c <HAL_Delay_Microseconds>
	pinMode(_pin, INPUT);
   b46de:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b46e0:	f8df 8170 	ldr.w	r8, [pc, #368]	; b4854 <_ZN3DHT4readEv+0x2f0>
   b46e4:	2100      	movs	r1, #0
   b46e6:	f001 f84b 	bl	b5780 <pinMode>
	uint8_t laststate = HIGH;
   b46ea:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   b46ec:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   b46ee:	9300      	str	r3, [sp, #0]
		counter = 0;
   b46f0:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   b46f4:	f894 b006 	ldrb.w	fp, [r4, #6]
   b46f8:	7833      	ldrb	r3, [r6, #0]
   b46fa:	f3bf 8f5b 	dmb	ish
   b46fe:	07da      	lsls	r2, r3, #31
   b4700:	d409      	bmi.n	b4716 <_ZN3DHT4readEv+0x1b2>
   b4702:	4640      	mov	r0, r8
   b4704:	f7ff fccb 	bl	b409e <__cxa_guard_acquire>
   b4708:	b128      	cbz	r0, b4716 <_ZN3DHT4readEv+0x1b2>
   b470a:	f000 f957 	bl	b49bc <HAL_Pin_Map>
   b470e:	6028      	str	r0, [r5, #0]
   b4710:	4640      	mov	r0, r8
   b4712:	f7ff fcc9 	bl	b40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4716:	682b      	ldr	r3, [r5, #0]
   b4718:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   b471c:	f813 300b 	ldrb.w	r3, [r3, fp]
   b4720:	015b      	lsls	r3, r3, #5
   b4722:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4724:	7833      	ldrb	r3, [r6, #0]
   b4726:	f3bf 8f5b 	dmb	ish
   b472a:	07db      	lsls	r3, r3, #31
   b472c:	d409      	bmi.n	b4742 <_ZN3DHT4readEv+0x1de>
   b472e:	4640      	mov	r0, r8
   b4730:	f7ff fcb5 	bl	b409e <__cxa_guard_acquire>
   b4734:	b128      	cbz	r0, b4742 <_ZN3DHT4readEv+0x1de>
   b4736:	f000 f941 	bl	b49bc <HAL_Pin_Map>
   b473a:	6028      	str	r0, [r5, #0]
   b473c:	4640      	mov	r0, r8
   b473e:	f7ff fcb3 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4742:	682b      	ldr	r3, [r5, #0]
   b4744:	445b      	add	r3, fp
   b4746:	f893 b001 	ldrb.w	fp, [r3, #1]
   b474a:	9b01      	ldr	r3, [sp, #4]
   b474c:	f00b 0b1f 	and.w	fp, fp, #31
   b4750:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   b4754:	4658      	mov	r0, fp
   b4756:	f7ff fd58 	bl	b420a <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b475a:	4658      	mov	r0, fp
   b475c:	f7ff fd55 	bl	b420a <nrf_gpio_pin_read>
   b4760:	9b00      	ldr	r3, [sp, #0]
   b4762:	4283      	cmp	r3, r0
   b4764:	d109      	bne.n	b477a <_ZN3DHT4readEv+0x216>
			counter++;
   b4766:	f109 0901 	add.w	r9, r9, #1
   b476a:	fa5f f989 	uxtb.w	r9, r9
   b476e:	2001      	movs	r0, #1
   b4770:	f000 f94c 	bl	b4a0c <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   b4774:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   b4778:	d1bc      	bne.n	b46f4 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   b477a:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b477e:	7833      	ldrb	r3, [r6, #0]
   b4780:	f3bf 8f5b 	dmb	ish
   b4784:	07d8      	lsls	r0, r3, #31
   b4786:	d409      	bmi.n	b479c <_ZN3DHT4readEv+0x238>
   b4788:	4640      	mov	r0, r8
   b478a:	f7ff fc88 	bl	b409e <__cxa_guard_acquire>
   b478e:	b128      	cbz	r0, b479c <_ZN3DHT4readEv+0x238>
   b4790:	f000 f914 	bl	b49bc <HAL_Pin_Map>
   b4794:	6028      	str	r0, [r5, #0]
   b4796:	4640      	mov	r0, r8
   b4798:	f7ff fc86 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b479c:	682b      	ldr	r3, [r5, #0]
   b479e:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   b47a2:	f813 300b 	ldrb.w	r3, [r3, fp]
   b47a6:	015b      	lsls	r3, r3, #5
   b47a8:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b47aa:	7833      	ldrb	r3, [r6, #0]
   b47ac:	f3bf 8f5b 	dmb	ish
   b47b0:	07d9      	lsls	r1, r3, #31
   b47b2:	d409      	bmi.n	b47c8 <_ZN3DHT4readEv+0x264>
   b47b4:	4640      	mov	r0, r8
   b47b6:	f7ff fc72 	bl	b409e <__cxa_guard_acquire>
   b47ba:	b128      	cbz	r0, b47c8 <_ZN3DHT4readEv+0x264>
   b47bc:	f000 f8fe 	bl	b49bc <HAL_Pin_Map>
   b47c0:	6028      	str	r0, [r5, #0]
   b47c2:	4640      	mov	r0, r8
   b47c4:	f7ff fc70 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b47c8:	682b      	ldr	r3, [r5, #0]
   b47ca:	445b      	add	r3, fp
   b47cc:	f893 b001 	ldrb.w	fp, [r3, #1]
   b47d0:	9b00      	ldr	r3, [sp, #0]
   b47d2:	f00b 0b1f 	and.w	fp, fp, #31
   b47d6:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   b47da:	4658      	mov	r0, fp
   b47dc:	f7ff fd15 	bl	b420a <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   b47e0:	4658      	mov	r0, fp
   b47e2:	f7ff fd12 	bl	b420a <nrf_gpio_pin_read>

		if (counter == 255) break;
   b47e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   b47ea:	b2c3      	uxtb	r3, r0
   b47ec:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   b47ee:	d018      	beq.n	b4822 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b47f0:	2f03      	cmp	r7, #3
   b47f2:	d911      	bls.n	b4818 <_ZN3DHT4readEv+0x2b4>
   b47f4:	07fa      	lsls	r2, r7, #31
   b47f6:	d40f      	bmi.n	b4818 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b47f8:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b47fc:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   b4800:	5ca3      	ldrb	r3, [r4, r2]
   b4802:	005b      	lsls	r3, r3, #1
   b4804:	b2db      	uxtb	r3, r3
   b4806:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b4808:	7a21      	ldrb	r1, [r4, #8]
   b480a:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b480c:	bf3c      	itt	cc
   b480e:	f043 0301 	orrcc.w	r3, r3, #1
   b4812:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b4814:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   b4818:	3701      	adds	r7, #1
   b481a:	b2ff      	uxtb	r7, r7
   b481c:	2f55      	cmp	r7, #85	; 0x55
   b481e:	f47f af67 	bne.w	b46f0 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   b4822:	f000 fdf3 	bl	b540c <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b4826:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   b482a:	d910      	bls.n	b484e <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b482c:	7863      	ldrb	r3, [r4, #1]
   b482e:	7820      	ldrb	r0, [r4, #0]
   b4830:	4418      	add	r0, r3
   b4832:	78a3      	ldrb	r3, [r4, #2]
   b4834:	4418      	add	r0, r3
   b4836:	78e3      	ldrb	r3, [r4, #3]
   b4838:	4418      	add	r0, r3
   b483a:	7923      	ldrb	r3, [r4, #4]
   b483c:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b483e:	1ac3      	subs	r3, r0, r3
   b4840:	4258      	negs	r0, r3
   b4842:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b4844:	b005      	add	sp, #20
   b4846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   b484a:	2001      	movs	r0, #1
   b484c:	e7fa      	b.n	b4844 <_ZN3DHT4readEv+0x2e0>
	return false;
   b484e:	2000      	movs	r0, #0
   b4850:	e7f8      	b.n	b4844 <_ZN3DHT4readEv+0x2e0>
   b4852:	bf00      	nop
   b4854:	2003e6b0 	.word	0x2003e6b0
   b4858:	2003e6b4 	.word	0x2003e6b4

000b485c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b485c:	b510      	push	{r4, lr}
   b485e:	4604      	mov	r4, r0
	if (read()) {
   b4860:	f7ff fe80 	bl	b4564 <_ZN3DHT4readEv>
   b4864:	b320      	cbz	r0, b48b0 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b4866:	79e3      	ldrb	r3, [r4, #7]
   b4868:	2b0b      	cmp	r3, #11
   b486a:	d01b      	beq.n	b48a4 <_ZN3DHT15readTemperatureEv+0x48>
   b486c:	3b15      	subs	r3, #21
   b486e:	2b01      	cmp	r3, #1
   b4870:	d81e      	bhi.n	b48b0 <_ZN3DHT15readTemperatureEv+0x54>
   b4872:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b4874:	eddf 6a10 	vldr	s13, [pc, #64]	; b48b8 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b4878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b487c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b4880:	78e2      	ldrb	r2, [r4, #3]
   b4882:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b4886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b488a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b488e:	061b      	lsls	r3, r3, #24
				f += data[3];
   b4890:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b4894:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b4898:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b489c:	d507      	bpl.n	b48ae <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b489e:	eeb1 0a40 	vneg.f32	s0, s0
   b48a2:	e004      	b.n	b48ae <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b48a4:	78a3      	ldrb	r3, [r4, #2]
   b48a6:	ee00 3a10 	vmov	s0, r3
   b48aa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b48ae:	bd10      	pop	{r4, pc}
		switch (_type) {
   b48b0:	ed9f 0a02 	vldr	s0, [pc, #8]	; b48bc <_ZN3DHT15readTemperatureEv+0x60>
   b48b4:	e7fb      	b.n	b48ae <_ZN3DHT15readTemperatureEv+0x52>
   b48b6:	bf00      	nop
   b48b8:	43800000 	.word	0x43800000
   b48bc:	7fc00000 	.word	0x7fc00000

000b48c0 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b48c0:	f7ff bfcc 	b.w	b485c <_ZN3DHT15readTemperatureEv>

000b48c4 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   b48c4:	b510      	push	{r4, lr}
   b48c6:	4604      	mov	r4, r0
	if (read()) {
   b48c8:	f7ff fe4c 	bl	b4564 <_ZN3DHT4readEv>
   b48cc:	b1f0      	cbz	r0, b490c <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   b48ce:	79e3      	ldrb	r3, [r4, #7]
   b48d0:	2b0b      	cmp	r3, #11
   b48d2:	d015      	beq.n	b4900 <_ZN3DHT12readHumidityEv+0x3c>
   b48d4:	3b15      	subs	r3, #21
   b48d6:	2b01      	cmp	r3, #1
   b48d8:	d818      	bhi.n	b490c <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   b48da:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   b48dc:	eddf 6a0d 	vldr	s13, [pc, #52]	; b4914 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   b48e0:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   b48e4:	7863      	ldrb	r3, [r4, #1]
   b48e6:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   b48ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   b48ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b48f2:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b48f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b48fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b48fe:	bd10      	pop	{r4, pc}
				f = data[0];
   b4900:	7823      	ldrb	r3, [r4, #0]
   b4902:	ee00 3a10 	vmov	s0, r3
   b4906:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   b490a:	e7f8      	b.n	b48fe <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   b490c:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4918 <_ZN3DHT12readHumidityEv+0x54>
   b4910:	e7f5      	b.n	b48fe <_ZN3DHT12readHumidityEv+0x3a>
   b4912:	bf00      	nop
   b4914:	43800000 	.word	0x43800000
   b4918:	7fc00000 	.word	0x7fc00000

000b491c <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   b491c:	f7ff bfd2 	b.w	b48c4 <_ZN3DHT12readHumidityEv>

000b4920 <_ZN3DHT12getHeatIndexEv>:
float DHT::getHeatIndex() {
   b4920:	b510      	push	{r4, lr}
   b4922:	ed2d 8b04 	vpush	{d8-d9}
   b4926:	4604      	mov	r4, r0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   b4928:	f7ff ff98 	bl	b485c <_ZN3DHT15readTemperatureEv>
   b492c:	4620      	mov	r0, r4
	return c * 9 / 5 + 32;
   b492e:	eef2 8a02 	vmov.f32	s17, #34	; 0x41100000  9.0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   b4932:	eeb0 8a40 	vmov.f32	s16, s0
   b4936:	f7ff ffc5 	bl	b48c4 <_ZN3DHT12readHumidityEv>
	return c * 9 / 5 + 32;
   b493a:	ee28 8a28 	vmul.f32	s16, s16, s17
   b493e:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   b4942:	eef0 0a40 	vmov.f32	s1, s0
	return c * 9 / 5 + 32;
   b4946:	ee88 0a09 	vdiv.f32	s0, s16, s18
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   b494a:	4620      	mov	r0, r4
	return c * 9 / 5 + 32;
   b494c:	ed9f 8a07 	vldr	s16, [pc, #28]	; b496c <_ZN3DHT12getHeatIndexEv+0x4c>
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   b4950:	ee30 0a08 	vadd.f32	s0, s0, s16
   b4954:	f7ff fcc8 	bl	b42e8 <_ZN3DHT16computeHeatIndexEff>
	return (f - 32) * 5 / 9;
   b4958:	ee30 0a48 	vsub.f32	s0, s0, s16
   b495c:	ee20 0a09 	vmul.f32	s0, s0, s18
}
   b4960:	ee80 0a28 	vdiv.f32	s0, s0, s17
   b4964:	ecbd 8b04 	vpop	{d8-d9}
   b4968:	bd10      	pop	{r4, pc}
   b496a:	bf00      	nop
   b496c:	42000000 	.word	0x42000000

000b4970 <_ZN3DHT11getDewPointEv>:
float DHT::getDewPoint() {
   b4970:	b510      	push	{r4, lr}
   b4972:	ed2d 8b02 	vpush	{d8}
   b4976:	4604      	mov	r4, r0
	return computeDewPoint(readTemperature(), readHumidity());
   b4978:	f7ff ff70 	bl	b485c <_ZN3DHT15readTemperatureEv>
   b497c:	4620      	mov	r0, r4
   b497e:	eeb0 8a40 	vmov.f32	s16, s0
   b4982:	f7ff ff9f 	bl	b48c4 <_ZN3DHT12readHumidityEv>
   b4986:	eef0 0a40 	vmov.f32	s1, s0
   b498a:	eeb0 0a48 	vmov.f32	s0, s16
}
   b498e:	ecbd 8b02 	vpop	{d8}
	return computeDewPoint(readTemperature(), readHumidity());
   b4992:	4620      	mov	r0, r4
}
   b4994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return computeDewPoint(readTemperature(), readHumidity());
   b4998:	f7ff bd86 	b.w	b44a8 <_ZN3DHT15computeDewPointEff>

000b499c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <netdb_freeaddrinfo+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	689b      	ldr	r3, [r3, #8]
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	00030268 	.word	0x00030268

000b49ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <netdb_getaddrinfo+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	68db      	ldr	r3, [r3, #12]
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	00030268 	.word	0x00030268

000b49bc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <HAL_Pin_Map+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	681b      	ldr	r3, [r3, #0]
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	0003022c 	.word	0x0003022c

000b49cc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <HAL_Pin_Mode+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	689b      	ldr	r3, [r3, #8]
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	0003022c 	.word	0x0003022c

000b49dc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <HAL_Interrupts_Enable_All+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	6a1b      	ldr	r3, [r3, #32]
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	0003022c 	.word	0x0003022c

000b49ec <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <HAL_Interrupts_Disable_All+0xc>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	0003022c 	.word	0x0003022c

000b49fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <HAL_RNG_GetRandomNumber+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	685b      	ldr	r3, [r3, #4]
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	00030218 	.word	0x00030218

000b4a0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <HAL_Delay_Microseconds+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	68db      	ldr	r3, [r3, #12]
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	00030218 	.word	0x00030218

000b4a1c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	695b      	ldr	r3, [r3, #20]
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	00030218 	.word	0x00030218

000b4a2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <os_mutex_recursive_create+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	00030248 	.word	0x00030248

000b4a3c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <inet_inet_ntop+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	695b      	ldr	r3, [r3, #20]
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	00030264 	.word	0x00030264

000b4a4c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <hal_usart_write+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	68db      	ldr	r3, [r3, #12]
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	0003023c 	.word	0x0003023c

000b4a5c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <hal_usart_available+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	691b      	ldr	r3, [r3, #16]
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	0003023c 	.word	0x0003023c

000b4a6c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <hal_usart_read+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	695b      	ldr	r3, [r3, #20]
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	0003023c 	.word	0x0003023c

000b4a7c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <hal_usart_peek+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	699b      	ldr	r3, [r3, #24]
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	0003023c 	.word	0x0003023c

000b4a8c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <hal_usart_flush+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	69db      	ldr	r3, [r3, #28]
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	0003023c 	.word	0x0003023c

000b4a9c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <hal_usart_is_enabled+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	6a1b      	ldr	r3, [r3, #32]
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	0003023c 	.word	0x0003023c

000b4aac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <hal_usart_available_data_for_write+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	0003023c 	.word	0x0003023c

000b4abc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b02      	ldr	r3, [pc, #8]	; (b4ac8 <hal_usart_init_ex+0xc>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ac4:	9301      	str	r3, [sp, #4]
   b4ac6:	bd08      	pop	{r3, pc}
   b4ac8:	0003023c 	.word	0x0003023c

000b4acc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <hal_i2c_write+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	6a1b      	ldr	r3, [r3, #32]
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	00030228 	.word	0x00030228

000b4adc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b02      	ldr	r3, [pc, #8]	; (b4ae8 <hal_i2c_available+0xc>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ae4:	9301      	str	r3, [sp, #4]
   b4ae6:	bd08      	pop	{r3, pc}
   b4ae8:	00030228 	.word	0x00030228

000b4aec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4aec:	b508      	push	{r3, lr}
   b4aee:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <hal_i2c_read+0xc>)
   b4af0:	681b      	ldr	r3, [r3, #0]
   b4af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4af4:	9301      	str	r3, [sp, #4]
   b4af6:	bd08      	pop	{r3, pc}
   b4af8:	00030228 	.word	0x00030228

000b4afc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <hal_i2c_peek+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	00030228 	.word	0x00030228

000b4b0c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b02      	ldr	r3, [pc, #8]	; (b4b18 <hal_i2c_flush+0xc>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b14:	9301      	str	r3, [sp, #4]
   b4b16:	bd08      	pop	{r3, pc}
   b4b18:	00030228 	.word	0x00030228

000b4b1c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4b1c:	b508      	push	{r3, lr}
   b4b1e:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <hal_i2c_is_enabled+0xc>)
   b4b20:	681b      	ldr	r3, [r3, #0]
   b4b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b24:	9301      	str	r3, [sp, #4]
   b4b26:	bd08      	pop	{r3, pc}
   b4b28:	00030228 	.word	0x00030228

000b4b2c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4b2c:	b508      	push	{r3, lr}
   b4b2e:	4b02      	ldr	r3, [pc, #8]	; (b4b38 <hal_i2c_init+0xc>)
   b4b30:	681b      	ldr	r3, [r3, #0]
   b4b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b34:	9301      	str	r3, [sp, #4]
   b4b36:	bd08      	pop	{r3, pc}
   b4b38:	00030228 	.word	0x00030228

000b4b3c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4b3c:	b508      	push	{r3, lr}
   b4b3e:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <hal_spi_init+0xc>)
   b4b40:	681b      	ldr	r3, [r3, #0]
   b4b42:	69db      	ldr	r3, [r3, #28]
   b4b44:	9301      	str	r3, [sp, #4]
   b4b46:	bd08      	pop	{r3, pc}
   b4b48:	00030230 	.word	0x00030230

000b4b4c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <hal_spi_is_enabled+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	6a1b      	ldr	r3, [r3, #32]
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	00030230 	.word	0x00030230

000b4b5c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b02      	ldr	r3, [pc, #8]	; (b4b68 <HAL_USB_USART_Init+0xc>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	681b      	ldr	r3, [r3, #0]
   b4b64:	9301      	str	r3, [sp, #4]
   b4b66:	bd08      	pop	{r3, pc}
   b4b68:	0003024c 	.word	0x0003024c

000b4b6c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4b6c:	b508      	push	{r3, lr}
   b4b6e:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <HAL_USB_USART_Begin+0xc>)
   b4b70:	681b      	ldr	r3, [r3, #0]
   b4b72:	685b      	ldr	r3, [r3, #4]
   b4b74:	9301      	str	r3, [sp, #4]
   b4b76:	bd08      	pop	{r3, pc}
   b4b78:	0003024c 	.word	0x0003024c

000b4b7c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <HAL_USB_USART_Available_Data+0xc>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	691b      	ldr	r3, [r3, #16]
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	bd08      	pop	{r3, pc}
   b4b88:	0003024c 	.word	0x0003024c

000b4b8c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	695b      	ldr	r3, [r3, #20]
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	0003024c 	.word	0x0003024c

000b4b9c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <HAL_USB_USART_Receive_Data+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	699b      	ldr	r3, [r3, #24]
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	0003024c 	.word	0x0003024c

000b4bac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <HAL_USB_USART_Send_Data+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	69db      	ldr	r3, [r3, #28]
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	0003024c 	.word	0x0003024c

000b4bbc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <HAL_USB_USART_Flush_Data+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	6a1b      	ldr	r3, [r3, #32]
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	0003024c 	.word	0x0003024c

000b4bcc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <panic_+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	00030260 	.word	0x00030260

000b4bdc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <set_system_mode+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	685b      	ldr	r3, [r3, #4]
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	00030220 	.word	0x00030220

000b4bec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <system_delay_ms+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	695b      	ldr	r3, [r3, #20]
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	00030220 	.word	0x00030220

000b4bfc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b03      	ldr	r3, [pc, #12]	; (b4c0c <system_ctrl_set_app_request_handler+0x10>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c06:	9301      	str	r3, [sp, #4]
   b4c08:	bd08      	pop	{r3, pc}
   b4c0a:	0000      	.short	0x0000
   b4c0c:	00030220 	.word	0x00030220

000b4c10 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b03      	ldr	r3, [pc, #12]	; (b4c20 <system_ctrl_set_result+0x10>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c1a:	9301      	str	r3, [sp, #4]
   b4c1c:	bd08      	pop	{r3, pc}
   b4c1e:	0000      	.short	0x0000
   b4c20:	00030220 	.word	0x00030220

000b4c24 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <network_connect+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	685b      	ldr	r3, [r3, #4]
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	00030240 	.word	0x00030240

000b4c34 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <network_connecting+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	689b      	ldr	r3, [r3, #8]
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	00030240 	.word	0x00030240

000b4c44 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c44:	b508      	push	{r3, lr}
   b4c46:	4b02      	ldr	r3, [pc, #8]	; (b4c50 <network_disconnect+0xc>)
   b4c48:	681b      	ldr	r3, [r3, #0]
   b4c4a:	68db      	ldr	r3, [r3, #12]
   b4c4c:	9301      	str	r3, [sp, #4]
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	00030240 	.word	0x00030240

000b4c54 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <network_ready+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	691b      	ldr	r3, [r3, #16]
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	00030240 	.word	0x00030240

000b4c64 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b02      	ldr	r3, [pc, #8]	; (b4c70 <network_on+0xc>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	695b      	ldr	r3, [r3, #20]
   b4c6c:	9301      	str	r3, [sp, #4]
   b4c6e:	bd08      	pop	{r3, pc}
   b4c70:	00030240 	.word	0x00030240

000b4c74 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b02      	ldr	r3, [pc, #8]	; (b4c80 <network_off+0xc>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	699b      	ldr	r3, [r3, #24]
   b4c7c:	9301      	str	r3, [sp, #4]
   b4c7e:	bd08      	pop	{r3, pc}
   b4c80:	00030240 	.word	0x00030240

000b4c84 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b02      	ldr	r3, [pc, #8]	; (b4c90 <network_listen+0xc>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	69db      	ldr	r3, [r3, #28]
   b4c8c:	9301      	str	r3, [sp, #4]
   b4c8e:	bd08      	pop	{r3, pc}
   b4c90:	00030240 	.word	0x00030240

000b4c94 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c94:	b508      	push	{r3, lr}
   b4c96:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <network_listening+0xc>)
   b4c98:	681b      	ldr	r3, [r3, #0]
   b4c9a:	6a1b      	ldr	r3, [r3, #32]
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	bd08      	pop	{r3, pc}
   b4ca0:	00030240 	.word	0x00030240

000b4ca4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4ca4:	b508      	push	{r3, lr}
   b4ca6:	4b02      	ldr	r3, [pc, #8]	; (b4cb0 <network_set_listen_timeout+0xc>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cac:	9301      	str	r3, [sp, #4]
   b4cae:	bd08      	pop	{r3, pc}
   b4cb0:	00030240 	.word	0x00030240

000b4cb4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4cb4:	b508      	push	{r3, lr}
   b4cb6:	4b02      	ldr	r3, [pc, #8]	; (b4cc0 <network_get_listen_timeout+0xc>)
   b4cb8:	681b      	ldr	r3, [r3, #0]
   b4cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4cbc:	9301      	str	r3, [sp, #4]
   b4cbe:	bd08      	pop	{r3, pc}
   b4cc0:	00030240 	.word	0x00030240

000b4cc4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4cc4:	b508      	push	{r3, lr}
   b4cc6:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <network_is_on+0xc>)
   b4cc8:	681b      	ldr	r3, [r3, #0]
   b4cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ccc:	9301      	str	r3, [sp, #4]
   b4cce:	bd08      	pop	{r3, pc}
   b4cd0:	00030240 	.word	0x00030240

000b4cd4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <network_is_off+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	00030240 	.word	0x00030240

000b4ce4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ce8:	681b      	ldr	r3, [r3, #0]
   b4cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4cec:	9301      	str	r3, [sp, #4]
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	00030244 	.word	0x00030244

000b4cf4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <malloc+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	681b      	ldr	r3, [r3, #0]
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	0003021c 	.word	0x0003021c

000b4d04 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <free+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	685b      	ldr	r3, [r3, #4]
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	0003021c 	.word	0x0003021c

000b4d14 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <__errno+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	0003021c 	.word	0x0003021c

000b4d24 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <__assert_func+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	0003021c 	.word	0x0003021c

000b4d34 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <newlib_impure_ptr_callback+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	0003021c 	.word	0x0003021c

000b4d44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d44:	2200      	movs	r2, #0
   b4d46:	6840      	ldr	r0, [r0, #4]
   b4d48:	4611      	mov	r1, r2
   b4d4a:	f7ff bfa3 	b.w	b4c94 <network_listening>

000b4d4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d4e:	2200      	movs	r2, #0
   b4d50:	6840      	ldr	r0, [r0, #4]
   b4d52:	4611      	mov	r1, r2
   b4d54:	f7ff bfae 	b.w	b4cb4 <network_get_listen_timeout>

000b4d58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d58:	6840      	ldr	r0, [r0, #4]
   b4d5a:	2200      	movs	r2, #0
   b4d5c:	f7ff bfa2 	b.w	b4ca4 <network_set_listen_timeout>

000b4d60 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d60:	6840      	ldr	r0, [r0, #4]
   b4d62:	2200      	movs	r2, #0
   b4d64:	f081 0101 	eor.w	r1, r1, #1
   b4d68:	f7ff bf8c 	b.w	b4c84 <network_listen>

000b4d6c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d6c:	2300      	movs	r3, #0
   b4d6e:	6840      	ldr	r0, [r0, #4]
   b4d70:	461a      	mov	r2, r3
   b4d72:	4619      	mov	r1, r3
   b4d74:	f7ff bf7e 	b.w	b4c74 <network_off>

000b4d78 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d78:	2300      	movs	r3, #0
   b4d7a:	6840      	ldr	r0, [r0, #4]
   b4d7c:	461a      	mov	r2, r3
   b4d7e:	4619      	mov	r1, r3
   b4d80:	f7ff bf70 	b.w	b4c64 <network_on>

000b4d84 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4d84:	2200      	movs	r2, #0
   b4d86:	6840      	ldr	r0, [r0, #4]
   b4d88:	4611      	mov	r1, r2
   b4d8a:	f7ff bf63 	b.w	b4c54 <network_ready>

000b4d8e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4d8e:	2200      	movs	r2, #0
   b4d90:	6840      	ldr	r0, [r0, #4]
   b4d92:	4611      	mov	r1, r2
   b4d94:	f7ff bf4e 	b.w	b4c34 <network_connecting>

000b4d98 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d98:	6840      	ldr	r0, [r0, #4]
   b4d9a:	2200      	movs	r2, #0
   b4d9c:	2102      	movs	r1, #2
   b4d9e:	f7ff bf51 	b.w	b4c44 <network_disconnect>

000b4da2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4da2:	2300      	movs	r3, #0
   b4da4:	6840      	ldr	r0, [r0, #4]
   b4da6:	461a      	mov	r2, r3
   b4da8:	f7ff bf3c 	b.w	b4c24 <network_connect>

000b4dac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4dac:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4dae:	2203      	movs	r2, #3
   b4db0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4db2:	4a02      	ldr	r2, [pc, #8]	; (b4dbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4db4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4db6:	4770      	bx	lr
   b4db8:	2003e6b8 	.word	0x2003e6b8
   b4dbc:	000b7814 	.word	0x000b7814

000b4dc0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4dc0:	b510      	push	{r4, lr}
   b4dc2:	4604      	mov	r4, r0
   b4dc4:	4608      	mov	r0, r1
{
    _spi = spi;
   b4dc6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4dc8:	f7ff feb8 	bl	b4b3c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4dcc:	2300      	movs	r3, #0
   b4dce:	6063      	str	r3, [r4, #4]
}
   b4dd0:	4620      	mov	r0, r4
   b4dd2:	bd10      	pop	{r4, pc}

000b4dd4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4dd4:	4b05      	ldr	r3, [pc, #20]	; (b4dec <_GLOBAL__sub_I_System+0x18>)
   b4dd6:	2202      	movs	r2, #2
   b4dd8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4dda:	4b05      	ldr	r3, [pc, #20]	; (b4df0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ddc:	4a05      	ldr	r2, [pc, #20]	; (b4df4 <_GLOBAL__sub_I_System+0x20>)
   b4dde:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4de0:	2000      	movs	r0, #0
   b4de2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4de6:	f7ff bef9 	b.w	b4bdc <set_system_mode>
   b4dea:	bf00      	nop
   b4dec:	2003e6cc 	.word	0x2003e6cc
   b4df0:	2003e6c0 	.word	0x2003e6c0
   b4df4:	ffff0000 	.word	0xffff0000

000b4df8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4df8:	4802      	ldr	r0, [pc, #8]	; (b4e04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4dfa:	2300      	movs	r3, #0
   b4dfc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4dfe:	f7ff be15 	b.w	b4a2c <os_mutex_recursive_create>
   b4e02:	bf00      	nop
   b4e04:	2003e6d0 	.word	0x2003e6d0

000b4e08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e0a:	4606      	mov	r6, r0
   b4e0c:	460d      	mov	r5, r1
  size_t n = 0;
   b4e0e:	188f      	adds	r7, r1, r2
   b4e10:	2400      	movs	r4, #0
  while (size--) {
   b4e12:	42bd      	cmp	r5, r7
   b4e14:	d00c      	beq.n	b4e30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4e16:	6833      	ldr	r3, [r6, #0]
   b4e18:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4e1c:	689b      	ldr	r3, [r3, #8]
   b4e1e:	4630      	mov	r0, r6
   b4e20:	4798      	blx	r3
     if (chunk>=0)
   b4e22:	1e03      	subs	r3, r0, #0
   b4e24:	db01      	blt.n	b4e2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4e26:	441c      	add	r4, r3
  while (size--) {
   b4e28:	e7f3      	b.n	b4e12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4e2a:	2c00      	cmp	r4, #0
   b4e2c:	bf08      	it	eq
   b4e2e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4e30:	4620      	mov	r0, r4
   b4e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e34 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4e34:	b513      	push	{r0, r1, r4, lr}
   b4e36:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4e38:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4e3a:	b159      	cbz	r1, b4e54 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4e3c:	9101      	str	r1, [sp, #4]
   b4e3e:	f002 fc3d 	bl	b76bc <strlen>
   b4e42:	6823      	ldr	r3, [r4, #0]
   b4e44:	9901      	ldr	r1, [sp, #4]
   b4e46:	68db      	ldr	r3, [r3, #12]
   b4e48:	4602      	mov	r2, r0
   b4e4a:	4620      	mov	r0, r4
    }
   b4e4c:	b002      	add	sp, #8
   b4e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4e52:	4718      	bx	r3
    }
   b4e54:	b002      	add	sp, #8
   b4e56:	bd10      	pop	{r4, pc}

000b4e58 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b4e58:	b508      	push	{r3, lr}
  return write(str);
   b4e5a:	f7ff ffeb 	bl	b4e34 <_ZN5Print5writeEPKc>
}
   b4e5e:	bd08      	pop	{r3, pc}

000b4e60 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b4e60:	6803      	ldr	r3, [r0, #0]
   b4e62:	689b      	ldr	r3, [r3, #8]
   b4e64:	4718      	bx	r3

000b4e66 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4e66:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4e68:	210d      	movs	r1, #13
{
   b4e6a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4e6c:	f7ff fff8 	bl	b4e60 <_ZN5Print5printEc>
  n += print('\n');
   b4e70:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4e72:	4604      	mov	r4, r0
  n += print('\n');
   b4e74:	4628      	mov	r0, r5
   b4e76:	f7ff fff3 	bl	b4e60 <_ZN5Print5printEc>
  return n;
}
   b4e7a:	4420      	add	r0, r4
   b4e7c:	bd38      	pop	{r3, r4, r5, pc}

000b4e7e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4e7e:	b538      	push	{r3, r4, r5, lr}
   b4e80:	4605      	mov	r5, r0
  return write(str);
   b4e82:	f7ff ffd7 	bl	b4e34 <_ZN5Print5writeEPKc>
   b4e86:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4e88:	4628      	mov	r0, r5
   b4e8a:	f7ff ffec 	bl	b4e66 <_ZN5Print7printlnEv>
  return n;
}
   b4e8e:	4420      	add	r0, r4
   b4e90:	bd38      	pop	{r3, r4, r5, pc}

000b4e92 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4e92:	b530      	push	{r4, r5, lr}
   b4e94:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4e96:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4e98:	2a01      	cmp	r2, #1
  *str = '\0';
   b4e9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4e9e:	bf98      	it	ls
   b4ea0:	220a      	movls	r2, #10
   b4ea2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4ea4:	460d      	mov	r5, r1
   b4ea6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4eaa:	fb01 5312 	mls	r3, r1, r2, r5
   b4eae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4eb2:	2b09      	cmp	r3, #9
   b4eb4:	bf94      	ite	ls
   b4eb6:	3330      	addls	r3, #48	; 0x30
   b4eb8:	3337      	addhi	r3, #55	; 0x37
   b4eba:	b2db      	uxtb	r3, r3
  } while(n);
   b4ebc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4ebe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4ec2:	d9ef      	bls.n	b4ea4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4ec4:	4621      	mov	r1, r4
   b4ec6:	f7ff ffb5 	bl	b4e34 <_ZN5Print5writeEPKc>
}
   b4eca:	b00b      	add	sp, #44	; 0x2c
   b4ecc:	bd30      	pop	{r4, r5, pc}
	...

000b4ed0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b4ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ed4:	ec55 4b10 	vmov	r4, r5, d0
   b4ed8:	4606      	mov	r6, r0
   b4eda:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b4edc:	ee10 2a10 	vmov	r2, s0
   b4ee0:	ee10 0a10 	vmov	r0, s0
   b4ee4:	462b      	mov	r3, r5
   b4ee6:	4629      	mov	r1, r5
   b4ee8:	f002 faf0 	bl	b74cc <__aeabi_dcmpun>
   b4eec:	b140      	cbz	r0, b4f00 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b4eee:	4953      	ldr	r1, [pc, #332]	; (b503c <_ZN5Print10printFloatEdh+0x16c>)
   b4ef0:	4630      	mov	r0, r6
   b4ef2:	f7ff ff9f 	bl	b4e34 <_ZN5Print5writeEPKc>
   b4ef6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b4ef8:	4650      	mov	r0, sl
   b4efa:	b003      	add	sp, #12
   b4efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b4f00:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b4f04:	4b4e      	ldr	r3, [pc, #312]	; (b5040 <_ZN5Print10printFloatEdh+0x170>)
   b4f06:	f04f 32ff 	mov.w	r2, #4294967295
   b4f0a:	4620      	mov	r0, r4
   b4f0c:	4649      	mov	r1, r9
   b4f0e:	f002 fadd 	bl	b74cc <__aeabi_dcmpun>
   b4f12:	b948      	cbnz	r0, b4f28 <_ZN5Print10printFloatEdh+0x58>
   b4f14:	4b4a      	ldr	r3, [pc, #296]	; (b5040 <_ZN5Print10printFloatEdh+0x170>)
   b4f16:	f04f 32ff 	mov.w	r2, #4294967295
   b4f1a:	4620      	mov	r0, r4
   b4f1c:	4649      	mov	r1, r9
   b4f1e:	f002 fab7 	bl	b7490 <__aeabi_dcmple>
   b4f22:	b908      	cbnz	r0, b4f28 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b4f24:	4947      	ldr	r1, [pc, #284]	; (b5044 <_ZN5Print10printFloatEdh+0x174>)
   b4f26:	e7e3      	b.n	b4ef0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b4f28:	4b47      	ldr	r3, [pc, #284]	; (b5048 <_ZN5Print10printFloatEdh+0x178>)
   b4f2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b4f2e:	4620      	mov	r0, r4
   b4f30:	4629      	mov	r1, r5
   b4f32:	f002 fac1 	bl	b74b8 <__aeabi_dcmpgt>
   b4f36:	b108      	cbz	r0, b4f3c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b4f38:	4944      	ldr	r1, [pc, #272]	; (b504c <_ZN5Print10printFloatEdh+0x17c>)
   b4f3a:	e7d9      	b.n	b4ef0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b4f3c:	4b44      	ldr	r3, [pc, #272]	; (b5050 <_ZN5Print10printFloatEdh+0x180>)
   b4f3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b4f42:	4620      	mov	r0, r4
   b4f44:	4629      	mov	r1, r5
   b4f46:	f002 fa99 	bl	b747c <__aeabi_dcmplt>
   b4f4a:	2800      	cmp	r0, #0
   b4f4c:	d1f4      	bne.n	b4f38 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b4f4e:	2200      	movs	r2, #0
   b4f50:	2300      	movs	r3, #0
   b4f52:	4620      	mov	r0, r4
   b4f54:	4629      	mov	r1, r5
   b4f56:	f002 fa91 	bl	b747c <__aeabi_dcmplt>
   b4f5a:	b1d0      	cbz	r0, b4f92 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b4f5c:	212d      	movs	r1, #45	; 0x2d
   b4f5e:	4630      	mov	r0, r6
   b4f60:	f7ff ff7e 	bl	b4e60 <_ZN5Print5printEc>
     number = -number;
   b4f64:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b4f68:	4682      	mov	sl, r0
     number = -number;
   b4f6a:	461d      	mov	r5, r3
  double rounding = 0.5;
   b4f6c:	4939      	ldr	r1, [pc, #228]	; (b5054 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b4f6e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b505c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b4f72:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b4f76:	2000      	movs	r0, #0
    rounding /= 10.0;
   b4f78:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b4f7c:	fa5f f38b 	uxtb.w	r3, fp
   b4f80:	429f      	cmp	r7, r3
   b4f82:	d908      	bls.n	b4f96 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b4f84:	4642      	mov	r2, r8
   b4f86:	464b      	mov	r3, r9
   b4f88:	f002 f930 	bl	b71ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b4f8c:	f10b 0b01 	add.w	fp, fp, #1
   b4f90:	e7f4      	b.n	b4f7c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b4f92:	4682      	mov	sl, r0
   b4f94:	e7ea      	b.n	b4f6c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b4f96:	4622      	mov	r2, r4
   b4f98:	462b      	mov	r3, r5
   b4f9a:	f001 fe47 	bl	b6c2c <__adddf3>
   b4f9e:	460d      	mov	r5, r1
   b4fa0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b4fa2:	f002 fad1 	bl	b7548 <__aeabi_d2uiz>
   b4fa6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b4fa8:	f001 ff7c 	bl	b6ea4 <__aeabi_ui2d>
   b4fac:	4602      	mov	r2, r0
   b4fae:	460b      	mov	r3, r1
   b4fb0:	4620      	mov	r0, r4
   b4fb2:	4629      	mov	r1, r5
   b4fb4:	f001 fe38 	bl	b6c28 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4fb8:	220a      	movs	r2, #10
   b4fba:	4604      	mov	r4, r0
   b4fbc:	460d      	mov	r5, r1
   b4fbe:	4630      	mov	r0, r6
   b4fc0:	4641      	mov	r1, r8
   b4fc2:	f7ff ff66 	bl	b4e92 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b4fc6:	4482      	add	sl, r0
  if (digits > 0) {
   b4fc8:	2f00      	cmp	r7, #0
   b4fca:	d095      	beq.n	b4ef8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b4fcc:	4922      	ldr	r1, [pc, #136]	; (b5058 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b4fce:	f8df 908c 	ldr.w	r9, [pc, #140]	; b505c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b4fd2:	4630      	mov	r0, r6
   b4fd4:	f7ff ff2e 	bl	b4e34 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b4fd8:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b4fdc:	4482      	add	sl, r0
  while (digits-- > 0)
   b4fde:	2f00      	cmp	r7, #0
   b4fe0:	d08a      	beq.n	b4ef8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b4fe2:	4642      	mov	r2, r8
   b4fe4:	464b      	mov	r3, r9
   b4fe6:	4620      	mov	r0, r4
   b4fe8:	4629      	mov	r1, r5
   b4fea:	f001 ffd5 	bl	b6f98 <__aeabi_dmul>
   b4fee:	4604      	mov	r4, r0
   b4ff0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b4ff2:	f002 fa81 	bl	b74f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b4ff6:	f1b0 0b00 	subs.w	fp, r0, #0
   b4ffa:	da1c      	bge.n	b5036 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b4ffc:	212d      	movs	r1, #45	; 0x2d
   b4ffe:	4630      	mov	r0, r6
   b5000:	f7ff ff2e 	bl	b4e60 <_ZN5Print5printEc>
            val = -n;
   b5004:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5008:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b500a:	220a      	movs	r2, #10
   b500c:	4630      	mov	r0, r6
   b500e:	9301      	str	r3, [sp, #4]
   b5010:	f7ff ff3f 	bl	b4e92 <_ZN5Print11printNumberEmh>
   b5014:	9b01      	ldr	r3, [sp, #4]
   b5016:	4418      	add	r0, r3
    n += print(toPrint);
   b5018:	4482      	add	sl, r0
    remainder -= toPrint;
   b501a:	4658      	mov	r0, fp
   b501c:	f001 ff52 	bl	b6ec4 <__aeabi_i2d>
   b5020:	4602      	mov	r2, r0
   b5022:	460b      	mov	r3, r1
   b5024:	4620      	mov	r0, r4
   b5026:	4629      	mov	r1, r5
   b5028:	f001 fdfe 	bl	b6c28 <__aeabi_dsub>
   b502c:	3f01      	subs	r7, #1
   b502e:	4604      	mov	r4, r0
   b5030:	460d      	mov	r5, r1
   b5032:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b5034:	e7d3      	b.n	b4fde <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b5036:	4659      	mov	r1, fp
        size_t t = 0;
   b5038:	2300      	movs	r3, #0
   b503a:	e7e6      	b.n	b500a <_ZN5Print10printFloatEdh+0x13a>
   b503c:	000b7848 	.word	0x000b7848
   b5040:	7fefffff 	.word	0x7fefffff
   b5044:	000b784c 	.word	0x000b784c
   b5048:	41efffff 	.word	0x41efffff
   b504c:	000b7850 	.word	0x000b7850
   b5050:	c1efffff 	.word	0xc1efffff
   b5054:	3fe00000 	.word	0x3fe00000
   b5058:	000b7854 	.word	0x000b7854
   b505c:	40240000 	.word	0x40240000

000b5060 <_ZN5Print7printlnEdi>:
{
   b5060:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b5062:	b2c9      	uxtb	r1, r1
{
   b5064:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b5066:	f7ff ff33 	bl	b4ed0 <_ZN5Print10printFloatEdh>
   b506a:	4604      	mov	r4, r0
  n += println();
   b506c:	4628      	mov	r0, r5
   b506e:	f7ff fefa 	bl	b4e66 <_ZN5Print7printlnEv>
}
   b5072:	4420      	add	r0, r4
   b5074:	bd38      	pop	{r3, r4, r5, pc}

000b5076 <_ZN5Print7printlnEfi>:
{
   b5076:	b538      	push	{r3, r4, r5, lr}
   b5078:	4604      	mov	r4, r0
   b507a:	ee10 0a10 	vmov	r0, s0
   b507e:	460d      	mov	r5, r1
    return println((double)num, digits);
   b5080:	f001 ff32 	bl	b6ee8 <__aeabi_f2d>
   b5084:	ec41 0b10 	vmov	d0, r0, r1
   b5088:	4629      	mov	r1, r5
   b508a:	4620      	mov	r0, r4
}
   b508c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b5090:	f7ff bfe6 	b.w	b5060 <_ZN5Print7printlnEdi>

000b5094 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b5094:	2300      	movs	r3, #0
   b5096:	6840      	ldr	r0, [r0, #4]
   b5098:	461a      	mov	r2, r3
   b509a:	4619      	mov	r1, r3
   b509c:	f7ff bde2 	b.w	b4c64 <network_on>

000b50a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b50a0:	4b01      	ldr	r3, [pc, #4]	; (b50a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b50a2:	4a02      	ldr	r2, [pc, #8]	; (b50ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b50a4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b50a6:	4770      	bx	lr
   b50a8:	2003e6d4 	.word	0x2003e6d4
   b50ac:	000b7856 	.word	0x000b7856

000b50b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b50b0:	4b02      	ldr	r3, [pc, #8]	; (b50bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b50b2:	681a      	ldr	r2, [r3, #0]
   b50b4:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b50b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b50b8:	4770      	bx	lr
   b50ba:	bf00      	nop
   b50bc:	2003e62c 	.word	0x2003e62c
   b50c0:	2003e6d8 	.word	0x2003e6d8

000b50c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b50c4:	2100      	movs	r1, #0
   b50c6:	f7ff bd91 	b.w	b4bec <system_delay_ms>
	...

000b50cc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b50cc:	4b01      	ldr	r3, [pc, #4]	; (b50d4 <_GLOBAL__sub_I_RGB+0x8>)
   b50ce:	2200      	movs	r2, #0
   b50d0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b50d2:	4770      	bx	lr
   b50d4:	2003e6dc 	.word	0x2003e6dc

000b50d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b50d8:	4b01      	ldr	r3, [pc, #4]	; (b50e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b50da:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b50dc:	4770      	bx	lr
   b50de:	bf00      	nop
   b50e0:	2003e634 	.word	0x2003e634

000b50e4 <serialEventRun>:
{
   b50e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b50e6:	4b0b      	ldr	r3, [pc, #44]	; (b5114 <serialEventRun+0x30>)
   b50e8:	b143      	cbz	r3, b50fc <serialEventRun+0x18>
   b50ea:	f000 f967 	bl	b53bc <_Z16_fetch_usbserialv>
   b50ee:	6803      	ldr	r3, [r0, #0]
   b50f0:	691b      	ldr	r3, [r3, #16]
   b50f2:	4798      	blx	r3
   b50f4:	2800      	cmp	r0, #0
   b50f6:	dd01      	ble.n	b50fc <serialEventRun+0x18>
        serialEvent();
   b50f8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b50fc:	4b06      	ldr	r3, [pc, #24]	; (b5118 <serialEventRun+0x34>)
   b50fe:	b143      	cbz	r3, b5112 <serialEventRun+0x2e>
   b5100:	f000 fb6a 	bl	b57d8 <_Z22__fetch_global_Serial1v>
   b5104:	6803      	ldr	r3, [r0, #0]
   b5106:	691b      	ldr	r3, [r3, #16]
   b5108:	4798      	blx	r3
   b510a:	2800      	cmp	r0, #0
   b510c:	dd01      	ble.n	b5112 <serialEventRun+0x2e>
        serialEvent1();
   b510e:	f3af 8000 	nop.w
}
   b5112:	bd08      	pop	{r3, pc}
	...

000b511c <_post_loop>:
{
   b511c:	b508      	push	{r3, lr}
	serialEventRun();
   b511e:	f7ff ffe1 	bl	b50e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5122:	f7ff fc7b 	bl	b4a1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5126:	4b01      	ldr	r3, [pc, #4]	; (b512c <_post_loop+0x10>)
   b5128:	6018      	str	r0, [r3, #0]
}
   b512a:	bd08      	pop	{r3, pc}
   b512c:	2003e740 	.word	0x2003e740

000b5130 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5130:	4805      	ldr	r0, [pc, #20]	; (b5148 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5132:	4a06      	ldr	r2, [pc, #24]	; (b514c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5134:	4906      	ldr	r1, [pc, #24]	; (b5150 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5136:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5138:	1a12      	subs	r2, r2, r0
   b513a:	f002 fa7b 	bl	b7634 <memcpy>
    __backup_sram_signature = signature;
   b513e:	4b05      	ldr	r3, [pc, #20]	; (b5154 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5140:	4a05      	ldr	r2, [pc, #20]	; (b5158 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5142:	601a      	str	r2, [r3, #0]
}
   b5144:	bd08      	pop	{r3, pc}
   b5146:	bf00      	nop
   b5148:	2003f400 	.word	0x2003f400
   b514c:	2003f404 	.word	0x2003f404
   b5150:	000b7a60 	.word	0x000b7a60
   b5154:	2003f400 	.word	0x2003f400
   b5158:	9a271c1e 	.word	0x9a271c1e

000b515c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b515c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b515e:	2300      	movs	r3, #0
   b5160:	9300      	str	r3, [sp, #0]
   b5162:	461a      	mov	r2, r3
   b5164:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5168:	f7ff fd52 	bl	b4c10 <system_ctrl_set_result>
}
   b516c:	b003      	add	sp, #12
   b516e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5174 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5174:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5176:	8843      	ldrh	r3, [r0, #2]
   b5178:	2b0a      	cmp	r3, #10
   b517a:	d008      	beq.n	b518e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b517c:	2b50      	cmp	r3, #80	; 0x50
   b517e:	d10b      	bne.n	b5198 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5180:	4b09      	ldr	r3, [pc, #36]	; (b51a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5182:	681b      	ldr	r3, [r3, #0]
   b5184:	b14b      	cbz	r3, b519a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5186:	b003      	add	sp, #12
   b5188:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b518c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b518e:	f7ff ffe5 	bl	b515c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5192:	b003      	add	sp, #12
   b5194:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5198:	2300      	movs	r3, #0
   b519a:	9300      	str	r3, [sp, #0]
   b519c:	461a      	mov	r2, r3
   b519e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b51a2:	f7ff fd35 	bl	b4c10 <system_ctrl_set_result>
}
   b51a6:	e7f4      	b.n	b5192 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b51a8:	2003e6f0 	.word	0x2003e6f0

000b51ac <module_user_init_hook>:
{
   b51ac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b51ae:	4812      	ldr	r0, [pc, #72]	; (b51f8 <module_user_init_hook+0x4c>)
   b51b0:	2100      	movs	r1, #0
   b51b2:	f7ff fdbf 	bl	b4d34 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b51b6:	4b11      	ldr	r3, [pc, #68]	; (b51fc <module_user_init_hook+0x50>)
   b51b8:	681a      	ldr	r2, [r3, #0]
   b51ba:	4b11      	ldr	r3, [pc, #68]	; (b5200 <module_user_init_hook+0x54>)
   b51bc:	429a      	cmp	r2, r3
   b51be:	4b11      	ldr	r3, [pc, #68]	; (b5204 <module_user_init_hook+0x58>)
   b51c0:	bf0c      	ite	eq
   b51c2:	2201      	moveq	r2, #1
   b51c4:	2200      	movne	r2, #0
   b51c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b51c8:	d001      	beq.n	b51ce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b51ca:	f7ff ffb1 	bl	b5130 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b51ce:	f7ff fc15 	bl	b49fc <HAL_RNG_GetRandomNumber>
   b51d2:	4604      	mov	r4, r0
    srand(seed);
   b51d4:	f002 fa44 	bl	b7660 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b51d8:	4b0b      	ldr	r3, [pc, #44]	; (b5208 <module_user_init_hook+0x5c>)
   b51da:	b113      	cbz	r3, b51e2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b51dc:	4620      	mov	r0, r4
   b51de:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b51e2:	2100      	movs	r1, #0
   b51e4:	4808      	ldr	r0, [pc, #32]	; (b5208 <module_user_init_hook+0x5c>)
   b51e6:	f7ff fd7d 	bl	b4ce4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b51ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b51ee:	4807      	ldr	r0, [pc, #28]	; (b520c <module_user_init_hook+0x60>)
   b51f0:	2100      	movs	r1, #0
   b51f2:	f7ff bd03 	b.w	b4bfc <system_ctrl_set_app_request_handler>
   b51f6:	bf00      	nop
   b51f8:	000b50d9 	.word	0x000b50d9
   b51fc:	2003f400 	.word	0x2003f400
   b5200:	9a271c1e 	.word	0x9a271c1e
   b5204:	2003e6ec 	.word	0x2003e6ec
   b5208:	00000000 	.word	0x00000000
   b520c:	000b5175 	.word	0x000b5175

000b5210 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5210:	4770      	bx	lr

000b5212 <_ZN9IPAddressD0Ev>:
   b5212:	b510      	push	{r4, lr}
   b5214:	2118      	movs	r1, #24
   b5216:	4604      	mov	r4, r0
   b5218:	f7fe ff3f 	bl	b409a <_ZdlPvj>
   b521c:	4620      	mov	r0, r4
   b521e:	bd10      	pop	{r4, pc}

000b5220 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5220:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5222:	7d03      	ldrb	r3, [r0, #20]
   b5224:	2b06      	cmp	r3, #6
{
   b5226:	b08d      	sub	sp, #52	; 0x34
   b5228:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b522a:	f100 0704 	add.w	r7, r0, #4
   b522e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5232:	d012      	beq.n	b525a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5234:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b5238:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b523c:	220a      	movs	r2, #10
   b523e:	4630      	mov	r0, r6
   b5240:	f7ff fe27 	bl	b4e92 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5244:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5246:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5248:	d019      	beq.n	b527e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b524a:	2c00      	cmp	r4, #0
   b524c:	d0f4      	beq.n	b5238 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b524e:	212e      	movs	r1, #46	; 0x2e
   b5250:	4630      	mov	r0, r6
   b5252:	f7ff fe05 	bl	b4e60 <_ZN5Print5printEc>
   b5256:	4404      	add	r4, r0
   b5258:	e7ee      	b.n	b5238 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b525a:	232f      	movs	r3, #47	; 0x2f
   b525c:	466a      	mov	r2, sp
   b525e:	4639      	mov	r1, r7
   b5260:	200a      	movs	r0, #10
		buf[0] = 0;
   b5262:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5266:	f7ff fbe9 	bl	b4a3c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b526a:	4668      	mov	r0, sp
   b526c:	f002 fa26 	bl	b76bc <strlen>
   b5270:	6833      	ldr	r3, [r6, #0]
   b5272:	4602      	mov	r2, r0
   b5274:	68db      	ldr	r3, [r3, #12]
   b5276:	4669      	mov	r1, sp
   b5278:	4630      	mov	r0, r6
   b527a:	4798      	blx	r3
   b527c:	4604      	mov	r4, r0
    }
    return n;
}
   b527e:	4620      	mov	r0, r4
   b5280:	b00d      	add	sp, #52	; 0x34
   b5282:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5284 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5284:	b510      	push	{r4, lr}
   b5286:	4b05      	ldr	r3, [pc, #20]	; (b529c <_ZN9IPAddressC1Ev+0x18>)
   b5288:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b528a:	2211      	movs	r2, #17
   b528c:	f840 3b04 	str.w	r3, [r0], #4
   b5290:	2100      	movs	r1, #0
   b5292:	f002 f9dd 	bl	b7650 <memset>
}
   b5296:	4620      	mov	r0, r4
   b5298:	bd10      	pop	{r4, pc}
   b529a:	bf00      	nop
   b529c:	000b7880 	.word	0x000b7880

000b52a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b52a0:	4603      	mov	r3, r0
   b52a2:	4a07      	ldr	r2, [pc, #28]	; (b52c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b52a4:	b510      	push	{r4, lr}
   b52a6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b52aa:	f101 0210 	add.w	r2, r1, #16
   b52ae:	f851 4b04 	ldr.w	r4, [r1], #4
   b52b2:	f843 4b04 	str.w	r4, [r3], #4
   b52b6:	4291      	cmp	r1, r2
   b52b8:	d1f9      	bne.n	b52ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b52ba:	780a      	ldrb	r2, [r1, #0]
   b52bc:	701a      	strb	r2, [r3, #0]
}
   b52be:	bd10      	pop	{r4, pc}
   b52c0:	000b7880 	.word	0x000b7880

000b52c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b52c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b52c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b52ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b52ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b52d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b52d6:	2304      	movs	r3, #4
   b52d8:	6041      	str	r1, [r0, #4]
   b52da:	7503      	strb	r3, [r0, #20]
}
   b52dc:	bd10      	pop	{r4, pc}
	...

000b52e0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b52e0:	b507      	push	{r0, r1, r2, lr}
   b52e2:	4b06      	ldr	r3, [pc, #24]	; (b52fc <_ZN9IPAddressC1EPKh+0x1c>)
   b52e4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b52e6:	78cb      	ldrb	r3, [r1, #3]
   b52e8:	9300      	str	r3, [sp, #0]
   b52ea:	788b      	ldrb	r3, [r1, #2]
   b52ec:	784a      	ldrb	r2, [r1, #1]
   b52ee:	7809      	ldrb	r1, [r1, #0]
   b52f0:	f7ff ffe8 	bl	b52c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b52f4:	b003      	add	sp, #12
   b52f6:	f85d fb04 	ldr.w	pc, [sp], #4
   b52fa:	bf00      	nop
   b52fc:	000b7880 	.word	0x000b7880

000b5300 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5300:	7441      	strb	r1, [r0, #17]
}
   b5302:	4770      	bx	lr

000b5304 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5304:	4770      	bx	lr

000b5306 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5306:	4770      	bx	lr

000b5308 <_ZN9USBSerial4readEv>:
{
   b5308:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b530a:	2100      	movs	r1, #0
   b530c:	7c00      	ldrb	r0, [r0, #16]
   b530e:	f7ff fc45 	bl	b4b9c <HAL_USB_USART_Receive_Data>
}
   b5312:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5316:	bd08      	pop	{r3, pc}

000b5318 <_ZN9USBSerial4peekEv>:
{
   b5318:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b531a:	2101      	movs	r1, #1
   b531c:	7c00      	ldrb	r0, [r0, #16]
   b531e:	f7ff fc3d 	bl	b4b9c <HAL_USB_USART_Receive_Data>
}
   b5322:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5326:	bd08      	pop	{r3, pc}

000b5328 <_ZN9USBSerial17availableForWriteEv>:
{
   b5328:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b532a:	7c00      	ldrb	r0, [r0, #16]
   b532c:	f7ff fc2e 	bl	b4b8c <HAL_USB_USART_Available_Data_For_Write>
}
   b5330:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5334:	bd08      	pop	{r3, pc}

000b5336 <_ZN9USBSerial9availableEv>:
{
   b5336:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5338:	7c00      	ldrb	r0, [r0, #16]
   b533a:	f7ff fc1f 	bl	b4b7c <HAL_USB_USART_Available_Data>
}
   b533e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5342:	bd08      	pop	{r3, pc}

000b5344 <_ZN9USBSerial5writeEh>:
{
   b5344:	b513      	push	{r0, r1, r4, lr}
   b5346:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5348:	7c00      	ldrb	r0, [r0, #16]
{
   b534a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b534c:	f7ff fc1e 	bl	b4b8c <HAL_USB_USART_Available_Data_For_Write>
   b5350:	2800      	cmp	r0, #0
   b5352:	9901      	ldr	r1, [sp, #4]
   b5354:	dc01      	bgt.n	b535a <_ZN9USBSerial5writeEh+0x16>
   b5356:	7c60      	ldrb	r0, [r4, #17]
   b5358:	b120      	cbz	r0, b5364 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b535a:	7c20      	ldrb	r0, [r4, #16]
   b535c:	f7ff fc26 	bl	b4bac <HAL_USB_USART_Send_Data>
   b5360:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5364:	b002      	add	sp, #8
   b5366:	bd10      	pop	{r4, pc}

000b5368 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5368:	7c00      	ldrb	r0, [r0, #16]
   b536a:	f7ff bc27 	b.w	b4bbc <HAL_USB_USART_Flush_Data>

000b536e <_ZN9USBSerialD0Ev>:
   b536e:	b510      	push	{r4, lr}
   b5370:	2114      	movs	r1, #20
   b5372:	4604      	mov	r4, r0
   b5374:	f7fe fe91 	bl	b409a <_ZdlPvj>
   b5378:	4620      	mov	r0, r4
   b537a:	bd10      	pop	{r4, pc}

000b537c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b537c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b537e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5382:	4604      	mov	r4, r0
   b5384:	4608      	mov	r0, r1
   b5386:	2100      	movs	r1, #0
   b5388:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b538c:	4b04      	ldr	r3, [pc, #16]	; (b53a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b538e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5390:	2301      	movs	r3, #1
  _serial = serial;
   b5392:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5394:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5396:	4611      	mov	r1, r2
   b5398:	f7ff fbe0 	bl	b4b5c <HAL_USB_USART_Init>
}
   b539c:	4620      	mov	r0, r4
   b539e:	bd10      	pop	{r4, pc}
   b53a0:	000b7894 	.word	0x000b7894

000b53a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b53a4:	7c00      	ldrb	r0, [r0, #16]
   b53a6:	2200      	movs	r2, #0
   b53a8:	f7ff bbe0 	b.w	b4b6c <HAL_USB_USART_Begin>

000b53ac <_Z19acquireSerialBufferv>:
{
   b53ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b53ae:	2214      	movs	r2, #20
{
   b53b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b53b2:	2100      	movs	r1, #0
   b53b4:	f002 f94c 	bl	b7650 <memset>
}
   b53b8:	4620      	mov	r0, r4
   b53ba:	bd10      	pop	{r4, pc}

000b53bc <_Z16_fetch_usbserialv>:
{
   b53bc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53be:	4c0f      	ldr	r4, [pc, #60]	; (b53fc <_Z16_fetch_usbserialv+0x40>)
{
   b53c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b53c2:	a803      	add	r0, sp, #12
   b53c4:	f7ff fff2 	bl	b53ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53c8:	7821      	ldrb	r1, [r4, #0]
   b53ca:	f3bf 8f5b 	dmb	ish
   b53ce:	f011 0101 	ands.w	r1, r1, #1
   b53d2:	d10f      	bne.n	b53f4 <_Z16_fetch_usbserialv+0x38>
   b53d4:	4620      	mov	r0, r4
   b53d6:	9101      	str	r1, [sp, #4]
   b53d8:	f7fe fe61 	bl	b409e <__cxa_guard_acquire>
   b53dc:	9901      	ldr	r1, [sp, #4]
   b53de:	b148      	cbz	r0, b53f4 <_Z16_fetch_usbserialv+0x38>
   b53e0:	aa03      	add	r2, sp, #12
   b53e2:	4807      	ldr	r0, [pc, #28]	; (b5400 <_Z16_fetch_usbserialv+0x44>)
   b53e4:	f7ff ffca 	bl	b537c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b53e8:	4620      	mov	r0, r4
   b53ea:	f7fe fe5d 	bl	b40a8 <__cxa_guard_release>
   b53ee:	4805      	ldr	r0, [pc, #20]	; (b5404 <_Z16_fetch_usbserialv+0x48>)
   b53f0:	f002 f91a 	bl	b7628 <atexit>
	return _usbserial;
}
   b53f4:	4802      	ldr	r0, [pc, #8]	; (b5400 <_Z16_fetch_usbserialv+0x44>)
   b53f6:	b008      	add	sp, #32
   b53f8:	bd10      	pop	{r4, pc}
   b53fa:	bf00      	nop
   b53fc:	2003e6f4 	.word	0x2003e6f4
   b5400:	2003e6f8 	.word	0x2003e6f8
   b5404:	000b5305 	.word	0x000b5305

000b5408 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b5408:	f7ff baf0 	b.w	b49ec <HAL_Interrupts_Disable_All>

000b540c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b540c:	f7ff bae6 	b.w	b49dc <HAL_Interrupts_Enable_All>

000b5410 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5410:	4770      	bx	lr

000b5412 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5412:	7441      	strb	r1, [r0, #17]
}
   b5414:	4770      	bx	lr

000b5416 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5416:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5418:	7c00      	ldrb	r0, [r0, #16]
   b541a:	f7ff fb47 	bl	b4aac <hal_usart_available_data_for_write>
}
   b541e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5422:	bd08      	pop	{r3, pc}

000b5424 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5424:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5426:	7c00      	ldrb	r0, [r0, #16]
   b5428:	f7ff fb18 	bl	b4a5c <hal_usart_available>
}
   b542c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5430:	bd08      	pop	{r3, pc}

000b5432 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5432:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5434:	7c00      	ldrb	r0, [r0, #16]
   b5436:	f7ff fb21 	bl	b4a7c <hal_usart_peek>
}
   b543a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b543e:	bd08      	pop	{r3, pc}

000b5440 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5440:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5442:	7c00      	ldrb	r0, [r0, #16]
   b5444:	f7ff fb12 	bl	b4a6c <hal_usart_read>
}
   b5448:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b544c:	bd08      	pop	{r3, pc}

000b544e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b544e:	7c00      	ldrb	r0, [r0, #16]
   b5450:	f7ff bb1c 	b.w	b4a8c <hal_usart_flush>

000b5454 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5454:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5456:	7c45      	ldrb	r5, [r0, #17]
{
   b5458:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b545a:	b12d      	cbz	r5, b5468 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b545c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b545e:	b003      	add	sp, #12
   b5460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5464:	f7ff baf2 	b.w	b4a4c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5468:	7c00      	ldrb	r0, [r0, #16]
   b546a:	9101      	str	r1, [sp, #4]
   b546c:	f7ff fb1e 	bl	b4aac <hal_usart_available_data_for_write>
   b5470:	2800      	cmp	r0, #0
   b5472:	9901      	ldr	r1, [sp, #4]
   b5474:	dcf2      	bgt.n	b545c <_ZN11USARTSerial5writeEh+0x8>
}
   b5476:	4628      	mov	r0, r5
   b5478:	b003      	add	sp, #12
   b547a:	bd30      	pop	{r4, r5, pc}

000b547c <_ZN11USARTSerialD0Ev>:
   b547c:	b510      	push	{r4, lr}
   b547e:	2114      	movs	r1, #20
   b5480:	4604      	mov	r4, r0
   b5482:	f7fe fe0a 	bl	b409a <_ZdlPvj>
   b5486:	4620      	mov	r0, r4
   b5488:	bd10      	pop	{r4, pc}
	...

000b548c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b548c:	b510      	push	{r4, lr}
   b548e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5492:	4604      	mov	r4, r0
   b5494:	4608      	mov	r0, r1
   b5496:	4611      	mov	r1, r2
   b5498:	2200      	movs	r2, #0
   b549a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b549e:	4b04      	ldr	r3, [pc, #16]	; (b54b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b54a0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b54a2:	2301      	movs	r3, #1
  _serial = serial;
   b54a4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b54a6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b54a8:	f7ff fb08 	bl	b4abc <hal_usart_init_ex>
}
   b54ac:	4620      	mov	r0, r4
   b54ae:	bd10      	pop	{r4, pc}
   b54b0:	000b78c4 	.word	0x000b78c4

000b54b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b54b4:	4770      	bx	lr

000b54b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b54b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54b8:	4606      	mov	r6, r0
   b54ba:	4615      	mov	r5, r2
   b54bc:	460c      	mov	r4, r1
   b54be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b54c0:	42bc      	cmp	r4, r7
   b54c2:	d006      	beq.n	b54d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b54c4:	6833      	ldr	r3, [r6, #0]
   b54c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b54ca:	689b      	ldr	r3, [r3, #8]
   b54cc:	4630      	mov	r0, r6
   b54ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b54d0:	e7f6      	b.n	b54c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b54d2:	4628      	mov	r0, r5
   b54d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b54d6:	7c00      	ldrb	r0, [r0, #16]
   b54d8:	2200      	movs	r2, #0
   b54da:	f7ff baf7 	b.w	b4acc <hal_i2c_write>

000b54de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b54de:	7c00      	ldrb	r0, [r0, #16]
   b54e0:	2100      	movs	r1, #0
   b54e2:	f7ff bafb 	b.w	b4adc <hal_i2c_available>

000b54e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b54e6:	7c00      	ldrb	r0, [r0, #16]
   b54e8:	2100      	movs	r1, #0
   b54ea:	f7ff baff 	b.w	b4aec <hal_i2c_read>

000b54ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b54ee:	7c00      	ldrb	r0, [r0, #16]
   b54f0:	2100      	movs	r1, #0
   b54f2:	f7ff bb03 	b.w	b4afc <hal_i2c_peek>

000b54f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b54f6:	7c00      	ldrb	r0, [r0, #16]
   b54f8:	2100      	movs	r1, #0
   b54fa:	f7ff bb07 	b.w	b4b0c <hal_i2c_flush>

000b54fe <_ZN7TwoWireD0Ev>:
   b54fe:	b510      	push	{r4, lr}
   b5500:	2114      	movs	r1, #20
   b5502:	4604      	mov	r4, r0
   b5504:	f7fe fdc9 	bl	b409a <_ZdlPvj>
   b5508:	4620      	mov	r0, r4
   b550a:	bd10      	pop	{r4, pc}

000b550c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b550c:	b510      	push	{r4, lr}
   b550e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5512:	4604      	mov	r4, r0
   b5514:	4608      	mov	r0, r1
   b5516:	2100      	movs	r1, #0
   b5518:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b551c:	4b03      	ldr	r3, [pc, #12]	; (b552c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b551e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5520:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5522:	4611      	mov	r1, r2
   b5524:	f7ff fb02 	bl	b4b2c <hal_i2c_init>
}
   b5528:	4620      	mov	r0, r4
   b552a:	bd10      	pop	{r4, pc}
   b552c:	000b78f4 	.word	0x000b78f4

000b5530 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5530:	2200      	movs	r2, #0
   b5532:	6840      	ldr	r0, [r0, #4]
   b5534:	4611      	mov	r1, r2
   b5536:	f7ff bb8d 	b.w	b4c54 <network_ready>

000b553a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b553a:	2200      	movs	r2, #0
   b553c:	6840      	ldr	r0, [r0, #4]
   b553e:	4611      	mov	r1, r2
   b5540:	f7ff bba8 	b.w	b4c94 <network_listening>

000b5544 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5544:	2200      	movs	r2, #0
   b5546:	6840      	ldr	r0, [r0, #4]
   b5548:	4611      	mov	r1, r2
   b554a:	f7ff bbb3 	b.w	b4cb4 <network_get_listen_timeout>

000b554e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b554e:	6840      	ldr	r0, [r0, #4]
   b5550:	2200      	movs	r2, #0
   b5552:	f7ff bba7 	b.w	b4ca4 <network_set_listen_timeout>

000b5556 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5556:	6840      	ldr	r0, [r0, #4]
   b5558:	2200      	movs	r2, #0
   b555a:	f081 0101 	eor.w	r1, r1, #1
   b555e:	f7ff bb91 	b.w	b4c84 <network_listen>

000b5562 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5562:	2300      	movs	r3, #0
   b5564:	6840      	ldr	r0, [r0, #4]
   b5566:	461a      	mov	r2, r3
   b5568:	4619      	mov	r1, r3
   b556a:	f7ff bb83 	b.w	b4c74 <network_off>

000b556e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b556e:	2200      	movs	r2, #0
   b5570:	6840      	ldr	r0, [r0, #4]
   b5572:	4611      	mov	r1, r2
   b5574:	f7ff bb5e 	b.w	b4c34 <network_connecting>

000b5578 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5578:	6840      	ldr	r0, [r0, #4]
   b557a:	2200      	movs	r2, #0
   b557c:	2102      	movs	r1, #2
   b557e:	f7ff bb61 	b.w	b4c44 <network_disconnect>

000b5582 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5582:	2300      	movs	r3, #0
   b5584:	6840      	ldr	r0, [r0, #4]
   b5586:	461a      	mov	r2, r3
   b5588:	f7ff bb4c 	b.w	b4c24 <network_connect>

000b558c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b558c:	4b02      	ldr	r3, [pc, #8]	; (b5598 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b558e:	2204      	movs	r2, #4
   b5590:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5592:	4a02      	ldr	r2, [pc, #8]	; (b559c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5594:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5596:	4770      	bx	lr
   b5598:	2003e70c 	.word	0x2003e70c
   b559c:	000b791c 	.word	0x000b791c

000b55a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b55a0:	2300      	movs	r3, #0
   b55a2:	6840      	ldr	r0, [r0, #4]
   b55a4:	461a      	mov	r2, r3
   b55a6:	f7ff bb3d 	b.w	b4c24 <network_connect>

000b55aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b55aa:	6840      	ldr	r0, [r0, #4]
   b55ac:	2200      	movs	r2, #0
   b55ae:	2102      	movs	r1, #2
   b55b0:	f7ff bb48 	b.w	b4c44 <network_disconnect>

000b55b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b55b4:	2200      	movs	r2, #0
   b55b6:	6840      	ldr	r0, [r0, #4]
   b55b8:	4611      	mov	r1, r2
   b55ba:	f7ff bb3b 	b.w	b4c34 <network_connecting>

000b55be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b55be:	2200      	movs	r2, #0
   b55c0:	6840      	ldr	r0, [r0, #4]
   b55c2:	4611      	mov	r1, r2
   b55c4:	f7ff bb46 	b.w	b4c54 <network_ready>

000b55c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b55c8:	2300      	movs	r3, #0
   b55ca:	6840      	ldr	r0, [r0, #4]
   b55cc:	461a      	mov	r2, r3
   b55ce:	4619      	mov	r1, r3
   b55d0:	f7ff bb48 	b.w	b4c64 <network_on>

000b55d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b55d4:	2300      	movs	r3, #0
   b55d6:	6840      	ldr	r0, [r0, #4]
   b55d8:	461a      	mov	r2, r3
   b55da:	4619      	mov	r1, r3
   b55dc:	f7ff bb4a 	b.w	b4c74 <network_off>

000b55e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b55e0:	6840      	ldr	r0, [r0, #4]
   b55e2:	2100      	movs	r1, #0
   b55e4:	f7ff bb6e 	b.w	b4cc4 <network_is_on>

000b55e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b55e8:	6840      	ldr	r0, [r0, #4]
   b55ea:	2100      	movs	r1, #0
   b55ec:	f7ff bb72 	b.w	b4cd4 <network_is_off>

000b55f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b55f0:	6840      	ldr	r0, [r0, #4]
   b55f2:	2200      	movs	r2, #0
   b55f4:	f081 0101 	eor.w	r1, r1, #1
   b55f8:	f7ff bb44 	b.w	b4c84 <network_listen>

000b55fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b55fc:	6840      	ldr	r0, [r0, #4]
   b55fe:	2200      	movs	r2, #0
   b5600:	f7ff bb50 	b.w	b4ca4 <network_set_listen_timeout>

000b5604 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5604:	2200      	movs	r2, #0
   b5606:	6840      	ldr	r0, [r0, #4]
   b5608:	4611      	mov	r1, r2
   b560a:	f7ff bb53 	b.w	b4cb4 <network_get_listen_timeout>

000b560e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b560e:	2200      	movs	r2, #0
   b5610:	6840      	ldr	r0, [r0, #4]
   b5612:	4611      	mov	r1, r2
   b5614:	f7ff bb3e 	b.w	b4c94 <network_listening>

000b5618 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b561c:	b095      	sub	sp, #84	; 0x54
   b561e:	4614      	mov	r4, r2
   b5620:	460d      	mov	r5, r1
   b5622:	4607      	mov	r7, r0
    IPAddress addr;
   b5624:	f7ff fe2e 	bl	b5284 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5628:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b562a:	221c      	movs	r2, #28
   b562c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b562e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5630:	f002 f80e 	bl	b7650 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5634:	2340      	movs	r3, #64	; 0x40
   b5636:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5638:	4620      	mov	r0, r4
   b563a:	466b      	mov	r3, sp
   b563c:	aa0c      	add	r2, sp, #48	; 0x30
   b563e:	2100      	movs	r1, #0
   b5640:	f7ff f9b4 	bl	b49ac <netdb_getaddrinfo>
    if (!r) {
   b5644:	4604      	mov	r4, r0
   b5646:	2800      	cmp	r0, #0
   b5648:	d14b      	bne.n	b56e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b564a:	4602      	mov	r2, r0
   b564c:	2101      	movs	r1, #1
   b564e:	6868      	ldr	r0, [r5, #4]
   b5650:	f7ff fb00 	bl	b4c54 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5654:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5656:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5658:	4622      	mov	r2, r4
   b565a:	6868      	ldr	r0, [r5, #4]
   b565c:	f7ff fafa 	bl	b4c54 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5660:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5662:	4681      	mov	r9, r0
        bool ok = false;
   b5664:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5666:	2e00      	cmp	r6, #0
   b5668:	d03b      	beq.n	b56e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b566a:	2900      	cmp	r1, #0
   b566c:	d139      	bne.n	b56e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b566e:	6873      	ldr	r3, [r6, #4]
   b5670:	2b02      	cmp	r3, #2
   b5672:	d003      	beq.n	b567c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5674:	2b0a      	cmp	r3, #10
   b5676:	d011      	beq.n	b569c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5678:	69f6      	ldr	r6, [r6, #28]
   b567a:	e7f4      	b.n	b5666 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b567c:	f1b8 0f00 	cmp.w	r8, #0
   b5680:	d0fa      	beq.n	b5678 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5682:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5684:	a806      	add	r0, sp, #24
   b5686:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5688:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b568a:	f7ff fe29 	bl	b52e0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b568e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5690:	1d3c      	adds	r4, r7, #4
   b5692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5694:	682b      	ldr	r3, [r5, #0]
   b5696:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5698:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b569a:	e7ed      	b.n	b5678 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b569c:	f1b9 0f00 	cmp.w	r9, #0
   b56a0:	d0ea      	beq.n	b5678 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b56a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b56a4:	2210      	movs	r2, #16
   b56a6:	a801      	add	r0, sp, #4
   b56a8:	f001 ffd2 	bl	b7650 <memset>
                    a.v = 6;
   b56ac:	2306      	movs	r3, #6
   b56ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b56b2:	ad01      	add	r5, sp, #4
   b56b4:	f104 0308 	add.w	r3, r4, #8
   b56b8:	3418      	adds	r4, #24
   b56ba:	6818      	ldr	r0, [r3, #0]
   b56bc:	6859      	ldr	r1, [r3, #4]
   b56be:	462a      	mov	r2, r5
   b56c0:	c203      	stmia	r2!, {r0, r1}
   b56c2:	3308      	adds	r3, #8
   b56c4:	42a3      	cmp	r3, r4
   b56c6:	4615      	mov	r5, r2
   b56c8:	d1f7      	bne.n	b56ba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b56ca:	a901      	add	r1, sp, #4
   b56cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b56ce:	ad07      	add	r5, sp, #28
   b56d0:	f7ff fde6 	bl	b52a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b56d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b56d6:	1d3c      	adds	r4, r7, #4
   b56d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b56da:	682b      	ldr	r3, [r5, #0]
   b56dc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b56de:	4649      	mov	r1, r9
   b56e0:	e7ca      	b.n	b5678 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b56e2:	9800      	ldr	r0, [sp, #0]
   b56e4:	f7ff f95a 	bl	b499c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b56e8:	4638      	mov	r0, r7
   b56ea:	b015      	add	sp, #84	; 0x54
   b56ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b56f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b56f0:	4b02      	ldr	r3, [pc, #8]	; (b56fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b56f2:	4a03      	ldr	r2, [pc, #12]	; (b5700 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b56f4:	601a      	str	r2, [r3, #0]
   b56f6:	2200      	movs	r2, #0
   b56f8:	605a      	str	r2, [r3, #4]

} // spark
   b56fa:	4770      	bx	lr
   b56fc:	2003e714 	.word	0x2003e714
   b5700:	000b7958 	.word	0x000b7958

000b5704 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5704:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5706:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5708:	d902      	bls.n	b5710 <pinAvailable+0xc>
    return false;
   b570a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b570c:	b002      	add	sp, #8
   b570e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5710:	f1a0 030b 	sub.w	r3, r0, #11
   b5714:	2b02      	cmp	r3, #2
   b5716:	d81a      	bhi.n	b574e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5718:	4c17      	ldr	r4, [pc, #92]	; (b5778 <pinAvailable+0x74>)
   b571a:	7821      	ldrb	r1, [r4, #0]
   b571c:	f3bf 8f5b 	dmb	ish
   b5720:	f011 0101 	ands.w	r1, r1, #1
   b5724:	d10b      	bne.n	b573e <pinAvailable+0x3a>
   b5726:	4620      	mov	r0, r4
   b5728:	9101      	str	r1, [sp, #4]
   b572a:	f7fe fcb8 	bl	b409e <__cxa_guard_acquire>
   b572e:	9901      	ldr	r1, [sp, #4]
   b5730:	b128      	cbz	r0, b573e <pinAvailable+0x3a>
   b5732:	4812      	ldr	r0, [pc, #72]	; (b577c <pinAvailable+0x78>)
   b5734:	f7ff fb44 	bl	b4dc0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5738:	4620      	mov	r0, r4
   b573a:	f7fe fcb5 	bl	b40a8 <__cxa_guard_release>
   b573e:	4b0f      	ldr	r3, [pc, #60]	; (b577c <pinAvailable+0x78>)
   b5740:	7818      	ldrb	r0, [r3, #0]
   b5742:	f7ff fa03 	bl	b4b4c <hal_spi_is_enabled>
   b5746:	2800      	cmp	r0, #0
   b5748:	d1df      	bne.n	b570a <pinAvailable+0x6>
  return true; // 'pin' is available
   b574a:	2001      	movs	r0, #1
   b574c:	e7de      	b.n	b570c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b574e:	2801      	cmp	r0, #1
   b5750:	d809      	bhi.n	b5766 <pinAvailable+0x62>
   b5752:	f000 f87d 	bl	b5850 <_Z19__fetch_global_Wirev>
   b5756:	2100      	movs	r1, #0
   b5758:	7c00      	ldrb	r0, [r0, #16]
   b575a:	f7ff f9df 	bl	b4b1c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b575e:	f080 0001 	eor.w	r0, r0, #1
   b5762:	b2c0      	uxtb	r0, r0
   b5764:	e7d2      	b.n	b570c <pinAvailable+0x8>
   b5766:	3809      	subs	r0, #9
   b5768:	2801      	cmp	r0, #1
   b576a:	d8ee      	bhi.n	b574a <pinAvailable+0x46>
   b576c:	f000 f834 	bl	b57d8 <_Z22__fetch_global_Serial1v>
   b5770:	7c00      	ldrb	r0, [r0, #16]
   b5772:	f7ff f993 	bl	b4a9c <hal_usart_is_enabled>
   b5776:	e7f2      	b.n	b575e <pinAvailable+0x5a>
   b5778:	2003e71c 	.word	0x2003e71c
   b577c:	2003e720 	.word	0x2003e720

000b5780 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5780:	2823      	cmp	r0, #35	; 0x23
{
   b5782:	b538      	push	{r3, r4, r5, lr}
   b5784:	4604      	mov	r4, r0
   b5786:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5788:	d80a      	bhi.n	b57a0 <pinMode+0x20>
   b578a:	29ff      	cmp	r1, #255	; 0xff
   b578c:	d008      	beq.n	b57a0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b578e:	f7ff ffb9 	bl	b5704 <pinAvailable>
   b5792:	b128      	cbz	r0, b57a0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5794:	4629      	mov	r1, r5
   b5796:	4620      	mov	r0, r4
}
   b5798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b579c:	f7ff b916 	b.w	b49cc <HAL_Pin_Mode>
}
   b57a0:	bd38      	pop	{r3, r4, r5, pc}

000b57a2 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57a2:	4770      	bx	lr

000b57a4 <_Z20acquireSerial1Bufferv>:
{
   b57a4:	b538      	push	{r3, r4, r5, lr}
   b57a6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b57a8:	2514      	movs	r5, #20
   b57aa:	462a      	mov	r2, r5
   b57ac:	2100      	movs	r1, #0
   b57ae:	f001 ff4f 	bl	b7650 <memset>
   b57b2:	8025      	strh	r5, [r4, #0]
   b57b4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57b6:	4907      	ldr	r1, [pc, #28]	; (b57d4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b57b8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57ba:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b57bc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57be:	f000 f86b 	bl	b5898 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57c2:	4904      	ldr	r1, [pc, #16]	; (b57d4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b57c4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b57c6:	4628      	mov	r0, r5
   b57c8:	f000 f866 	bl	b5898 <_ZnajRKSt9nothrow_t>
    };
   b57cc:	60e0      	str	r0, [r4, #12]
}
   b57ce:	4620      	mov	r0, r4
   b57d0:	bd38      	pop	{r3, r4, r5, pc}
   b57d2:	bf00      	nop
   b57d4:	000b798c 	.word	0x000b798c

000b57d8 <_Z22__fetch_global_Serial1v>:
{
   b57d8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57da:	4d0e      	ldr	r5, [pc, #56]	; (b5814 <_Z22__fetch_global_Serial1v+0x3c>)
   b57dc:	7829      	ldrb	r1, [r5, #0]
   b57de:	f3bf 8f5b 	dmb	ish
   b57e2:	f011 0401 	ands.w	r4, r1, #1
{
   b57e6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b57e8:	d111      	bne.n	b580e <_Z22__fetch_global_Serial1v+0x36>
   b57ea:	4628      	mov	r0, r5
   b57ec:	f7fe fc57 	bl	b409e <__cxa_guard_acquire>
   b57f0:	b168      	cbz	r0, b580e <_Z22__fetch_global_Serial1v+0x36>
   b57f2:	a801      	add	r0, sp, #4
   b57f4:	f7ff ffd6 	bl	b57a4 <_Z20acquireSerial1Bufferv>
   b57f8:	aa01      	add	r2, sp, #4
   b57fa:	4621      	mov	r1, r4
   b57fc:	4806      	ldr	r0, [pc, #24]	; (b5818 <_Z22__fetch_global_Serial1v+0x40>)
   b57fe:	f7ff fe45 	bl	b548c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5802:	4628      	mov	r0, r5
   b5804:	f7fe fc50 	bl	b40a8 <__cxa_guard_release>
   b5808:	4804      	ldr	r0, [pc, #16]	; (b581c <_Z22__fetch_global_Serial1v+0x44>)
   b580a:	f001 ff0d 	bl	b7628 <atexit>
    return serial1;
}
   b580e:	4802      	ldr	r0, [pc, #8]	; (b5818 <_Z22__fetch_global_Serial1v+0x40>)
   b5810:	b007      	add	sp, #28
   b5812:	bd30      	pop	{r4, r5, pc}
   b5814:	2003e728 	.word	0x2003e728
   b5818:	2003e72c 	.word	0x2003e72c
   b581c:	000b57a3 	.word	0x000b57a3

000b5820 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5820:	4770      	bx	lr
	...

000b5824 <_Z17acquireWireBufferv>:
{
   b5824:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5826:	2520      	movs	r5, #32
   b5828:	2314      	movs	r3, #20
{
   b582a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b582c:	6003      	str	r3, [r0, #0]
   b582e:	6085      	str	r5, [r0, #8]
   b5830:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5832:	4906      	ldr	r1, [pc, #24]	; (b584c <_Z17acquireWireBufferv+0x28>)
   b5834:	4628      	mov	r0, r5
   b5836:	f000 f82f 	bl	b5898 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b583a:	4904      	ldr	r1, [pc, #16]	; (b584c <_Z17acquireWireBufferv+0x28>)
	};
   b583c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b583e:	4628      	mov	r0, r5
   b5840:	f000 f82a 	bl	b5898 <_ZnajRKSt9nothrow_t>
	};
   b5844:	60e0      	str	r0, [r4, #12]
}
   b5846:	4620      	mov	r0, r4
   b5848:	bd38      	pop	{r3, r4, r5, pc}
   b584a:	bf00      	nop
   b584c:	000b798c 	.word	0x000b798c

000b5850 <_Z19__fetch_global_Wirev>:
{
   b5850:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5852:	4d0e      	ldr	r5, [pc, #56]	; (b588c <_Z19__fetch_global_Wirev+0x3c>)
   b5854:	7829      	ldrb	r1, [r5, #0]
   b5856:	f3bf 8f5b 	dmb	ish
   b585a:	f011 0401 	ands.w	r4, r1, #1
{
   b585e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5860:	d111      	bne.n	b5886 <_Z19__fetch_global_Wirev+0x36>
   b5862:	4628      	mov	r0, r5
   b5864:	f7fe fc1b 	bl	b409e <__cxa_guard_acquire>
   b5868:	b168      	cbz	r0, b5886 <_Z19__fetch_global_Wirev+0x36>
   b586a:	a801      	add	r0, sp, #4
   b586c:	f7ff ffda 	bl	b5824 <_Z17acquireWireBufferv>
   b5870:	aa01      	add	r2, sp, #4
   b5872:	4621      	mov	r1, r4
   b5874:	4806      	ldr	r0, [pc, #24]	; (b5890 <_Z19__fetch_global_Wirev+0x40>)
   b5876:	f7ff fe49 	bl	b550c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b587a:	4628      	mov	r0, r5
   b587c:	f7fe fc14 	bl	b40a8 <__cxa_guard_release>
   b5880:	4804      	ldr	r0, [pc, #16]	; (b5894 <_Z19__fetch_global_Wirev+0x44>)
   b5882:	f001 fed1 	bl	b7628 <atexit>
	return wire;
}
   b5886:	4802      	ldr	r0, [pc, #8]	; (b5890 <_Z19__fetch_global_Wirev+0x40>)
   b5888:	b007      	add	sp, #28
   b588a:	bd30      	pop	{r4, r5, pc}
   b588c:	2003e744 	.word	0x2003e744
   b5890:	2003e748 	.word	0x2003e748
   b5894:	000b5821 	.word	0x000b5821

000b5898 <_ZnajRKSt9nothrow_t>:
   b5898:	f7fe bbfd 	b.w	b4096 <_Znaj>
   b589c:	0000      	movs	r0, r0
	...

000b58a0 <pow>:
   b58a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b58a2:	ed2d 8b02 	vpush	{d8}
   b58a6:	ec57 6b10 	vmov	r6, r7, d0
   b58aa:	ec55 4b11 	vmov	r4, r5, d1
   b58ae:	f000 f8ff 	bl	b5ab0 <__ieee754_pow>
   b58b2:	4b63      	ldr	r3, [pc, #396]	; (b5a40 <pow+0x1a0>)
   b58b4:	eeb0 8a40 	vmov.f32	s16, s0
   b58b8:	eef0 8a60 	vmov.f32	s17, s1
   b58bc:	f993 3000 	ldrsb.w	r3, [r3]
   b58c0:	3301      	adds	r3, #1
   b58c2:	d02a      	beq.n	b591a <pow+0x7a>
   b58c4:	4622      	mov	r2, r4
   b58c6:	462b      	mov	r3, r5
   b58c8:	4620      	mov	r0, r4
   b58ca:	4629      	mov	r1, r5
   b58cc:	f001 fdfe 	bl	b74cc <__aeabi_dcmpun>
   b58d0:	bb18      	cbnz	r0, b591a <pow+0x7a>
   b58d2:	4632      	mov	r2, r6
   b58d4:	463b      	mov	r3, r7
   b58d6:	4630      	mov	r0, r6
   b58d8:	4639      	mov	r1, r7
   b58da:	f001 fdf7 	bl	b74cc <__aeabi_dcmpun>
   b58de:	2800      	cmp	r0, #0
   b58e0:	d144      	bne.n	b596c <pow+0xcc>
   b58e2:	2200      	movs	r2, #0
   b58e4:	2300      	movs	r3, #0
   b58e6:	4630      	mov	r0, r6
   b58e8:	4639      	mov	r1, r7
   b58ea:	f001 fdbd 	bl	b7468 <__aeabi_dcmpeq>
   b58ee:	b1d8      	cbz	r0, b5928 <pow+0x88>
   b58f0:	2200      	movs	r2, #0
   b58f2:	2300      	movs	r3, #0
   b58f4:	4620      	mov	r0, r4
   b58f6:	4629      	mov	r1, r5
   b58f8:	f001 fdb6 	bl	b7468 <__aeabi_dcmpeq>
   b58fc:	2800      	cmp	r0, #0
   b58fe:	d13d      	bne.n	b597c <pow+0xdc>
   b5900:	ec45 4b10 	vmov	d0, r4, r5
   b5904:	f001 f844 	bl	b6990 <finite>
   b5908:	b138      	cbz	r0, b591a <pow+0x7a>
   b590a:	4620      	mov	r0, r4
   b590c:	4629      	mov	r1, r5
   b590e:	2200      	movs	r2, #0
   b5910:	2300      	movs	r3, #0
   b5912:	f001 fdb3 	bl	b747c <__aeabi_dcmplt>
   b5916:	2800      	cmp	r0, #0
   b5918:	d15c      	bne.n	b59d4 <pow+0x134>
   b591a:	eeb0 0a48 	vmov.f32	s0, s16
   b591e:	eef0 0a68 	vmov.f32	s1, s17
   b5922:	ecbd 8b02 	vpop	{d8}
   b5926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5928:	eeb0 0a48 	vmov.f32	s0, s16
   b592c:	eef0 0a68 	vmov.f32	s1, s17
   b5930:	f001 f82e 	bl	b6990 <finite>
   b5934:	b358      	cbz	r0, b598e <pow+0xee>
   b5936:	ec51 0b18 	vmov	r0, r1, d8
   b593a:	2200      	movs	r2, #0
   b593c:	2300      	movs	r3, #0
   b593e:	f001 fd93 	bl	b7468 <__aeabi_dcmpeq>
   b5942:	2800      	cmp	r0, #0
   b5944:	d0e9      	beq.n	b591a <pow+0x7a>
   b5946:	ec47 6b10 	vmov	d0, r6, r7
   b594a:	f001 f821 	bl	b6990 <finite>
   b594e:	2800      	cmp	r0, #0
   b5950:	d0e3      	beq.n	b591a <pow+0x7a>
   b5952:	ec45 4b10 	vmov	d0, r4, r5
   b5956:	f001 f81b 	bl	b6990 <finite>
   b595a:	2800      	cmp	r0, #0
   b595c:	d0dd      	beq.n	b591a <pow+0x7a>
   b595e:	f7ff f9d9 	bl	b4d14 <__errno>
   b5962:	2322      	movs	r3, #34	; 0x22
   b5964:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b5a20 <pow+0x180>
   b5968:	6003      	str	r3, [r0, #0]
   b596a:	e7d6      	b.n	b591a <pow+0x7a>
   b596c:	4620      	mov	r0, r4
   b596e:	4629      	mov	r1, r5
   b5970:	2200      	movs	r2, #0
   b5972:	2300      	movs	r3, #0
   b5974:	f001 fd78 	bl	b7468 <__aeabi_dcmpeq>
   b5978:	2800      	cmp	r0, #0
   b597a:	d0ce      	beq.n	b591a <pow+0x7a>
   b597c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b5a28 <pow+0x188>
   b5980:	eeb0 0a48 	vmov.f32	s0, s16
   b5984:	eef0 0a68 	vmov.f32	s1, s17
   b5988:	ecbd 8b02 	vpop	{d8}
   b598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b598e:	ec47 6b10 	vmov	d0, r6, r7
   b5992:	f000 fffd 	bl	b6990 <finite>
   b5996:	2800      	cmp	r0, #0
   b5998:	d0cd      	beq.n	b5936 <pow+0x96>
   b599a:	ec45 4b10 	vmov	d0, r4, r5
   b599e:	f000 fff7 	bl	b6990 <finite>
   b59a2:	2800      	cmp	r0, #0
   b59a4:	d0c7      	beq.n	b5936 <pow+0x96>
   b59a6:	ec53 2b18 	vmov	r2, r3, d8
   b59aa:	ee18 0a10 	vmov	r0, s16
   b59ae:	4619      	mov	r1, r3
   b59b0:	f001 fd8c 	bl	b74cc <__aeabi_dcmpun>
   b59b4:	bb20      	cbnz	r0, b5a00 <pow+0x160>
   b59b6:	f7ff f9ad 	bl	b4d14 <__errno>
   b59ba:	4603      	mov	r3, r0
   b59bc:	2222      	movs	r2, #34	; 0x22
   b59be:	601a      	str	r2, [r3, #0]
   b59c0:	4630      	mov	r0, r6
   b59c2:	4639      	mov	r1, r7
   b59c4:	2200      	movs	r2, #0
   b59c6:	2300      	movs	r3, #0
   b59c8:	f001 fd58 	bl	b747c <__aeabi_dcmplt>
   b59cc:	b948      	cbnz	r0, b59e2 <pow+0x142>
   b59ce:	ed9f 8b18 	vldr	d8, [pc, #96]	; b5a30 <pow+0x190>
   b59d2:	e7a2      	b.n	b591a <pow+0x7a>
   b59d4:	f7ff f99e 	bl	b4d14 <__errno>
   b59d8:	2321      	movs	r3, #33	; 0x21
   b59da:	ed9f 8b17 	vldr	d8, [pc, #92]	; b5a38 <pow+0x198>
   b59de:	6003      	str	r3, [r0, #0]
   b59e0:	e79b      	b.n	b591a <pow+0x7a>
   b59e2:	ec45 4b10 	vmov	d0, r4, r5
   b59e6:	f000 ffe7 	bl	b69b8 <rint>
   b59ea:	4622      	mov	r2, r4
   b59ec:	ec51 0b10 	vmov	r0, r1, d0
   b59f0:	462b      	mov	r3, r5
   b59f2:	f001 fd39 	bl	b7468 <__aeabi_dcmpeq>
   b59f6:	2800      	cmp	r0, #0
   b59f8:	d1e9      	bne.n	b59ce <pow+0x12e>
   b59fa:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b5a38 <pow+0x198>
   b59fe:	e78c      	b.n	b591a <pow+0x7a>
   b5a00:	f7ff f988 	bl	b4d14 <__errno>
   b5a04:	2200      	movs	r2, #0
   b5a06:	2300      	movs	r3, #0
   b5a08:	2121      	movs	r1, #33	; 0x21
   b5a0a:	6001      	str	r1, [r0, #0]
   b5a0c:	4610      	mov	r0, r2
   b5a0e:	4619      	mov	r1, r3
   b5a10:	f001 fbec 	bl	b71ec <__aeabi_ddiv>
   b5a14:	ec41 0b18 	vmov	d8, r0, r1
   b5a18:	e77f      	b.n	b591a <pow+0x7a>
   b5a1a:	bf00      	nop
   b5a1c:	f3af 8000 	nop.w
	...
   b5a2c:	3ff00000 	.word	0x3ff00000
   b5a30:	00000000 	.word	0x00000000
   b5a34:	7ff00000 	.word	0x7ff00000
   b5a38:	00000000 	.word	0x00000000
   b5a3c:	fff00000 	.word	0xfff00000
   b5a40:	2003e630 	.word	0x2003e630

000b5a44 <logf>:
   b5a44:	b508      	push	{r3, lr}
   b5a46:	ed2d 8b02 	vpush	{d8}
   b5a4a:	eeb0 8a40 	vmov.f32	s16, s0
   b5a4e:	f000 fe95 	bl	b677c <__ieee754_logf>
   b5a52:	4b14      	ldr	r3, [pc, #80]	; (b5aa4 <logf+0x60>)
   b5a54:	f993 3000 	ldrsb.w	r3, [r3]
   b5a58:	3301      	adds	r3, #1
   b5a5a:	d014      	beq.n	b5a86 <logf+0x42>
   b5a5c:	eeb4 8a48 	vcmp.f32	s16, s16
   b5a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5a64:	d60f      	bvs.n	b5a86 <logf+0x42>
   b5a66:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b5a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5a6e:	dc0a      	bgt.n	b5a86 <logf+0x42>
   b5a70:	eeb5 8a40 	vcmp.f32	s16, #0.0
   b5a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5a78:	d108      	bne.n	b5a8c <logf+0x48>
   b5a7a:	f7ff f94b 	bl	b4d14 <__errno>
   b5a7e:	2322      	movs	r3, #34	; 0x22
   b5a80:	ed9f 0a09 	vldr	s0, [pc, #36]	; b5aa8 <logf+0x64>
   b5a84:	6003      	str	r3, [r0, #0]
   b5a86:	ecbd 8b02 	vpop	{d8}
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	f7ff f942 	bl	b4d14 <__errno>
   b5a90:	ecbd 8b02 	vpop	{d8}
   b5a94:	4603      	mov	r3, r0
   b5a96:	2221      	movs	r2, #33	; 0x21
   b5a98:	601a      	str	r2, [r3, #0]
   b5a9a:	4804      	ldr	r0, [pc, #16]	; (b5aac <logf+0x68>)
   b5a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5aa0:	f001 b8b8 	b.w	b6c14 <nanf>
   b5aa4:	2003e630 	.word	0x2003e630
   b5aa8:	ff800000 	.word	0xff800000
   b5aac:	000b7990 	.word	0x000b7990

000b5ab0 <__ieee754_pow>:
   b5ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ab4:	ec57 6b11 	vmov	r6, r7, d1
   b5ab8:	ed2d 8b0c 	vpush	{d8-d13}
   b5abc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b5ac0:	ea5a 0206 	orrs.w	r2, sl, r6
   b5ac4:	b087      	sub	sp, #28
   b5ac6:	d03d      	beq.n	b5b44 <__ieee754_pow+0x94>
   b5ac8:	ec55 4b10 	vmov	r4, r5, d0
   b5acc:	4972      	ldr	r1, [pc, #456]	; (b5c98 <__ieee754_pow+0x1e8>)
   b5ace:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b5ad2:	4588      	cmp	r8, r1
   b5ad4:	ee10 2a10 	vmov	r2, s0
   b5ad8:	46a9      	mov	r9, r5
   b5ada:	dc2c      	bgt.n	b5b36 <__ieee754_pow+0x86>
   b5adc:	ee11 3a10 	vmov	r3, s2
   b5ae0:	46bb      	mov	fp, r7
   b5ae2:	d036      	beq.n	b5b52 <__ieee754_pow+0xa2>
   b5ae4:	458a      	cmp	sl, r1
   b5ae6:	dc26      	bgt.n	b5b36 <__ieee754_pow+0x86>
   b5ae8:	496b      	ldr	r1, [pc, #428]	; (b5c98 <__ieee754_pow+0x1e8>)
   b5aea:	458a      	cmp	sl, r1
   b5aec:	d021      	beq.n	b5b32 <__ieee754_pow+0x82>
   b5aee:	f1b9 0f00 	cmp.w	r9, #0
   b5af2:	db39      	blt.n	b5b68 <__ieee754_pow+0xb8>
   b5af4:	2100      	movs	r1, #0
   b5af6:	9100      	str	r1, [sp, #0]
   b5af8:	2b00      	cmp	r3, #0
   b5afa:	d151      	bne.n	b5ba0 <__ieee754_pow+0xf0>
   b5afc:	4b66      	ldr	r3, [pc, #408]	; (b5c98 <__ieee754_pow+0x1e8>)
   b5afe:	459a      	cmp	sl, r3
   b5b00:	f000 80a2 	beq.w	b5c48 <__ieee754_pow+0x198>
   b5b04:	4b65      	ldr	r3, [pc, #404]	; (b5c9c <__ieee754_pow+0x1ec>)
   b5b06:	459a      	cmp	sl, r3
   b5b08:	f000 80b0 	beq.w	b5c6c <__ieee754_pow+0x1bc>
   b5b0c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b5b10:	f000 84c0 	beq.w	b6494 <__ieee754_pow+0x9e4>
   b5b14:	4b62      	ldr	r3, [pc, #392]	; (b5ca0 <__ieee754_pow+0x1f0>)
   b5b16:	459b      	cmp	fp, r3
   b5b18:	d142      	bne.n	b5ba0 <__ieee754_pow+0xf0>
   b5b1a:	f1b9 0f00 	cmp.w	r9, #0
   b5b1e:	db3f      	blt.n	b5ba0 <__ieee754_pow+0xf0>
   b5b20:	ec45 4b10 	vmov	d0, r4, r5
   b5b24:	b007      	add	sp, #28
   b5b26:	ecbd 8b0c 	vpop	{d8-d13}
   b5b2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b2e:	f000 bd59 	b.w	b65e4 <__ieee754_sqrt>
   b5b32:	2b00      	cmp	r3, #0
   b5b34:	d0db      	beq.n	b5aee <__ieee754_pow+0x3e>
   b5b36:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b5b3a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b5b3e:	ea58 0302 	orrs.w	r3, r8, r2
   b5b42:	d109      	bne.n	b5b58 <__ieee754_pow+0xa8>
   b5b44:	ed9f 0b50 	vldr	d0, [pc, #320]	; b5c88 <__ieee754_pow+0x1d8>
   b5b48:	b007      	add	sp, #28
   b5b4a:	ecbd 8b0c 	vpop	{d8-d13}
   b5b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b52:	b90c      	cbnz	r4, b5b58 <__ieee754_pow+0xa8>
   b5b54:	45c2      	cmp	sl, r8
   b5b56:	ddc7      	ble.n	b5ae8 <__ieee754_pow+0x38>
   b5b58:	4852      	ldr	r0, [pc, #328]	; (b5ca4 <__ieee754_pow+0x1f4>)
   b5b5a:	b007      	add	sp, #28
   b5b5c:	ecbd 8b0c 	vpop	{d8-d13}
   b5b60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b64:	f000 bf20 	b.w	b69a8 <nan>
   b5b68:	494f      	ldr	r1, [pc, #316]	; (b5ca8 <__ieee754_pow+0x1f8>)
   b5b6a:	458a      	cmp	sl, r1
   b5b6c:	f300 8085 	bgt.w	b5c7a <__ieee754_pow+0x1ca>
   b5b70:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b5b74:	458a      	cmp	sl, r1
   b5b76:	dd0f      	ble.n	b5b98 <__ieee754_pow+0xe8>
   b5b78:	ea4f 512a 	mov.w	r1, sl, asr #20
   b5b7c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b5b80:	2914      	cmp	r1, #20
   b5b82:	f340 849b 	ble.w	b64bc <__ieee754_pow+0xa0c>
   b5b86:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b5b8a:	fa23 f001 	lsr.w	r0, r3, r1
   b5b8e:	fa00 f101 	lsl.w	r1, r0, r1
   b5b92:	4299      	cmp	r1, r3
   b5b94:	f000 84ed 	beq.w	b6572 <__ieee754_pow+0xac2>
   b5b98:	2100      	movs	r1, #0
   b5b9a:	9100      	str	r1, [sp, #0]
   b5b9c:	2b00      	cmp	r3, #0
   b5b9e:	d0b1      	beq.n	b5b04 <__ieee754_pow+0x54>
   b5ba0:	ec45 4b10 	vmov	d0, r4, r5
   b5ba4:	9202      	str	r2, [sp, #8]
   b5ba6:	f000 fee9 	bl	b697c <fabs>
   b5baa:	9a02      	ldr	r2, [sp, #8]
   b5bac:	bb5a      	cbnz	r2, b5c06 <__ieee754_pow+0x156>
   b5bae:	f1b8 0f00 	cmp.w	r8, #0
   b5bb2:	d004      	beq.n	b5bbe <__ieee754_pow+0x10e>
   b5bb4:	4b39      	ldr	r3, [pc, #228]	; (b5c9c <__ieee754_pow+0x1ec>)
   b5bb6:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b5bba:	429a      	cmp	r2, r3
   b5bbc:	d123      	bne.n	b5c06 <__ieee754_pow+0x156>
   b5bbe:	f1bb 0f00 	cmp.w	fp, #0
   b5bc2:	da07      	bge.n	b5bd4 <__ieee754_pow+0x124>
   b5bc4:	ec53 2b10 	vmov	r2, r3, d0
   b5bc8:	4934      	ldr	r1, [pc, #208]	; (b5c9c <__ieee754_pow+0x1ec>)
   b5bca:	2000      	movs	r0, #0
   b5bcc:	f001 fb0e 	bl	b71ec <__aeabi_ddiv>
   b5bd0:	ec41 0b10 	vmov	d0, r0, r1
   b5bd4:	f1b9 0f00 	cmp.w	r9, #0
   b5bd8:	dab6      	bge.n	b5b48 <__ieee754_pow+0x98>
   b5bda:	9b00      	ldr	r3, [sp, #0]
   b5bdc:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b5be0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b5be4:	ea58 0303 	orrs.w	r3, r8, r3
   b5be8:	f040 848d 	bne.w	b6506 <__ieee754_pow+0xa56>
   b5bec:	ec53 2b10 	vmov	r2, r3, d0
   b5bf0:	4610      	mov	r0, r2
   b5bf2:	4619      	mov	r1, r3
   b5bf4:	f001 f818 	bl	b6c28 <__aeabi_dsub>
   b5bf8:	4602      	mov	r2, r0
   b5bfa:	460b      	mov	r3, r1
   b5bfc:	f001 faf6 	bl	b71ec <__aeabi_ddiv>
   b5c00:	ec41 0b10 	vmov	d0, r0, r1
   b5c04:	e7a0      	b.n	b5b48 <__ieee754_pow+0x98>
   b5c06:	9a00      	ldr	r2, [sp, #0]
   b5c08:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b5c0c:	3b01      	subs	r3, #1
   b5c0e:	9304      	str	r3, [sp, #16]
   b5c10:	4313      	orrs	r3, r2
   b5c12:	d035      	beq.n	b5c80 <__ieee754_pow+0x1d0>
   b5c14:	4b25      	ldr	r3, [pc, #148]	; (b5cac <__ieee754_pow+0x1fc>)
   b5c16:	459a      	cmp	sl, r3
   b5c18:	dd4c      	ble.n	b5cb4 <__ieee754_pow+0x204>
   b5c1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b5c1e:	459a      	cmp	sl, r3
   b5c20:	4b23      	ldr	r3, [pc, #140]	; (b5cb0 <__ieee754_pow+0x200>)
   b5c22:	f340 83db 	ble.w	b63dc <__ieee754_pow+0x92c>
   b5c26:	4598      	cmp	r8, r3
   b5c28:	f340 8360 	ble.w	b62ec <__ieee754_pow+0x83c>
   b5c2c:	f1bb 0f00 	cmp.w	fp, #0
   b5c30:	f340 8360 	ble.w	b62f4 <__ieee754_pow+0x844>
   b5c34:	a316      	add	r3, pc, #88	; (adr r3, b5c90 <__ieee754_pow+0x1e0>)
   b5c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5c3a:	4610      	mov	r0, r2
   b5c3c:	4619      	mov	r1, r3
   b5c3e:	f001 f9ab 	bl	b6f98 <__aeabi_dmul>
   b5c42:	ec41 0b10 	vmov	d0, r0, r1
   b5c46:	e77f      	b.n	b5b48 <__ieee754_pow+0x98>
   b5c48:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b5c4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b5c50:	4313      	orrs	r3, r2
   b5c52:	f43f af77 	beq.w	b5b44 <__ieee754_pow+0x94>
   b5c56:	4b16      	ldr	r3, [pc, #88]	; (b5cb0 <__ieee754_pow+0x200>)
   b5c58:	4598      	cmp	r8, r3
   b5c5a:	f340 837a 	ble.w	b6352 <__ieee754_pow+0x8a2>
   b5c5e:	f1bb 0f00 	cmp.w	fp, #0
   b5c62:	f2c0 8347 	blt.w	b62f4 <__ieee754_pow+0x844>
   b5c66:	ec47 6b10 	vmov	d0, r6, r7
   b5c6a:	e76d      	b.n	b5b48 <__ieee754_pow+0x98>
   b5c6c:	f1bb 0f00 	cmp.w	fp, #0
   b5c70:	f2c0 841a 	blt.w	b64a8 <__ieee754_pow+0x9f8>
   b5c74:	ec45 4b10 	vmov	d0, r4, r5
   b5c78:	e766      	b.n	b5b48 <__ieee754_pow+0x98>
   b5c7a:	2102      	movs	r1, #2
   b5c7c:	9100      	str	r1, [sp, #0]
   b5c7e:	e73b      	b.n	b5af8 <__ieee754_pow+0x48>
   b5c80:	4622      	mov	r2, r4
   b5c82:	462b      	mov	r3, r5
   b5c84:	e7b4      	b.n	b5bf0 <__ieee754_pow+0x140>
   b5c86:	bf00      	nop
   b5c88:	00000000 	.word	0x00000000
   b5c8c:	3ff00000 	.word	0x3ff00000
   b5c90:	8800759c 	.word	0x8800759c
   b5c94:	7e37e43c 	.word	0x7e37e43c
   b5c98:	7ff00000 	.word	0x7ff00000
   b5c9c:	3ff00000 	.word	0x3ff00000
   b5ca0:	3fe00000 	.word	0x3fe00000
   b5ca4:	000b7990 	.word	0x000b7990
   b5ca8:	433fffff 	.word	0x433fffff
   b5cac:	41e00000 	.word	0x41e00000
   b5cb0:	3fefffff 	.word	0x3fefffff
   b5cb4:	4be4      	ldr	r3, [pc, #912]	; (b6048 <__ieee754_pow+0x598>)
   b5cb6:	ea09 0303 	and.w	r3, r9, r3
   b5cba:	2200      	movs	r2, #0
   b5cbc:	b953      	cbnz	r3, b5cd4 <__ieee754_pow+0x224>
   b5cbe:	ec51 0b10 	vmov	r0, r1, d0
   b5cc2:	4be2      	ldr	r3, [pc, #904]	; (b604c <__ieee754_pow+0x59c>)
   b5cc4:	f001 f968 	bl	b6f98 <__aeabi_dmul>
   b5cc8:	ec41 0b10 	vmov	d0, r0, r1
   b5ccc:	ee10 8a90 	vmov	r8, s1
   b5cd0:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b5cd4:	ea4f 5328 	mov.w	r3, r8, asr #20
   b5cd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b5cdc:	189a      	adds	r2, r3, r2
   b5cde:	4bdc      	ldr	r3, [pc, #880]	; (b6050 <__ieee754_pow+0x5a0>)
   b5ce0:	9205      	str	r2, [sp, #20]
   b5ce2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b5ce6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b5cea:	4598      	cmp	r8, r3
   b5cec:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b5cf0:	dd07      	ble.n	b5d02 <__ieee754_pow+0x252>
   b5cf2:	4bd8      	ldr	r3, [pc, #864]	; (b6054 <__ieee754_pow+0x5a4>)
   b5cf4:	4598      	cmp	r8, r3
   b5cf6:	f340 8414 	ble.w	b6522 <__ieee754_pow+0xa72>
   b5cfa:	3201      	adds	r2, #1
   b5cfc:	9205      	str	r2, [sp, #20]
   b5cfe:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b5d02:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b5fe8 <__ieee754_pow+0x538>
   b5d06:	ed9f 7bba 	vldr	d7, [pc, #744]	; b5ff0 <__ieee754_pow+0x540>
   b5d0a:	ec53 2b16 	vmov	r2, r3, d6
   b5d0e:	eeb0 ca47 	vmov.f32	s24, s14
   b5d12:	eef0 ca67 	vmov.f32	s25, s15
   b5d16:	2500      	movs	r5, #0
   b5d18:	eeb0 da47 	vmov.f32	s26, s14
   b5d1c:	eef0 da67 	vmov.f32	s27, s15
   b5d20:	ec5b ab10 	vmov	sl, fp, d0
   b5d24:	46a3      	mov	fp, r4
   b5d26:	4650      	mov	r0, sl
   b5d28:	4659      	mov	r1, fp
   b5d2a:	ec43 2b1a 	vmov	d10, r2, r3
   b5d2e:	f000 ff7b 	bl	b6c28 <__aeabi_dsub>
   b5d32:	ec53 2b1a 	vmov	r2, r3, d10
   b5d36:	4680      	mov	r8, r0
   b5d38:	4689      	mov	r9, r1
   b5d3a:	4650      	mov	r0, sl
   b5d3c:	4659      	mov	r1, fp
   b5d3e:	f000 ff75 	bl	b6c2c <__adddf3>
   b5d42:	4602      	mov	r2, r0
   b5d44:	460b      	mov	r3, r1
   b5d46:	2000      	movs	r0, #0
   b5d48:	49c3      	ldr	r1, [pc, #780]	; (b6058 <__ieee754_pow+0x5a8>)
   b5d4a:	f001 fa4f 	bl	b71ec <__aeabi_ddiv>
   b5d4e:	ec41 0b1b 	vmov	d11, r0, r1
   b5d52:	4640      	mov	r0, r8
   b5d54:	ec53 2b1b 	vmov	r2, r3, d11
   b5d58:	4649      	mov	r1, r9
   b5d5a:	f001 f91d 	bl	b6f98 <__aeabi_dmul>
   b5d5e:	ec41 0b18 	vmov	d8, r0, r1
   b5d62:	460a      	mov	r2, r1
   b5d64:	4601      	mov	r1, r0
   b5d66:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b5d6a:	2100      	movs	r1, #0
   b5d6c:	9102      	str	r1, [sp, #8]
   b5d6e:	1064      	asrs	r4, r4, #1
   b5d70:	ec4b ab19 	vmov	d9, sl, fp
   b5d74:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b5d78:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b5d7c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b5d80:	2000      	movs	r0, #0
   b5d82:	1959      	adds	r1, r3, r5
   b5d84:	4604      	mov	r4, r0
   b5d86:	460d      	mov	r5, r1
   b5d88:	4602      	mov	r2, r0
   b5d8a:	460b      	mov	r3, r1
   b5d8c:	4650      	mov	r0, sl
   b5d8e:	4659      	mov	r1, fp
   b5d90:	f001 f902 	bl	b6f98 <__aeabi_dmul>
   b5d94:	4602      	mov	r2, r0
   b5d96:	460b      	mov	r3, r1
   b5d98:	4640      	mov	r0, r8
   b5d9a:	4649      	mov	r1, r9
   b5d9c:	f000 ff44 	bl	b6c28 <__aeabi_dsub>
   b5da0:	ec53 2b1a 	vmov	r2, r3, d10
   b5da4:	4680      	mov	r8, r0
   b5da6:	4689      	mov	r9, r1
   b5da8:	4620      	mov	r0, r4
   b5daa:	4629      	mov	r1, r5
   b5dac:	f000 ff3c 	bl	b6c28 <__aeabi_dsub>
   b5db0:	4602      	mov	r2, r0
   b5db2:	460b      	mov	r3, r1
   b5db4:	ec51 0b19 	vmov	r0, r1, d9
   b5db8:	f000 ff36 	bl	b6c28 <__aeabi_dsub>
   b5dbc:	4652      	mov	r2, sl
   b5dbe:	465b      	mov	r3, fp
   b5dc0:	f001 f8ea 	bl	b6f98 <__aeabi_dmul>
   b5dc4:	4602      	mov	r2, r0
   b5dc6:	460b      	mov	r3, r1
   b5dc8:	4640      	mov	r0, r8
   b5dca:	4649      	mov	r1, r9
   b5dcc:	f000 ff2c 	bl	b6c28 <__aeabi_dsub>
   b5dd0:	ec53 2b1b 	vmov	r2, r3, d11
   b5dd4:	f001 f8e0 	bl	b6f98 <__aeabi_dmul>
   b5dd8:	ec53 2b18 	vmov	r2, r3, d8
   b5ddc:	ec41 0b19 	vmov	d9, r0, r1
   b5de0:	ec51 0b18 	vmov	r0, r1, d8
   b5de4:	f001 f8d8 	bl	b6f98 <__aeabi_dmul>
   b5de8:	a383      	add	r3, pc, #524	; (adr r3, b5ff8 <__ieee754_pow+0x548>)
   b5dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5dee:	4604      	mov	r4, r0
   b5df0:	460d      	mov	r5, r1
   b5df2:	f001 f8d1 	bl	b6f98 <__aeabi_dmul>
   b5df6:	a382      	add	r3, pc, #520	; (adr r3, b6000 <__ieee754_pow+0x550>)
   b5df8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5dfc:	f000 ff16 	bl	b6c2c <__adddf3>
   b5e00:	4622      	mov	r2, r4
   b5e02:	462b      	mov	r3, r5
   b5e04:	f001 f8c8 	bl	b6f98 <__aeabi_dmul>
   b5e08:	a37f      	add	r3, pc, #508	; (adr r3, b6008 <__ieee754_pow+0x558>)
   b5e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e0e:	f000 ff0d 	bl	b6c2c <__adddf3>
   b5e12:	4622      	mov	r2, r4
   b5e14:	462b      	mov	r3, r5
   b5e16:	f001 f8bf 	bl	b6f98 <__aeabi_dmul>
   b5e1a:	a37d      	add	r3, pc, #500	; (adr r3, b6010 <__ieee754_pow+0x560>)
   b5e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e20:	f000 ff04 	bl	b6c2c <__adddf3>
   b5e24:	4622      	mov	r2, r4
   b5e26:	462b      	mov	r3, r5
   b5e28:	f001 f8b6 	bl	b6f98 <__aeabi_dmul>
   b5e2c:	a37a      	add	r3, pc, #488	; (adr r3, b6018 <__ieee754_pow+0x568>)
   b5e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e32:	f000 fefb 	bl	b6c2c <__adddf3>
   b5e36:	4622      	mov	r2, r4
   b5e38:	462b      	mov	r3, r5
   b5e3a:	f001 f8ad 	bl	b6f98 <__aeabi_dmul>
   b5e3e:	a378      	add	r3, pc, #480	; (adr r3, b6020 <__ieee754_pow+0x570>)
   b5e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5e44:	f000 fef2 	bl	b6c2c <__adddf3>
   b5e48:	4622      	mov	r2, r4
   b5e4a:	4680      	mov	r8, r0
   b5e4c:	4689      	mov	r9, r1
   b5e4e:	462b      	mov	r3, r5
   b5e50:	4620      	mov	r0, r4
   b5e52:	4629      	mov	r1, r5
   b5e54:	f001 f8a0 	bl	b6f98 <__aeabi_dmul>
   b5e58:	4602      	mov	r2, r0
   b5e5a:	460b      	mov	r3, r1
   b5e5c:	4640      	mov	r0, r8
   b5e5e:	4649      	mov	r1, r9
   b5e60:	f001 f89a 	bl	b6f98 <__aeabi_dmul>
   b5e64:	4652      	mov	r2, sl
   b5e66:	4604      	mov	r4, r0
   b5e68:	460d      	mov	r5, r1
   b5e6a:	465b      	mov	r3, fp
   b5e6c:	ec51 0b18 	vmov	r0, r1, d8
   b5e70:	f000 fedc 	bl	b6c2c <__adddf3>
   b5e74:	ec53 2b19 	vmov	r2, r3, d9
   b5e78:	f001 f88e 	bl	b6f98 <__aeabi_dmul>
   b5e7c:	4622      	mov	r2, r4
   b5e7e:	462b      	mov	r3, r5
   b5e80:	f000 fed4 	bl	b6c2c <__adddf3>
   b5e84:	4652      	mov	r2, sl
   b5e86:	4680      	mov	r8, r0
   b5e88:	4689      	mov	r9, r1
   b5e8a:	465b      	mov	r3, fp
   b5e8c:	4650      	mov	r0, sl
   b5e8e:	4659      	mov	r1, fp
   b5e90:	f001 f882 	bl	b6f98 <__aeabi_dmul>
   b5e94:	4602      	mov	r2, r0
   b5e96:	460b      	mov	r3, r1
   b5e98:	ec43 2b1a 	vmov	d10, r2, r3
   b5e9c:	4b6f      	ldr	r3, [pc, #444]	; (b605c <__ieee754_pow+0x5ac>)
   b5e9e:	2200      	movs	r2, #0
   b5ea0:	f000 fec4 	bl	b6c2c <__adddf3>
   b5ea4:	4642      	mov	r2, r8
   b5ea6:	464b      	mov	r3, r9
   b5ea8:	f000 fec0 	bl	b6c2c <__adddf3>
   b5eac:	2400      	movs	r4, #0
   b5eae:	460d      	mov	r5, r1
   b5eb0:	4622      	mov	r2, r4
   b5eb2:	462b      	mov	r3, r5
   b5eb4:	4650      	mov	r0, sl
   b5eb6:	4659      	mov	r1, fp
   b5eb8:	f001 f86e 	bl	b6f98 <__aeabi_dmul>
   b5ebc:	4b67      	ldr	r3, [pc, #412]	; (b605c <__ieee754_pow+0x5ac>)
   b5ebe:	4682      	mov	sl, r0
   b5ec0:	468b      	mov	fp, r1
   b5ec2:	2200      	movs	r2, #0
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	4629      	mov	r1, r5
   b5ec8:	f000 feae 	bl	b6c28 <__aeabi_dsub>
   b5ecc:	ec53 2b1a 	vmov	r2, r3, d10
   b5ed0:	f000 feaa 	bl	b6c28 <__aeabi_dsub>
   b5ed4:	4602      	mov	r2, r0
   b5ed6:	460b      	mov	r3, r1
   b5ed8:	4640      	mov	r0, r8
   b5eda:	4649      	mov	r1, r9
   b5edc:	f000 fea4 	bl	b6c28 <__aeabi_dsub>
   b5ee0:	ec53 2b18 	vmov	r2, r3, d8
   b5ee4:	f001 f858 	bl	b6f98 <__aeabi_dmul>
   b5ee8:	4622      	mov	r2, r4
   b5eea:	462b      	mov	r3, r5
   b5eec:	4604      	mov	r4, r0
   b5eee:	460d      	mov	r5, r1
   b5ef0:	ec51 0b19 	vmov	r0, r1, d9
   b5ef4:	f001 f850 	bl	b6f98 <__aeabi_dmul>
   b5ef8:	4602      	mov	r2, r0
   b5efa:	460b      	mov	r3, r1
   b5efc:	4620      	mov	r0, r4
   b5efe:	4629      	mov	r1, r5
   b5f00:	f000 fe94 	bl	b6c2c <__adddf3>
   b5f04:	4680      	mov	r8, r0
   b5f06:	4689      	mov	r9, r1
   b5f08:	4642      	mov	r2, r8
   b5f0a:	464b      	mov	r3, r9
   b5f0c:	4650      	mov	r0, sl
   b5f0e:	4659      	mov	r1, fp
   b5f10:	f000 fe8c 	bl	b6c2c <__adddf3>
   b5f14:	a344      	add	r3, pc, #272	; (adr r3, b6028 <__ieee754_pow+0x578>)
   b5f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f1a:	2000      	movs	r0, #0
   b5f1c:	4604      	mov	r4, r0
   b5f1e:	460d      	mov	r5, r1
   b5f20:	f001 f83a 	bl	b6f98 <__aeabi_dmul>
   b5f24:	4652      	mov	r2, sl
   b5f26:	ec41 0b19 	vmov	d9, r0, r1
   b5f2a:	465b      	mov	r3, fp
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	4629      	mov	r1, r5
   b5f30:	f000 fe7a 	bl	b6c28 <__aeabi_dsub>
   b5f34:	4602      	mov	r2, r0
   b5f36:	460b      	mov	r3, r1
   b5f38:	4640      	mov	r0, r8
   b5f3a:	4649      	mov	r1, r9
   b5f3c:	f000 fe74 	bl	b6c28 <__aeabi_dsub>
   b5f40:	a33b      	add	r3, pc, #236	; (adr r3, b6030 <__ieee754_pow+0x580>)
   b5f42:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f46:	f001 f827 	bl	b6f98 <__aeabi_dmul>
   b5f4a:	4602      	mov	r2, r0
   b5f4c:	460b      	mov	r3, r1
   b5f4e:	4620      	mov	r0, r4
   b5f50:	4629      	mov	r1, r5
   b5f52:	4614      	mov	r4, r2
   b5f54:	461d      	mov	r5, r3
   b5f56:	a338      	add	r3, pc, #224	; (adr r3, b6038 <__ieee754_pow+0x588>)
   b5f58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5f5c:	f001 f81c 	bl	b6f98 <__aeabi_dmul>
   b5f60:	4602      	mov	r2, r0
   b5f62:	460b      	mov	r3, r1
   b5f64:	4620      	mov	r0, r4
   b5f66:	4629      	mov	r1, r5
   b5f68:	f000 fe60 	bl	b6c2c <__adddf3>
   b5f6c:	ec53 2b1d 	vmov	r2, r3, d13
   b5f70:	f000 fe5c 	bl	b6c2c <__adddf3>
   b5f74:	4680      	mov	r8, r0
   b5f76:	9805      	ldr	r0, [sp, #20]
   b5f78:	4689      	mov	r9, r1
   b5f7a:	f000 ffa3 	bl	b6ec4 <__aeabi_i2d>
   b5f7e:	4642      	mov	r2, r8
   b5f80:	4682      	mov	sl, r0
   b5f82:	468b      	mov	fp, r1
   b5f84:	464b      	mov	r3, r9
   b5f86:	ec51 0b19 	vmov	r0, r1, d9
   b5f8a:	f000 fe4f 	bl	b6c2c <__adddf3>
   b5f8e:	ec53 2b1c 	vmov	r2, r3, d12
   b5f92:	f000 fe4b 	bl	b6c2c <__adddf3>
   b5f96:	4652      	mov	r2, sl
   b5f98:	465b      	mov	r3, fp
   b5f9a:	f000 fe47 	bl	b6c2c <__adddf3>
   b5f9e:	4652      	mov	r2, sl
   b5fa0:	465b      	mov	r3, fp
   b5fa2:	2000      	movs	r0, #0
   b5fa4:	4604      	mov	r4, r0
   b5fa6:	460d      	mov	r5, r1
   b5fa8:	f000 fe3e 	bl	b6c28 <__aeabi_dsub>
   b5fac:	ec53 2b1c 	vmov	r2, r3, d12
   b5fb0:	f000 fe3a 	bl	b6c28 <__aeabi_dsub>
   b5fb4:	ec53 2b19 	vmov	r2, r3, d9
   b5fb8:	f000 fe36 	bl	b6c28 <__aeabi_dsub>
   b5fbc:	4602      	mov	r2, r0
   b5fbe:	460b      	mov	r3, r1
   b5fc0:	4640      	mov	r0, r8
   b5fc2:	4649      	mov	r1, r9
   b5fc4:	f000 fe30 	bl	b6c28 <__aeabi_dsub>
   b5fc8:	9b00      	ldr	r3, [sp, #0]
   b5fca:	9a04      	ldr	r2, [sp, #16]
   b5fcc:	3b01      	subs	r3, #1
   b5fce:	4313      	orrs	r3, r2
   b5fd0:	4682      	mov	sl, r0
   b5fd2:	468b      	mov	fp, r1
   b5fd4:	f040 81b6 	bne.w	b6344 <__ieee754_pow+0x894>
   b5fd8:	ed9f 7b19 	vldr	d7, [pc, #100]	; b6040 <__ieee754_pow+0x590>
   b5fdc:	eeb0 8a47 	vmov.f32	s16, s14
   b5fe0:	eef0 8a67 	vmov.f32	s17, s15
   b5fe4:	e03c      	b.n	b6060 <__ieee754_pow+0x5b0>
   b5fe6:	bf00      	nop
   b5fe8:	00000000 	.word	0x00000000
   b5fec:	3ff00000 	.word	0x3ff00000
	...
   b5ff8:	4a454eef 	.word	0x4a454eef
   b5ffc:	3fca7e28 	.word	0x3fca7e28
   b6000:	93c9db65 	.word	0x93c9db65
   b6004:	3fcd864a 	.word	0x3fcd864a
   b6008:	a91d4101 	.word	0xa91d4101
   b600c:	3fd17460 	.word	0x3fd17460
   b6010:	518f264d 	.word	0x518f264d
   b6014:	3fd55555 	.word	0x3fd55555
   b6018:	db6fabff 	.word	0xdb6fabff
   b601c:	3fdb6db6 	.word	0x3fdb6db6
   b6020:	33333303 	.word	0x33333303
   b6024:	3fe33333 	.word	0x3fe33333
   b6028:	e0000000 	.word	0xe0000000
   b602c:	3feec709 	.word	0x3feec709
   b6030:	dc3a03fd 	.word	0xdc3a03fd
   b6034:	3feec709 	.word	0x3feec709
   b6038:	145b01f5 	.word	0x145b01f5
   b603c:	be3e2fe0 	.word	0xbe3e2fe0
   b6040:	00000000 	.word	0x00000000
   b6044:	bff00000 	.word	0xbff00000
   b6048:	7ff00000 	.word	0x7ff00000
   b604c:	43400000 	.word	0x43400000
   b6050:	0003988e 	.word	0x0003988e
   b6054:	000bb679 	.word	0x000bb679
   b6058:	3ff00000 	.word	0x3ff00000
   b605c:	40080000 	.word	0x40080000
   b6060:	2300      	movs	r3, #0
   b6062:	e9cd 6700 	strd	r6, r7, [sp]
   b6066:	9300      	str	r3, [sp, #0]
   b6068:	e9dd 8900 	ldrd	r8, r9, [sp]
   b606c:	4630      	mov	r0, r6
   b606e:	4642      	mov	r2, r8
   b6070:	464b      	mov	r3, r9
   b6072:	4639      	mov	r1, r7
   b6074:	f000 fdd8 	bl	b6c28 <__aeabi_dsub>
   b6078:	4622      	mov	r2, r4
   b607a:	462b      	mov	r3, r5
   b607c:	f000 ff8c 	bl	b6f98 <__aeabi_dmul>
   b6080:	4632      	mov	r2, r6
   b6082:	463b      	mov	r3, r7
   b6084:	4606      	mov	r6, r0
   b6086:	460f      	mov	r7, r1
   b6088:	4650      	mov	r0, sl
   b608a:	4659      	mov	r1, fp
   b608c:	f000 ff84 	bl	b6f98 <__aeabi_dmul>
   b6090:	4602      	mov	r2, r0
   b6092:	460b      	mov	r3, r1
   b6094:	4630      	mov	r0, r6
   b6096:	4639      	mov	r1, r7
   b6098:	f000 fdc8 	bl	b6c2c <__adddf3>
   b609c:	4642      	mov	r2, r8
   b609e:	464b      	mov	r3, r9
   b60a0:	4606      	mov	r6, r0
   b60a2:	460f      	mov	r7, r1
   b60a4:	4620      	mov	r0, r4
   b60a6:	4629      	mov	r1, r5
   b60a8:	f000 ff76 	bl	b6f98 <__aeabi_dmul>
   b60ac:	4604      	mov	r4, r0
   b60ae:	460d      	mov	r5, r1
   b60b0:	462b      	mov	r3, r5
   b60b2:	4630      	mov	r0, r6
   b60b4:	4639      	mov	r1, r7
   b60b6:	4622      	mov	r2, r4
   b60b8:	f000 fdb8 	bl	b6c2c <__adddf3>
   b60bc:	4bc2      	ldr	r3, [pc, #776]	; (b63c8 <__ieee754_pow+0x918>)
   b60be:	4299      	cmp	r1, r3
   b60c0:	4680      	mov	r8, r0
   b60c2:	4689      	mov	r9, r1
   b60c4:	468a      	mov	sl, r1
   b60c6:	f340 8118 	ble.w	b62fa <__ieee754_pow+0x84a>
   b60ca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b60ce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b60d2:	4303      	orrs	r3, r0
   b60d4:	f040 8207 	bne.w	b64e6 <__ieee754_pow+0xa36>
   b60d8:	a3a3      	add	r3, pc, #652	; (adr r3, b6368 <__ieee754_pow+0x8b8>)
   b60da:	e9d3 2300 	ldrd	r2, r3, [r3]
   b60de:	4630      	mov	r0, r6
   b60e0:	4639      	mov	r1, r7
   b60e2:	f000 fda3 	bl	b6c2c <__adddf3>
   b60e6:	4602      	mov	r2, r0
   b60e8:	460b      	mov	r3, r1
   b60ea:	4640      	mov	r0, r8
   b60ec:	4649      	mov	r1, r9
   b60ee:	4690      	mov	r8, r2
   b60f0:	4699      	mov	r9, r3
   b60f2:	4622      	mov	r2, r4
   b60f4:	462b      	mov	r3, r5
   b60f6:	f000 fd97 	bl	b6c28 <__aeabi_dsub>
   b60fa:	4602      	mov	r2, r0
   b60fc:	460b      	mov	r3, r1
   b60fe:	4640      	mov	r0, r8
   b6100:	4649      	mov	r1, r9
   b6102:	f001 f9d9 	bl	b74b8 <__aeabi_dcmpgt>
   b6106:	2800      	cmp	r0, #0
   b6108:	f040 81ed 	bne.w	b64e6 <__ieee754_pow+0xa36>
   b610c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b6110:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b6114:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b6118:	fa42 f303 	asr.w	r3, r2, r3
   b611c:	4453      	add	r3, sl
   b611e:	49ab      	ldr	r1, [pc, #684]	; (b63cc <__ieee754_pow+0x91c>)
   b6120:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b6124:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b6128:	fa41 fc02 	asr.w	ip, r1, r2
   b612c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b6130:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6134:	f1c2 0214 	rsb	r2, r2, #20
   b6138:	fa41 f202 	asr.w	r2, r1, r2
   b613c:	2000      	movs	r0, #0
   b613e:	ea23 010c 	bic.w	r1, r3, ip
   b6142:	f1ba 0f00 	cmp.w	sl, #0
   b6146:	9200      	str	r2, [sp, #0]
   b6148:	460b      	mov	r3, r1
   b614a:	4602      	mov	r2, r0
   b614c:	da02      	bge.n	b6154 <__ieee754_pow+0x6a4>
   b614e:	9900      	ldr	r1, [sp, #0]
   b6150:	4249      	negs	r1, r1
   b6152:	9100      	str	r1, [sp, #0]
   b6154:	4620      	mov	r0, r4
   b6156:	4629      	mov	r1, r5
   b6158:	f000 fd66 	bl	b6c28 <__aeabi_dsub>
   b615c:	9b00      	ldr	r3, [sp, #0]
   b615e:	051b      	lsls	r3, r3, #20
   b6160:	9302      	str	r3, [sp, #8]
   b6162:	4602      	mov	r2, r0
   b6164:	460b      	mov	r3, r1
   b6166:	4604      	mov	r4, r0
   b6168:	460d      	mov	r5, r1
   b616a:	4630      	mov	r0, r6
   b616c:	4639      	mov	r1, r7
   b616e:	f000 fd5d 	bl	b6c2c <__adddf3>
   b6172:	4689      	mov	r9, r1
   b6174:	f04f 0800 	mov.w	r8, #0
   b6178:	a37d      	add	r3, pc, #500	; (adr r3, b6370 <__ieee754_pow+0x8c0>)
   b617a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b617e:	4640      	mov	r0, r8
   b6180:	4649      	mov	r1, r9
   b6182:	f000 ff09 	bl	b6f98 <__aeabi_dmul>
   b6186:	4622      	mov	r2, r4
   b6188:	462b      	mov	r3, r5
   b618a:	4682      	mov	sl, r0
   b618c:	468b      	mov	fp, r1
   b618e:	4640      	mov	r0, r8
   b6190:	4649      	mov	r1, r9
   b6192:	f000 fd49 	bl	b6c28 <__aeabi_dsub>
   b6196:	4602      	mov	r2, r0
   b6198:	460b      	mov	r3, r1
   b619a:	4630      	mov	r0, r6
   b619c:	4639      	mov	r1, r7
   b619e:	f000 fd43 	bl	b6c28 <__aeabi_dsub>
   b61a2:	a375      	add	r3, pc, #468	; (adr r3, b6378 <__ieee754_pow+0x8c8>)
   b61a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b61a8:	f000 fef6 	bl	b6f98 <__aeabi_dmul>
   b61ac:	a374      	add	r3, pc, #464	; (adr r3, b6380 <__ieee754_pow+0x8d0>)
   b61ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b61b2:	4604      	mov	r4, r0
   b61b4:	460d      	mov	r5, r1
   b61b6:	4640      	mov	r0, r8
   b61b8:	4649      	mov	r1, r9
   b61ba:	f000 feed 	bl	b6f98 <__aeabi_dmul>
   b61be:	4602      	mov	r2, r0
   b61c0:	460b      	mov	r3, r1
   b61c2:	4620      	mov	r0, r4
   b61c4:	4629      	mov	r1, r5
   b61c6:	f000 fd31 	bl	b6c2c <__adddf3>
   b61ca:	4606      	mov	r6, r0
   b61cc:	460f      	mov	r7, r1
   b61ce:	4632      	mov	r2, r6
   b61d0:	463b      	mov	r3, r7
   b61d2:	4650      	mov	r0, sl
   b61d4:	4659      	mov	r1, fp
   b61d6:	f000 fd29 	bl	b6c2c <__adddf3>
   b61da:	4652      	mov	r2, sl
   b61dc:	465b      	mov	r3, fp
   b61de:	4604      	mov	r4, r0
   b61e0:	460d      	mov	r5, r1
   b61e2:	f000 fd21 	bl	b6c28 <__aeabi_dsub>
   b61e6:	4602      	mov	r2, r0
   b61e8:	460b      	mov	r3, r1
   b61ea:	4630      	mov	r0, r6
   b61ec:	4639      	mov	r1, r7
   b61ee:	f000 fd1b 	bl	b6c28 <__aeabi_dsub>
   b61f2:	4622      	mov	r2, r4
   b61f4:	4680      	mov	r8, r0
   b61f6:	4689      	mov	r9, r1
   b61f8:	462b      	mov	r3, r5
   b61fa:	4620      	mov	r0, r4
   b61fc:	4629      	mov	r1, r5
   b61fe:	f000 fecb 	bl	b6f98 <__aeabi_dmul>
   b6202:	a361      	add	r3, pc, #388	; (adr r3, b6388 <__ieee754_pow+0x8d8>)
   b6204:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6208:	4606      	mov	r6, r0
   b620a:	460f      	mov	r7, r1
   b620c:	f000 fec4 	bl	b6f98 <__aeabi_dmul>
   b6210:	a35f      	add	r3, pc, #380	; (adr r3, b6390 <__ieee754_pow+0x8e0>)
   b6212:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6216:	f000 fd07 	bl	b6c28 <__aeabi_dsub>
   b621a:	4632      	mov	r2, r6
   b621c:	463b      	mov	r3, r7
   b621e:	f000 febb 	bl	b6f98 <__aeabi_dmul>
   b6222:	a35d      	add	r3, pc, #372	; (adr r3, b6398 <__ieee754_pow+0x8e8>)
   b6224:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6228:	f000 fd00 	bl	b6c2c <__adddf3>
   b622c:	4632      	mov	r2, r6
   b622e:	463b      	mov	r3, r7
   b6230:	f000 feb2 	bl	b6f98 <__aeabi_dmul>
   b6234:	a35a      	add	r3, pc, #360	; (adr r3, b63a0 <__ieee754_pow+0x8f0>)
   b6236:	e9d3 2300 	ldrd	r2, r3, [r3]
   b623a:	f000 fcf5 	bl	b6c28 <__aeabi_dsub>
   b623e:	4632      	mov	r2, r6
   b6240:	463b      	mov	r3, r7
   b6242:	f000 fea9 	bl	b6f98 <__aeabi_dmul>
   b6246:	a358      	add	r3, pc, #352	; (adr r3, b63a8 <__ieee754_pow+0x8f8>)
   b6248:	e9d3 2300 	ldrd	r2, r3, [r3]
   b624c:	f000 fcee 	bl	b6c2c <__adddf3>
   b6250:	4632      	mov	r2, r6
   b6252:	463b      	mov	r3, r7
   b6254:	f000 fea0 	bl	b6f98 <__aeabi_dmul>
   b6258:	4602      	mov	r2, r0
   b625a:	460b      	mov	r3, r1
   b625c:	4620      	mov	r0, r4
   b625e:	4629      	mov	r1, r5
   b6260:	f000 fce2 	bl	b6c28 <__aeabi_dsub>
   b6264:	4606      	mov	r6, r0
   b6266:	460f      	mov	r7, r1
   b6268:	4632      	mov	r2, r6
   b626a:	463b      	mov	r3, r7
   b626c:	4620      	mov	r0, r4
   b626e:	4629      	mov	r1, r5
   b6270:	f000 fe92 	bl	b6f98 <__aeabi_dmul>
   b6274:	4602      	mov	r2, r0
   b6276:	460b      	mov	r3, r1
   b6278:	4630      	mov	r0, r6
   b627a:	4639      	mov	r1, r7
   b627c:	4616      	mov	r6, r2
   b627e:	461f      	mov	r7, r3
   b6280:	2200      	movs	r2, #0
   b6282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6286:	f000 fccf 	bl	b6c28 <__aeabi_dsub>
   b628a:	4602      	mov	r2, r0
   b628c:	460b      	mov	r3, r1
   b628e:	4630      	mov	r0, r6
   b6290:	4639      	mov	r1, r7
   b6292:	f000 ffab 	bl	b71ec <__aeabi_ddiv>
   b6296:	4642      	mov	r2, r8
   b6298:	4606      	mov	r6, r0
   b629a:	460f      	mov	r7, r1
   b629c:	464b      	mov	r3, r9
   b629e:	4620      	mov	r0, r4
   b62a0:	4629      	mov	r1, r5
   b62a2:	f000 fe79 	bl	b6f98 <__aeabi_dmul>
   b62a6:	4642      	mov	r2, r8
   b62a8:	464b      	mov	r3, r9
   b62aa:	f000 fcbf 	bl	b6c2c <__adddf3>
   b62ae:	4602      	mov	r2, r0
   b62b0:	460b      	mov	r3, r1
   b62b2:	4630      	mov	r0, r6
   b62b4:	4639      	mov	r1, r7
   b62b6:	f000 fcb7 	bl	b6c28 <__aeabi_dsub>
   b62ba:	4622      	mov	r2, r4
   b62bc:	462b      	mov	r3, r5
   b62be:	f000 fcb3 	bl	b6c28 <__aeabi_dsub>
   b62c2:	4602      	mov	r2, r0
   b62c4:	460b      	mov	r3, r1
   b62c6:	2000      	movs	r0, #0
   b62c8:	4941      	ldr	r1, [pc, #260]	; (b63d0 <__ieee754_pow+0x920>)
   b62ca:	f000 fcad 	bl	b6c28 <__aeabi_dsub>
   b62ce:	9a02      	ldr	r2, [sp, #8]
   b62d0:	460b      	mov	r3, r1
   b62d2:	4413      	add	r3, r2
   b62d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b62d8:	f2c0 8143 	blt.w	b6562 <__ieee754_pow+0xab2>
   b62dc:	4619      	mov	r1, r3
   b62de:	ec53 2b18 	vmov	r2, r3, d8
   b62e2:	f000 fe59 	bl	b6f98 <__aeabi_dmul>
   b62e6:	ec41 0b10 	vmov	d0, r0, r1
   b62ea:	e42d      	b.n	b5b48 <__ieee754_pow+0x98>
   b62ec:	f1bb 0f00 	cmp.w	fp, #0
   b62f0:	f6ff aca0 	blt.w	b5c34 <__ieee754_pow+0x184>
   b62f4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b63b0 <__ieee754_pow+0x900>
   b62f8:	e426      	b.n	b5b48 <__ieee754_pow+0x98>
   b62fa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b63d8 <__ieee754_pow+0x928>
   b62fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6302:	4563      	cmp	r3, ip
   b6304:	f340 80e7 	ble.w	b64d6 <__ieee754_pow+0xa26>
   b6308:	4b32      	ldr	r3, [pc, #200]	; (b63d4 <__ieee754_pow+0x924>)
   b630a:	440b      	add	r3, r1
   b630c:	4303      	orrs	r3, r0
   b630e:	d10a      	bne.n	b6326 <__ieee754_pow+0x876>
   b6310:	4622      	mov	r2, r4
   b6312:	462b      	mov	r3, r5
   b6314:	f000 fc88 	bl	b6c28 <__aeabi_dsub>
   b6318:	4632      	mov	r2, r6
   b631a:	463b      	mov	r3, r7
   b631c:	f001 f8c2 	bl	b74a4 <__aeabi_dcmpge>
   b6320:	2800      	cmp	r0, #0
   b6322:	f43f aef3 	beq.w	b610c <__ieee754_pow+0x65c>
   b6326:	a324      	add	r3, pc, #144	; (adr r3, b63b8 <__ieee754_pow+0x908>)
   b6328:	e9d3 2300 	ldrd	r2, r3, [r3]
   b632c:	ec51 0b18 	vmov	r0, r1, d8
   b6330:	f000 fe32 	bl	b6f98 <__aeabi_dmul>
   b6334:	a320      	add	r3, pc, #128	; (adr r3, b63b8 <__ieee754_pow+0x908>)
   b6336:	e9d3 2300 	ldrd	r2, r3, [r3]
   b633a:	f000 fe2d 	bl	b6f98 <__aeabi_dmul>
   b633e:	ec41 0b10 	vmov	d0, r0, r1
   b6342:	e401      	b.n	b5b48 <__ieee754_pow+0x98>
   b6344:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b63c0 <__ieee754_pow+0x910>
   b6348:	eeb0 8a47 	vmov.f32	s16, s14
   b634c:	eef0 8a67 	vmov.f32	s17, s15
   b6350:	e686      	b.n	b6060 <__ieee754_pow+0x5b0>
   b6352:	f1bb 0f00 	cmp.w	fp, #0
   b6356:	dacd      	bge.n	b62f4 <__ieee754_pow+0x844>
   b6358:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b635c:	ee00 6a10 	vmov	s0, r6
   b6360:	ee00 3a90 	vmov	s1, r3
   b6364:	f7ff bbf0 	b.w	b5b48 <__ieee754_pow+0x98>
   b6368:	652b82fe 	.word	0x652b82fe
   b636c:	3c971547 	.word	0x3c971547
   b6370:	00000000 	.word	0x00000000
   b6374:	3fe62e43 	.word	0x3fe62e43
   b6378:	fefa39ef 	.word	0xfefa39ef
   b637c:	3fe62e42 	.word	0x3fe62e42
   b6380:	0ca86c39 	.word	0x0ca86c39
   b6384:	be205c61 	.word	0xbe205c61
   b6388:	72bea4d0 	.word	0x72bea4d0
   b638c:	3e663769 	.word	0x3e663769
   b6390:	c5d26bf1 	.word	0xc5d26bf1
   b6394:	3ebbbd41 	.word	0x3ebbbd41
   b6398:	af25de2c 	.word	0xaf25de2c
   b639c:	3f11566a 	.word	0x3f11566a
   b63a0:	16bebd93 	.word	0x16bebd93
   b63a4:	3f66c16c 	.word	0x3f66c16c
   b63a8:	5555553e 	.word	0x5555553e
   b63ac:	3fc55555 	.word	0x3fc55555
	...
   b63b8:	c2f8f359 	.word	0xc2f8f359
   b63bc:	01a56e1f 	.word	0x01a56e1f
   b63c0:	00000000 	.word	0x00000000
   b63c4:	3ff00000 	.word	0x3ff00000
   b63c8:	408fffff 	.word	0x408fffff
   b63cc:	000fffff 	.word	0x000fffff
   b63d0:	3ff00000 	.word	0x3ff00000
   b63d4:	3f6f3400 	.word	0x3f6f3400
   b63d8:	4090cbff 	.word	0x4090cbff
   b63dc:	4598      	cmp	r8, r3
   b63de:	db85      	blt.n	b62ec <__ieee754_pow+0x83c>
   b63e0:	4b7d      	ldr	r3, [pc, #500]	; (b65d8 <__ieee754_pow+0xb28>)
   b63e2:	4598      	cmp	r8, r3
   b63e4:	f73f ac22 	bgt.w	b5c2c <__ieee754_pow+0x17c>
   b63e8:	ec51 0b10 	vmov	r0, r1, d0
   b63ec:	4b7a      	ldr	r3, [pc, #488]	; (b65d8 <__ieee754_pow+0xb28>)
   b63ee:	2200      	movs	r2, #0
   b63f0:	f000 fc1a 	bl	b6c28 <__aeabi_dsub>
   b63f4:	a368      	add	r3, pc, #416	; (adr r3, b6598 <__ieee754_pow+0xae8>)
   b63f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b63fa:	4604      	mov	r4, r0
   b63fc:	460d      	mov	r5, r1
   b63fe:	f000 fdcb 	bl	b6f98 <__aeabi_dmul>
   b6402:	a367      	add	r3, pc, #412	; (adr r3, b65a0 <__ieee754_pow+0xaf0>)
   b6404:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6408:	4682      	mov	sl, r0
   b640a:	468b      	mov	fp, r1
   b640c:	4620      	mov	r0, r4
   b640e:	4629      	mov	r1, r5
   b6410:	f000 fdc2 	bl	b6f98 <__aeabi_dmul>
   b6414:	4b71      	ldr	r3, [pc, #452]	; (b65dc <__ieee754_pow+0xb2c>)
   b6416:	ec41 0b18 	vmov	d8, r0, r1
   b641a:	2200      	movs	r2, #0
   b641c:	4620      	mov	r0, r4
   b641e:	4629      	mov	r1, r5
   b6420:	f000 fdba 	bl	b6f98 <__aeabi_dmul>
   b6424:	4602      	mov	r2, r0
   b6426:	460b      	mov	r3, r1
   b6428:	a15f      	add	r1, pc, #380	; (adr r1, b65a8 <__ieee754_pow+0xaf8>)
   b642a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b642e:	f000 fbfb 	bl	b6c28 <__aeabi_dsub>
   b6432:	4622      	mov	r2, r4
   b6434:	462b      	mov	r3, r5
   b6436:	f000 fdaf 	bl	b6f98 <__aeabi_dmul>
   b643a:	4602      	mov	r2, r0
   b643c:	460b      	mov	r3, r1
   b643e:	2000      	movs	r0, #0
   b6440:	4967      	ldr	r1, [pc, #412]	; (b65e0 <__ieee754_pow+0xb30>)
   b6442:	f000 fbf1 	bl	b6c28 <__aeabi_dsub>
   b6446:	4622      	mov	r2, r4
   b6448:	4680      	mov	r8, r0
   b644a:	4689      	mov	r9, r1
   b644c:	462b      	mov	r3, r5
   b644e:	4620      	mov	r0, r4
   b6450:	4629      	mov	r1, r5
   b6452:	f000 fda1 	bl	b6f98 <__aeabi_dmul>
   b6456:	4602      	mov	r2, r0
   b6458:	460b      	mov	r3, r1
   b645a:	4640      	mov	r0, r8
   b645c:	4649      	mov	r1, r9
   b645e:	f000 fd9b 	bl	b6f98 <__aeabi_dmul>
   b6462:	a353      	add	r3, pc, #332	; (adr r3, b65b0 <__ieee754_pow+0xb00>)
   b6464:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6468:	f000 fd96 	bl	b6f98 <__aeabi_dmul>
   b646c:	4602      	mov	r2, r0
   b646e:	460b      	mov	r3, r1
   b6470:	ec51 0b18 	vmov	r0, r1, d8
   b6474:	f000 fbd8 	bl	b6c28 <__aeabi_dsub>
   b6478:	4680      	mov	r8, r0
   b647a:	4689      	mov	r9, r1
   b647c:	4642      	mov	r2, r8
   b647e:	464b      	mov	r3, r9
   b6480:	4650      	mov	r0, sl
   b6482:	4659      	mov	r1, fp
   b6484:	f000 fbd2 	bl	b6c2c <__adddf3>
   b6488:	2000      	movs	r0, #0
   b648a:	4652      	mov	r2, sl
   b648c:	465b      	mov	r3, fp
   b648e:	4604      	mov	r4, r0
   b6490:	460d      	mov	r5, r1
   b6492:	e591      	b.n	b5fb8 <__ieee754_pow+0x508>
   b6494:	4622      	mov	r2, r4
   b6496:	462b      	mov	r3, r5
   b6498:	4620      	mov	r0, r4
   b649a:	4629      	mov	r1, r5
   b649c:	f000 fd7c 	bl	b6f98 <__aeabi_dmul>
   b64a0:	ec41 0b10 	vmov	d0, r0, r1
   b64a4:	f7ff bb50 	b.w	b5b48 <__ieee754_pow+0x98>
   b64a8:	494b      	ldr	r1, [pc, #300]	; (b65d8 <__ieee754_pow+0xb28>)
   b64aa:	2000      	movs	r0, #0
   b64ac:	4622      	mov	r2, r4
   b64ae:	462b      	mov	r3, r5
   b64b0:	f000 fe9c 	bl	b71ec <__aeabi_ddiv>
   b64b4:	ec41 0b10 	vmov	d0, r0, r1
   b64b8:	f7ff bb46 	b.w	b5b48 <__ieee754_pow+0x98>
   b64bc:	2b00      	cmp	r3, #0
   b64be:	d144      	bne.n	b654a <__ieee754_pow+0xa9a>
   b64c0:	f1c1 0114 	rsb	r1, r1, #20
   b64c4:	fa4a f001 	asr.w	r0, sl, r1
   b64c8:	fa00 f101 	lsl.w	r1, r0, r1
   b64cc:	4551      	cmp	r1, sl
   b64ce:	d05a      	beq.n	b6586 <__ieee754_pow+0xad6>
   b64d0:	9300      	str	r3, [sp, #0]
   b64d2:	f7ff bb17 	b.w	b5b04 <__ieee754_pow+0x54>
   b64d6:	4a42      	ldr	r2, [pc, #264]	; (b65e0 <__ieee754_pow+0xb30>)
   b64d8:	4293      	cmp	r3, r2
   b64da:	dc5b      	bgt.n	b6594 <__ieee754_pow+0xae4>
   b64dc:	e9dd 1200 	ldrd	r1, r2, [sp]
   b64e0:	9102      	str	r1, [sp, #8]
   b64e2:	9100      	str	r1, [sp, #0]
   b64e4:	e646      	b.n	b6174 <__ieee754_pow+0x6c4>
   b64e6:	a334      	add	r3, pc, #208	; (adr r3, b65b8 <__ieee754_pow+0xb08>)
   b64e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b64ec:	ec51 0b18 	vmov	r0, r1, d8
   b64f0:	f000 fd52 	bl	b6f98 <__aeabi_dmul>
   b64f4:	a330      	add	r3, pc, #192	; (adr r3, b65b8 <__ieee754_pow+0xb08>)
   b64f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b64fa:	f000 fd4d 	bl	b6f98 <__aeabi_dmul>
   b64fe:	ec41 0b10 	vmov	d0, r0, r1
   b6502:	f7ff bb21 	b.w	b5b48 <__ieee754_pow+0x98>
   b6506:	9b00      	ldr	r3, [sp, #0]
   b6508:	2b01      	cmp	r3, #1
   b650a:	f47f ab1d 	bne.w	b5b48 <__ieee754_pow+0x98>
   b650e:	ee10 1a90 	vmov	r1, s1
   b6512:	ee10 2a10 	vmov	r2, s0
   b6516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b651a:	ec43 2b10 	vmov	d0, r2, r3
   b651e:	f7ff bb13 	b.w	b5b48 <__ieee754_pow+0x98>
   b6522:	ed9f 7b27 	vldr	d7, [pc, #156]	; b65c0 <__ieee754_pow+0xb10>
   b6526:	eeb0 ca47 	vmov.f32	s24, s14
   b652a:	eef0 ca67 	vmov.f32	s25, s15
   b652e:	ed9f 7b26 	vldr	d7, [pc, #152]	; b65c8 <__ieee754_pow+0xb18>
   b6532:	eeb0 da47 	vmov.f32	s26, s14
   b6536:	eef0 da67 	vmov.f32	s27, s15
   b653a:	ed9f 7b25 	vldr	d7, [pc, #148]	; b65d0 <__ieee754_pow+0xb20>
   b653e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b6542:	ec53 2b17 	vmov	r2, r3, d7
   b6546:	f7ff bbeb 	b.w	b5d20 <__ieee754_pow+0x270>
   b654a:	ec45 4b10 	vmov	d0, r4, r5
   b654e:	9200      	str	r2, [sp, #0]
   b6550:	f000 fa14 	bl	b697c <fabs>
   b6554:	9a00      	ldr	r2, [sp, #0]
   b6556:	2a00      	cmp	r2, #0
   b6558:	f47f ab92 	bne.w	b5c80 <__ieee754_pow+0x1d0>
   b655c:	9200      	str	r2, [sp, #0]
   b655e:	f7ff bb26 	b.w	b5bae <__ieee754_pow+0xfe>
   b6562:	ec41 0b10 	vmov	d0, r0, r1
   b6566:	9800      	ldr	r0, [sp, #0]
   b6568:	f000 fac2 	bl	b6af0 <scalbn>
   b656c:	ec51 0b10 	vmov	r0, r1, d0
   b6570:	e6b5      	b.n	b62de <__ieee754_pow+0x82e>
   b6572:	f000 0001 	and.w	r0, r0, #1
   b6576:	f1c0 0102 	rsb	r1, r0, #2
   b657a:	9100      	str	r1, [sp, #0]
   b657c:	2b00      	cmp	r3, #0
   b657e:	f43f aac1 	beq.w	b5b04 <__ieee754_pow+0x54>
   b6582:	f7ff bb0d 	b.w	b5ba0 <__ieee754_pow+0xf0>
   b6586:	f000 0001 	and.w	r0, r0, #1
   b658a:	f1c0 0302 	rsb	r3, r0, #2
   b658e:	9300      	str	r3, [sp, #0]
   b6590:	f7ff bab8 	b.w	b5b04 <__ieee754_pow+0x54>
   b6594:	151b      	asrs	r3, r3, #20
   b6596:	e5bb      	b.n	b6110 <__ieee754_pow+0x660>
   b6598:	60000000 	.word	0x60000000
   b659c:	3ff71547 	.word	0x3ff71547
   b65a0:	f85ddf44 	.word	0xf85ddf44
   b65a4:	3e54ae0b 	.word	0x3e54ae0b
   b65a8:	55555555 	.word	0x55555555
   b65ac:	3fd55555 	.word	0x3fd55555
   b65b0:	652b82fe 	.word	0x652b82fe
   b65b4:	3ff71547 	.word	0x3ff71547
   b65b8:	8800759c 	.word	0x8800759c
   b65bc:	7e37e43c 	.word	0x7e37e43c
   b65c0:	40000000 	.word	0x40000000
   b65c4:	3fe2b803 	.word	0x3fe2b803
   b65c8:	43cfd006 	.word	0x43cfd006
   b65cc:	3e4cfdeb 	.word	0x3e4cfdeb
   b65d0:	00000000 	.word	0x00000000
   b65d4:	3ff80000 	.word	0x3ff80000
   b65d8:	3ff00000 	.word	0x3ff00000
   b65dc:	3fd00000 	.word	0x3fd00000
   b65e0:	3fe00000 	.word	0x3fe00000

000b65e4 <__ieee754_sqrt>:
   b65e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b65e8:	4a63      	ldr	r2, [pc, #396]	; (b6778 <__ieee754_sqrt+0x194>)
   b65ea:	ec55 4b10 	vmov	r4, r5, d0
   b65ee:	43aa      	bics	r2, r5
   b65f0:	f000 809f 	beq.w	b6732 <__ieee754_sqrt+0x14e>
   b65f4:	2d00      	cmp	r5, #0
   b65f6:	ee10 ca10 	vmov	ip, s0
   b65fa:	462b      	mov	r3, r5
   b65fc:	dd54      	ble.n	b66a8 <__ieee754_sqrt+0xc4>
   b65fe:	1529      	asrs	r1, r5, #20
   b6600:	d063      	beq.n	b66ca <__ieee754_sqrt+0xe6>
   b6602:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b6606:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b660a:	07c9      	lsls	r1, r1, #31
   b660c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6610:	d404      	bmi.n	b661c <__ieee754_sqrt+0x38>
   b6612:	005b      	lsls	r3, r3, #1
   b6614:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6618:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b661c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b6620:	2600      	movs	r6, #0
   b6622:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b6626:	107f      	asrs	r7, r7, #1
   b6628:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b662c:	f04f 0e16 	mov.w	lr, #22
   b6630:	4634      	mov	r4, r6
   b6632:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b6636:	18a1      	adds	r1, r4, r2
   b6638:	4299      	cmp	r1, r3
   b663a:	dc02      	bgt.n	b6642 <__ieee754_sqrt+0x5e>
   b663c:	1a5b      	subs	r3, r3, r1
   b663e:	188c      	adds	r4, r1, r2
   b6640:	4416      	add	r6, r2
   b6642:	005b      	lsls	r3, r3, #1
   b6644:	f1be 0e01 	subs.w	lr, lr, #1
   b6648:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b664c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6650:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6654:	d1ef      	bne.n	b6636 <__ieee754_sqrt+0x52>
   b6656:	4675      	mov	r5, lr
   b6658:	2020      	movs	r0, #32
   b665a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b665e:	e00a      	b.n	b6676 <__ieee754_sqrt+0x92>
   b6660:	d044      	beq.n	b66ec <__ieee754_sqrt+0x108>
   b6662:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b6666:	3801      	subs	r0, #1
   b6668:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b666c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6670:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6674:	d043      	beq.n	b66fe <__ieee754_sqrt+0x11a>
   b6676:	42a3      	cmp	r3, r4
   b6678:	eb02 010e 	add.w	r1, r2, lr
   b667c:	ddf0      	ble.n	b6660 <__ieee754_sqrt+0x7c>
   b667e:	2900      	cmp	r1, #0
   b6680:	eb01 0e02 	add.w	lr, r1, r2
   b6684:	db0a      	blt.n	b669c <__ieee754_sqrt+0xb8>
   b6686:	46a0      	mov	r8, r4
   b6688:	1b1b      	subs	r3, r3, r4
   b668a:	4561      	cmp	r1, ip
   b668c:	bf88      	it	hi
   b668e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b6692:	ebac 0c01 	sub.w	ip, ip, r1
   b6696:	4415      	add	r5, r2
   b6698:	4644      	mov	r4, r8
   b669a:	e7e2      	b.n	b6662 <__ieee754_sqrt+0x7e>
   b669c:	f1be 0f00 	cmp.w	lr, #0
   b66a0:	dbf1      	blt.n	b6686 <__ieee754_sqrt+0xa2>
   b66a2:	f104 0801 	add.w	r8, r4, #1
   b66a6:	e7ef      	b.n	b6688 <__ieee754_sqrt+0xa4>
   b66a8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b66ac:	4322      	orrs	r2, r4
   b66ae:	d038      	beq.n	b6722 <__ieee754_sqrt+0x13e>
   b66b0:	2d00      	cmp	r5, #0
   b66b2:	d14e      	bne.n	b6752 <__ieee754_sqrt+0x16e>
   b66b4:	4629      	mov	r1, r5
   b66b6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b66ba:	3915      	subs	r1, #21
   b66bc:	4613      	mov	r3, r2
   b66be:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b66c2:	2a00      	cmp	r2, #0
   b66c4:	d0f7      	beq.n	b66b6 <__ieee754_sqrt+0xd2>
   b66c6:	02d6      	lsls	r6, r2, #11
   b66c8:	d450      	bmi.n	b676c <__ieee754_sqrt+0x188>
   b66ca:	2000      	movs	r0, #0
   b66cc:	005b      	lsls	r3, r3, #1
   b66ce:	02dd      	lsls	r5, r3, #11
   b66d0:	4604      	mov	r4, r0
   b66d2:	f100 0001 	add.w	r0, r0, #1
   b66d6:	d5f9      	bpl.n	b66cc <__ieee754_sqrt+0xe8>
   b66d8:	461a      	mov	r2, r3
   b66da:	4663      	mov	r3, ip
   b66dc:	fa0c fc00 	lsl.w	ip, ip, r0
   b66e0:	f1c0 0020 	rsb	r0, r0, #32
   b66e4:	40c3      	lsrs	r3, r0
   b66e6:	1b09      	subs	r1, r1, r4
   b66e8:	4313      	orrs	r3, r2
   b66ea:	e78a      	b.n	b6602 <__ieee754_sqrt+0x1e>
   b66ec:	4561      	cmp	r1, ip
   b66ee:	d8b8      	bhi.n	b6662 <__ieee754_sqrt+0x7e>
   b66f0:	2900      	cmp	r1, #0
   b66f2:	eb01 0e02 	add.w	lr, r1, r2
   b66f6:	dbd1      	blt.n	b669c <__ieee754_sqrt+0xb8>
   b66f8:	4698      	mov	r8, r3
   b66fa:	2300      	movs	r3, #0
   b66fc:	e7c9      	b.n	b6692 <__ieee754_sqrt+0xae>
   b66fe:	ea53 030c 	orrs.w	r3, r3, ip
   b6702:	d110      	bne.n	b6726 <__ieee754_sqrt+0x142>
   b6704:	0868      	lsrs	r0, r5, #1
   b6706:	1071      	asrs	r1, r6, #1
   b6708:	07f3      	lsls	r3, r6, #31
   b670a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b670e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b6712:	bf48      	it	mi
   b6714:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b6718:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b671c:	4602      	mov	r2, r0
   b671e:	ec43 2b10 	vmov	d0, r2, r3
   b6722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6726:	1c6a      	adds	r2, r5, #1
   b6728:	bf16      	itet	ne
   b672a:	1c68      	addne	r0, r5, #1
   b672c:	3601      	addeq	r6, #1
   b672e:	0840      	lsrne	r0, r0, #1
   b6730:	e7e9      	b.n	b6706 <__ieee754_sqrt+0x122>
   b6732:	ee10 2a10 	vmov	r2, s0
   b6736:	ee10 0a10 	vmov	r0, s0
   b673a:	462b      	mov	r3, r5
   b673c:	4629      	mov	r1, r5
   b673e:	f000 fc2b 	bl	b6f98 <__aeabi_dmul>
   b6742:	4622      	mov	r2, r4
   b6744:	462b      	mov	r3, r5
   b6746:	f000 fa71 	bl	b6c2c <__adddf3>
   b674a:	ec41 0b10 	vmov	d0, r0, r1
   b674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6752:	ee10 2a10 	vmov	r2, s0
   b6756:	4620      	mov	r0, r4
   b6758:	4629      	mov	r1, r5
   b675a:	f000 fa65 	bl	b6c28 <__aeabi_dsub>
   b675e:	4602      	mov	r2, r0
   b6760:	460b      	mov	r3, r1
   b6762:	f000 fd43 	bl	b71ec <__aeabi_ddiv>
   b6766:	ec41 0b10 	vmov	d0, r0, r1
   b676a:	e7da      	b.n	b6722 <__ieee754_sqrt+0x13e>
   b676c:	4663      	mov	r3, ip
   b676e:	2020      	movs	r0, #32
   b6770:	f04f 34ff 	mov.w	r4, #4294967295
   b6774:	e7b6      	b.n	b66e4 <__ieee754_sqrt+0x100>
   b6776:	bf00      	nop
   b6778:	7ff00000 	.word	0x7ff00000

000b677c <__ieee754_logf>:
   b677c:	ee10 3a10 	vmov	r3, s0
   b6780:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   b6784:	d02e      	beq.n	b67e4 <__ieee754_logf+0x68>
   b6786:	2b00      	cmp	r3, #0
   b6788:	db33      	blt.n	b67f2 <__ieee754_logf+0x76>
   b678a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   b678e:	da40      	bge.n	b6812 <__ieee754_logf+0x96>
   b6790:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   b6794:	db34      	blt.n	b6800 <__ieee754_logf+0x84>
   b6796:	f04f 0c00 	mov.w	ip, #0
   b679a:	4868      	ldr	r0, [pc, #416]	; (b693c <__ieee754_logf+0x1c0>)
   b679c:	f3c3 0116 	ubfx	r1, r3, #0, #23
   b67a0:	4408      	add	r0, r1
   b67a2:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   b67a6:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   b67aa:	430a      	orrs	r2, r1
   b67ac:	15db      	asrs	r3, r3, #23
   b67ae:	ee00 2a10 	vmov	s0, r2
   b67b2:	3b7f      	subs	r3, #127	; 0x7f
   b67b4:	4a62      	ldr	r2, [pc, #392]	; (b6940 <__ieee754_logf+0x1c4>)
   b67b6:	4463      	add	r3, ip
   b67b8:	f101 0c0f 	add.w	ip, r1, #15
   b67bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b67c0:	ea0c 0202 	and.w	r2, ip, r2
   b67c4:	ee30 0a67 	vsub.f32	s0, s0, s15
   b67c8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   b67cc:	bb22      	cbnz	r2, b6818 <__ieee754_logf+0x9c>
   b67ce:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b67d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b67d6:	d160      	bne.n	b689a <__ieee754_logf+0x11e>
   b67d8:	2b00      	cmp	r3, #0
   b67da:	f040 8092 	bne.w	b6902 <__ieee754_logf+0x186>
   b67de:	ed9f 0a59 	vldr	s0, [pc, #356]	; b6944 <__ieee754_logf+0x1c8>
   b67e2:	4770      	bx	lr
   b67e4:	ed9f 7a58 	vldr	s14, [pc, #352]	; b6948 <__ieee754_logf+0x1cc>
   b67e8:	eddf 7a56 	vldr	s15, [pc, #344]	; b6944 <__ieee754_logf+0x1c8>
   b67ec:	ee87 0a27 	vdiv.f32	s0, s14, s15
   b67f0:	4770      	bx	lr
   b67f2:	ee70 7a40 	vsub.f32	s15, s0, s0
   b67f6:	ed9f 7a53 	vldr	s14, [pc, #332]	; b6944 <__ieee754_logf+0x1c8>
   b67fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b67fe:	4770      	bx	lr
   b6800:	eddf 7a52 	vldr	s15, [pc, #328]	; b694c <__ieee754_logf+0x1d0>
   b6804:	ee60 7a27 	vmul.f32	s15, s0, s15
   b6808:	f06f 0c18 	mvn.w	ip, #24
   b680c:	ee17 3a90 	vmov	r3, s15
   b6810:	e7c3      	b.n	b679a <__ieee754_logf+0x1e>
   b6812:	ee30 0a00 	vadd.f32	s0, s0, s0
   b6816:	4770      	bx	lr
   b6818:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b681c:	ee70 7a27 	vadd.f32	s15, s0, s15
   b6820:	ee07 3a10 	vmov	s14, r3
   b6824:	ee80 4a27 	vdiv.f32	s8, s0, s15
   b6828:	4849      	ldr	r0, [pc, #292]	; (b6950 <__ieee754_logf+0x1d4>)
   b682a:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   b682e:	4408      	add	r0, r1
   b6830:	f502 7222 	add.w	r2, r2, #648	; 0x288
   b6834:	4302      	orrs	r2, r0
   b6836:	2a00      	cmp	r2, #0
   b6838:	ed9f 3a46 	vldr	s6, [pc, #280]	; b6954 <__ieee754_logf+0x1d8>
   b683c:	eddf 4a46 	vldr	s9, [pc, #280]	; b6958 <__ieee754_logf+0x1dc>
   b6840:	eddf 5a46 	vldr	s11, [pc, #280]	; b695c <__ieee754_logf+0x1e0>
   b6844:	eddf 3a46 	vldr	s7, [pc, #280]	; b6960 <__ieee754_logf+0x1e4>
   b6848:	ed9f 5a46 	vldr	s10, [pc, #280]	; b6964 <__ieee754_logf+0x1e8>
   b684c:	eddf 7a46 	vldr	s15, [pc, #280]	; b6968 <__ieee754_logf+0x1ec>
   b6850:	eddf 6a46 	vldr	s13, [pc, #280]	; b696c <__ieee754_logf+0x1f0>
   b6854:	ee24 6a04 	vmul.f32	s12, s8, s8
   b6858:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   b685c:	ee26 7a06 	vmul.f32	s14, s12, s12
   b6860:	eee7 4a03 	vfma.f32	s9, s14, s6
   b6864:	eea7 5a23 	vfma.f32	s10, s14, s7
   b6868:	eee4 5a87 	vfma.f32	s11, s9, s14
   b686c:	eee5 6a07 	vfma.f32	s13, s10, s14
   b6870:	eee5 7a87 	vfma.f32	s15, s11, s14
   b6874:	ee67 7a86 	vmul.f32	s15, s15, s12
   b6878:	eee6 7a87 	vfma.f32	s15, s13, s14
   b687c:	dd2a      	ble.n	b68d4 <__ieee754_logf+0x158>
   b687e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b6882:	ee20 7a07 	vmul.f32	s14, s0, s14
   b6886:	ee27 7a00 	vmul.f32	s14, s14, s0
   b688a:	bb4b      	cbnz	r3, b68e0 <__ieee754_logf+0x164>
   b688c:	ee77 7a87 	vadd.f32	s15, s15, s14
   b6890:	eea7 7ac4 	vfms.f32	s14, s15, s8
   b6894:	ee30 0a47 	vsub.f32	s0, s0, s14
   b6898:	4770      	bx	lr
   b689a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   b689e:	eddf 6a34 	vldr	s13, [pc, #208]	; b6970 <__ieee754_logf+0x1f4>
   b68a2:	eef0 7a47 	vmov.f32	s15, s14
   b68a6:	eee0 7a66 	vfms.f32	s15, s0, s13
   b68aa:	ee20 7a00 	vmul.f32	s14, s0, s0
   b68ae:	ee27 7a27 	vmul.f32	s14, s14, s15
   b68b2:	2b00      	cmp	r3, #0
   b68b4:	d0ee      	beq.n	b6894 <__ieee754_logf+0x118>
   b68b6:	ee07 3a90 	vmov	s15, r3
   b68ba:	ed9f 6a2e 	vldr	s12, [pc, #184]	; b6974 <__ieee754_logf+0x1f8>
   b68be:	eddf 6a2e 	vldr	s13, [pc, #184]	; b6978 <__ieee754_logf+0x1fc>
   b68c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b68c6:	eea7 7ac6 	vfms.f32	s14, s15, s12
   b68ca:	ee37 0a40 	vsub.f32	s0, s14, s0
   b68ce:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   b68d2:	4770      	bx	lr
   b68d4:	bb13      	cbnz	r3, b691c <__ieee754_logf+0x1a0>
   b68d6:	ee70 7a67 	vsub.f32	s15, s0, s15
   b68da:	eea7 0ac4 	vfms.f32	s0, s15, s8
   b68de:	4770      	bx	lr
   b68e0:	eddf 6a24 	vldr	s13, [pc, #144]	; b6974 <__ieee754_logf+0x1f8>
   b68e4:	ed9f 6a24 	vldr	s12, [pc, #144]	; b6978 <__ieee754_logf+0x1fc>
   b68e8:	ee77 7a87 	vadd.f32	s15, s15, s14
   b68ec:	ee62 6aa6 	vmul.f32	s13, s5, s13
   b68f0:	eee7 6a84 	vfma.f32	s13, s15, s8
   b68f4:	ee37 7a66 	vsub.f32	s14, s14, s13
   b68f8:	ee37 0a40 	vsub.f32	s0, s14, s0
   b68fc:	ee92 0a86 	vfnms.f32	s0, s5, s12
   b6900:	4770      	bx	lr
   b6902:	ee07 3a90 	vmov	s15, r3
   b6906:	ed9f 0a1b 	vldr	s0, [pc, #108]	; b6974 <__ieee754_logf+0x1f8>
   b690a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; b6978 <__ieee754_logf+0x1fc>
   b690e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6912:	ee27 0a80 	vmul.f32	s0, s15, s0
   b6916:	eea7 0a87 	vfma.f32	s0, s15, s14
   b691a:	4770      	bx	lr
   b691c:	ed9f 7a15 	vldr	s14, [pc, #84]	; b6974 <__ieee754_logf+0x1f8>
   b6920:	eddf 6a15 	vldr	s13, [pc, #84]	; b6978 <__ieee754_logf+0x1fc>
   b6924:	ee70 7a67 	vsub.f32	s15, s0, s15
   b6928:	ee27 7a62 	vnmul.f32	s14, s14, s5
   b692c:	eea7 7a84 	vfma.f32	s14, s15, s8
   b6930:	ee37 0a40 	vsub.f32	s0, s14, s0
   b6934:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   b6938:	4770      	bx	lr
   b693a:	bf00      	nop
   b693c:	004afb20 	.word	0x004afb20
   b6940:	007ffff0 	.word	0x007ffff0
   b6944:	00000000 	.word	0x00000000
   b6948:	cc000000 	.word	0xcc000000
   b694c:	4c000000 	.word	0x4c000000
   b6950:	ffcf5c30 	.word	0xffcf5c30
   b6954:	3e178897 	.word	0x3e178897
   b6958:	3e3a3325 	.word	0x3e3a3325
   b695c:	3e924925 	.word	0x3e924925
   b6960:	3e1cd04f 	.word	0x3e1cd04f
   b6964:	3e638e29 	.word	0x3e638e29
   b6968:	3f2aaaab 	.word	0x3f2aaaab
   b696c:	3ecccccd 	.word	0x3ecccccd
   b6970:	3eaaaaab 	.word	0x3eaaaaab
   b6974:	3717f7d1 	.word	0x3717f7d1
   b6978:	3f317180 	.word	0x3f317180

000b697c <fabs>:
   b697c:	ec51 0b10 	vmov	r0, r1, d0
   b6980:	ee10 2a10 	vmov	r2, s0
   b6984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6988:	ec43 2b10 	vmov	d0, r2, r3
   b698c:	4770      	bx	lr
   b698e:	bf00      	nop

000b6990 <finite>:
   b6990:	b082      	sub	sp, #8
   b6992:	ed8d 0b00 	vstr	d0, [sp]
   b6996:	9801      	ldr	r0, [sp, #4]
   b6998:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b699c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b69a0:	0fc0      	lsrs	r0, r0, #31
   b69a2:	b002      	add	sp, #8
   b69a4:	4770      	bx	lr
   b69a6:	bf00      	nop

000b69a8 <nan>:
   b69a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; b69b0 <nan+0x8>
   b69ac:	4770      	bx	lr
   b69ae:	bf00      	nop
   b69b0:	00000000 	.word	0x00000000
   b69b4:	7ff80000 	.word	0x7ff80000

000b69b8 <rint>:
   b69b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b69ba:	ec53 2b10 	vmov	r2, r3, d0
   b69be:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b69c2:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b69c6:	2913      	cmp	r1, #19
   b69c8:	ee10 0a10 	vmov	r0, s0
   b69cc:	b083      	sub	sp, #12
   b69ce:	461c      	mov	r4, r3
   b69d0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b69d4:	dc3a      	bgt.n	b6a4c <rint+0x94>
   b69d6:	2900      	cmp	r1, #0
   b69d8:	db30      	blt.n	b6a3c <rint+0x84>
   b69da:	4d42      	ldr	r5, [pc, #264]	; (b6ae4 <rint+0x12c>)
   b69dc:	fa45 fc01 	asr.w	ip, r5, r1
   b69e0:	ea03 050c 	and.w	r5, r3, ip
   b69e4:	4315      	orrs	r5, r2
   b69e6:	d02d      	beq.n	b6a44 <rint+0x8c>
   b69e8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b69ec:	4318      	orrs	r0, r3
   b69ee:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b69f2:	d00c      	beq.n	b6a0e <rint+0x56>
   b69f4:	ea24 0c0c 	bic.w	ip, r4, ip
   b69f8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b69fc:	2913      	cmp	r1, #19
   b69fe:	fa44 f101 	asr.w	r1, r4, r1
   b6a02:	bf0c      	ite	eq
   b6a04:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b6a08:	2000      	movne	r0, #0
   b6a0a:	ea4c 0401 	orr.w	r4, ip, r1
   b6a0e:	4936      	ldr	r1, [pc, #216]	; (b6ae8 <rint+0x130>)
   b6a10:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b6a14:	4623      	mov	r3, r4
   b6a16:	e9de 4500 	ldrd	r4, r5, [lr]
   b6a1a:	4602      	mov	r2, r0
   b6a1c:	4629      	mov	r1, r5
   b6a1e:	4620      	mov	r0, r4
   b6a20:	f000 f904 	bl	b6c2c <__adddf3>
   b6a24:	e9cd 0100 	strd	r0, r1, [sp]
   b6a28:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6a2c:	4622      	mov	r2, r4
   b6a2e:	462b      	mov	r3, r5
   b6a30:	f000 f8fa 	bl	b6c28 <__aeabi_dsub>
   b6a34:	ec41 0b10 	vmov	d0, r0, r1
   b6a38:	b003      	add	sp, #12
   b6a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6a3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b6a40:	4311      	orrs	r1, r2
   b6a42:	d124      	bne.n	b6a8e <rint+0xd6>
   b6a44:	ec43 2b10 	vmov	d0, r2, r3
   b6a48:	b003      	add	sp, #12
   b6a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6a4c:	2933      	cmp	r1, #51	; 0x33
   b6a4e:	dd08      	ble.n	b6a62 <rint+0xaa>
   b6a50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b6a54:	d1f6      	bne.n	b6a44 <rint+0x8c>
   b6a56:	4619      	mov	r1, r3
   b6a58:	f000 f8e8 	bl	b6c2c <__adddf3>
   b6a5c:	ec41 0b10 	vmov	d0, r0, r1
   b6a60:	e7f2      	b.n	b6a48 <rint+0x90>
   b6a62:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b6a66:	f04f 31ff 	mov.w	r1, #4294967295
   b6a6a:	fa21 f10c 	lsr.w	r1, r1, ip
   b6a6e:	420a      	tst	r2, r1
   b6a70:	d0e8      	beq.n	b6a44 <rint+0x8c>
   b6a72:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b6a76:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b6a7a:	d0c8      	beq.n	b6a0e <rint+0x56>
   b6a7c:	ea20 0303 	bic.w	r3, r0, r3
   b6a80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b6a84:	fa40 fc0c 	asr.w	ip, r0, ip
   b6a88:	ea43 000c 	orr.w	r0, r3, ip
   b6a8c:	e7bf      	b.n	b6a0e <rint+0x56>
   b6a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b6a92:	4318      	orrs	r0, r3
   b6a94:	4a14      	ldr	r2, [pc, #80]	; (b6ae8 <rint+0x130>)
   b6a96:	4243      	negs	r3, r0
   b6a98:	4303      	orrs	r3, r0
   b6a9a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b6a9e:	0b1b      	lsrs	r3, r3, #12
   b6aa0:	0c62      	lsrs	r2, r4, #17
   b6aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b6aa6:	0452      	lsls	r2, r2, #17
   b6aa8:	ea43 0702 	orr.w	r7, r3, r2
   b6aac:	463b      	mov	r3, r7
   b6aae:	e9de 6700 	ldrd	r6, r7, [lr]
   b6ab2:	ee10 2a10 	vmov	r2, s0
   b6ab6:	4630      	mov	r0, r6
   b6ab8:	4639      	mov	r1, r7
   b6aba:	f000 f8b7 	bl	b6c2c <__adddf3>
   b6abe:	e9cd 0100 	strd	r0, r1, [sp]
   b6ac2:	4632      	mov	r2, r6
   b6ac4:	463b      	mov	r3, r7
   b6ac6:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6aca:	f000 f8ad 	bl	b6c28 <__aeabi_dsub>
   b6ace:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b6ad2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6ad6:	4602      	mov	r2, r0
   b6ad8:	ea41 0304 	orr.w	r3, r1, r4
   b6adc:	ec43 2b10 	vmov	d0, r2, r3
   b6ae0:	b003      	add	sp, #12
   b6ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6ae4:	000fffff 	.word	0x000fffff
   b6ae8:	000b7998 	.word	0x000b7998
   b6aec:	00000000 	.word	0x00000000

000b6af0 <scalbn>:
   b6af0:	b538      	push	{r3, r4, r5, lr}
   b6af2:	ec53 2b10 	vmov	r2, r3, d0
   b6af6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b6afa:	4604      	mov	r4, r0
   b6afc:	469c      	mov	ip, r3
   b6afe:	bb89      	cbnz	r1, b6b64 <scalbn+0x74>
   b6b00:	ee10 1a10 	vmov	r1, s0
   b6b04:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b6b08:	ea5c 0101 	orrs.w	r1, ip, r1
   b6b0c:	d029      	beq.n	b6b62 <scalbn+0x72>
   b6b0e:	4619      	mov	r1, r3
   b6b10:	2200      	movs	r2, #0
   b6b12:	4b3d      	ldr	r3, [pc, #244]	; (b6c08 <scalbn+0x118>)
   b6b14:	4d3d      	ldr	r5, [pc, #244]	; (b6c0c <scalbn+0x11c>)
   b6b16:	ee10 0a10 	vmov	r0, s0
   b6b1a:	f000 fa3d 	bl	b6f98 <__aeabi_dmul>
   b6b1e:	42ac      	cmp	r4, r5
   b6b20:	4602      	mov	r2, r0
   b6b22:	460b      	mov	r3, r1
   b6b24:	db16      	blt.n	b6b54 <scalbn+0x64>
   b6b26:	468c      	mov	ip, r1
   b6b28:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b6b2c:	3936      	subs	r1, #54	; 0x36
   b6b2e:	4421      	add	r1, r4
   b6b30:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b6b34:	4281      	cmp	r1, r0
   b6b36:	dc21      	bgt.n	b6b7c <scalbn+0x8c>
   b6b38:	2900      	cmp	r1, #0
   b6b3a:	dc47      	bgt.n	b6bcc <scalbn+0xdc>
   b6b3c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b6b40:	da34      	bge.n	b6bac <scalbn+0xbc>
   b6b42:	f24c 3150 	movw	r1, #50000	; 0xc350
   b6b46:	428c      	cmp	r4, r1
   b6b48:	dc18      	bgt.n	b6b7c <scalbn+0x8c>
   b6b4a:	2b00      	cmp	r3, #0
   b6b4c:	a126      	add	r1, pc, #152	; (adr r1, b6be8 <scalbn+0xf8>)
   b6b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6b52:	db44      	blt.n	b6bde <scalbn+0xee>
   b6b54:	a324      	add	r3, pc, #144	; (adr r3, b6be8 <scalbn+0xf8>)
   b6b56:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b5a:	f000 fa1d 	bl	b6f98 <__aeabi_dmul>
   b6b5e:	ec41 0b10 	vmov	d0, r0, r1
   b6b62:	bd38      	pop	{r3, r4, r5, pc}
   b6b64:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b6b68:	4281      	cmp	r1, r0
   b6b6a:	d1e0      	bne.n	b6b2e <scalbn+0x3e>
   b6b6c:	ee10 0a10 	vmov	r0, s0
   b6b70:	4619      	mov	r1, r3
   b6b72:	f000 f85b 	bl	b6c2c <__adddf3>
   b6b76:	ec41 0b10 	vmov	d0, r0, r1
   b6b7a:	bd38      	pop	{r3, r4, r5, pc}
   b6b7c:	2b00      	cmp	r3, #0
   b6b7e:	a11c      	add	r1, pc, #112	; (adr r1, b6bf0 <scalbn+0x100>)
   b6b80:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6b84:	db07      	blt.n	b6b96 <scalbn+0xa6>
   b6b86:	a31a      	add	r3, pc, #104	; (adr r3, b6bf0 <scalbn+0x100>)
   b6b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b8c:	f000 fa04 	bl	b6f98 <__aeabi_dmul>
   b6b90:	ec41 0b10 	vmov	d0, r0, r1
   b6b94:	bd38      	pop	{r3, r4, r5, pc}
   b6b96:	a118      	add	r1, pc, #96	; (adr r1, b6bf8 <scalbn+0x108>)
   b6b98:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6b9c:	a314      	add	r3, pc, #80	; (adr r3, b6bf0 <scalbn+0x100>)
   b6b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ba2:	f000 f9f9 	bl	b6f98 <__aeabi_dmul>
   b6ba6:	ec41 0b10 	vmov	d0, r0, r1
   b6baa:	e7f3      	b.n	b6b94 <scalbn+0xa4>
   b6bac:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6bb0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6bb4:	3136      	adds	r1, #54	; 0x36
   b6bb6:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6bba:	4610      	mov	r0, r2
   b6bbc:	4619      	mov	r1, r3
   b6bbe:	2200      	movs	r2, #0
   b6bc0:	4b13      	ldr	r3, [pc, #76]	; (b6c10 <scalbn+0x120>)
   b6bc2:	f000 f9e9 	bl	b6f98 <__aeabi_dmul>
   b6bc6:	ec41 0b10 	vmov	d0, r0, r1
   b6bca:	bd38      	pop	{r3, r4, r5, pc}
   b6bcc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6bd0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6bd4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6bd8:	ec43 2b10 	vmov	d0, r2, r3
   b6bdc:	bd38      	pop	{r3, r4, r5, pc}
   b6bde:	a108      	add	r1, pc, #32	; (adr r1, b6c00 <scalbn+0x110>)
   b6be0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6be4:	e7b6      	b.n	b6b54 <scalbn+0x64>
   b6be6:	bf00      	nop
   b6be8:	c2f8f359 	.word	0xc2f8f359
   b6bec:	01a56e1f 	.word	0x01a56e1f
   b6bf0:	8800759c 	.word	0x8800759c
   b6bf4:	7e37e43c 	.word	0x7e37e43c
   b6bf8:	8800759c 	.word	0x8800759c
   b6bfc:	fe37e43c 	.word	0xfe37e43c
   b6c00:	c2f8f359 	.word	0xc2f8f359
   b6c04:	81a56e1f 	.word	0x81a56e1f
   b6c08:	43500000 	.word	0x43500000
   b6c0c:	ffff3cb0 	.word	0xffff3cb0
   b6c10:	3c900000 	.word	0x3c900000

000b6c14 <nanf>:
   b6c14:	ed9f 0a01 	vldr	s0, [pc, #4]	; b6c1c <nanf+0x8>
   b6c18:	4770      	bx	lr
   b6c1a:	bf00      	nop
   b6c1c:	7fc00000 	.word	0x7fc00000

000b6c20 <__aeabi_drsub>:
   b6c20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6c24:	e002      	b.n	b6c2c <__adddf3>
   b6c26:	bf00      	nop

000b6c28 <__aeabi_dsub>:
   b6c28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6c2c <__adddf3>:
   b6c2c:	b530      	push	{r4, r5, lr}
   b6c2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6c32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6c36:	ea94 0f05 	teq	r4, r5
   b6c3a:	bf08      	it	eq
   b6c3c:	ea90 0f02 	teqeq	r0, r2
   b6c40:	bf1f      	itttt	ne
   b6c42:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6c46:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6c4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6c4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6c52:	f000 80e2 	beq.w	b6e1a <__adddf3+0x1ee>
   b6c56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6c5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6c5e:	bfb8      	it	lt
   b6c60:	426d      	neglt	r5, r5
   b6c62:	dd0c      	ble.n	b6c7e <__adddf3+0x52>
   b6c64:	442c      	add	r4, r5
   b6c66:	ea80 0202 	eor.w	r2, r0, r2
   b6c6a:	ea81 0303 	eor.w	r3, r1, r3
   b6c6e:	ea82 0000 	eor.w	r0, r2, r0
   b6c72:	ea83 0101 	eor.w	r1, r3, r1
   b6c76:	ea80 0202 	eor.w	r2, r0, r2
   b6c7a:	ea81 0303 	eor.w	r3, r1, r3
   b6c7e:	2d36      	cmp	r5, #54	; 0x36
   b6c80:	bf88      	it	hi
   b6c82:	bd30      	pophi	{r4, r5, pc}
   b6c84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6c88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6c8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6c90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6c94:	d002      	beq.n	b6c9c <__adddf3+0x70>
   b6c96:	4240      	negs	r0, r0
   b6c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6c9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6ca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ca4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6ca8:	d002      	beq.n	b6cb0 <__adddf3+0x84>
   b6caa:	4252      	negs	r2, r2
   b6cac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6cb0:	ea94 0f05 	teq	r4, r5
   b6cb4:	f000 80a7 	beq.w	b6e06 <__adddf3+0x1da>
   b6cb8:	f1a4 0401 	sub.w	r4, r4, #1
   b6cbc:	f1d5 0e20 	rsbs	lr, r5, #32
   b6cc0:	db0d      	blt.n	b6cde <__adddf3+0xb2>
   b6cc2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6cc6:	fa22 f205 	lsr.w	r2, r2, r5
   b6cca:	1880      	adds	r0, r0, r2
   b6ccc:	f141 0100 	adc.w	r1, r1, #0
   b6cd0:	fa03 f20e 	lsl.w	r2, r3, lr
   b6cd4:	1880      	adds	r0, r0, r2
   b6cd6:	fa43 f305 	asr.w	r3, r3, r5
   b6cda:	4159      	adcs	r1, r3
   b6cdc:	e00e      	b.n	b6cfc <__adddf3+0xd0>
   b6cde:	f1a5 0520 	sub.w	r5, r5, #32
   b6ce2:	f10e 0e20 	add.w	lr, lr, #32
   b6ce6:	2a01      	cmp	r2, #1
   b6ce8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6cec:	bf28      	it	cs
   b6cee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6cf2:	fa43 f305 	asr.w	r3, r3, r5
   b6cf6:	18c0      	adds	r0, r0, r3
   b6cf8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6cfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6d00:	d507      	bpl.n	b6d12 <__adddf3+0xe6>
   b6d02:	f04f 0e00 	mov.w	lr, #0
   b6d06:	f1dc 0c00 	rsbs	ip, ip, #0
   b6d0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6d0e:	eb6e 0101 	sbc.w	r1, lr, r1
   b6d12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6d16:	d31b      	bcc.n	b6d50 <__adddf3+0x124>
   b6d18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6d1c:	d30c      	bcc.n	b6d38 <__adddf3+0x10c>
   b6d1e:	0849      	lsrs	r1, r1, #1
   b6d20:	ea5f 0030 	movs.w	r0, r0, rrx
   b6d24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6d28:	f104 0401 	add.w	r4, r4, #1
   b6d2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6d30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6d34:	f080 809a 	bcs.w	b6e6c <__adddf3+0x240>
   b6d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6d3c:	bf08      	it	eq
   b6d3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6d42:	f150 0000 	adcs.w	r0, r0, #0
   b6d46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6d4a:	ea41 0105 	orr.w	r1, r1, r5
   b6d4e:	bd30      	pop	{r4, r5, pc}
   b6d50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6d54:	4140      	adcs	r0, r0
   b6d56:	eb41 0101 	adc.w	r1, r1, r1
   b6d5a:	3c01      	subs	r4, #1
   b6d5c:	bf28      	it	cs
   b6d5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6d62:	d2e9      	bcs.n	b6d38 <__adddf3+0x10c>
   b6d64:	f091 0f00 	teq	r1, #0
   b6d68:	bf04      	itt	eq
   b6d6a:	4601      	moveq	r1, r0
   b6d6c:	2000      	moveq	r0, #0
   b6d6e:	fab1 f381 	clz	r3, r1
   b6d72:	bf08      	it	eq
   b6d74:	3320      	addeq	r3, #32
   b6d76:	f1a3 030b 	sub.w	r3, r3, #11
   b6d7a:	f1b3 0220 	subs.w	r2, r3, #32
   b6d7e:	da0c      	bge.n	b6d9a <__adddf3+0x16e>
   b6d80:	320c      	adds	r2, #12
   b6d82:	dd08      	ble.n	b6d96 <__adddf3+0x16a>
   b6d84:	f102 0c14 	add.w	ip, r2, #20
   b6d88:	f1c2 020c 	rsb	r2, r2, #12
   b6d8c:	fa01 f00c 	lsl.w	r0, r1, ip
   b6d90:	fa21 f102 	lsr.w	r1, r1, r2
   b6d94:	e00c      	b.n	b6db0 <__adddf3+0x184>
   b6d96:	f102 0214 	add.w	r2, r2, #20
   b6d9a:	bfd8      	it	le
   b6d9c:	f1c2 0c20 	rsble	ip, r2, #32
   b6da0:	fa01 f102 	lsl.w	r1, r1, r2
   b6da4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6da8:	bfdc      	itt	le
   b6daa:	ea41 010c 	orrle.w	r1, r1, ip
   b6dae:	4090      	lslle	r0, r2
   b6db0:	1ae4      	subs	r4, r4, r3
   b6db2:	bfa2      	ittt	ge
   b6db4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6db8:	4329      	orrge	r1, r5
   b6dba:	bd30      	popge	{r4, r5, pc}
   b6dbc:	ea6f 0404 	mvn.w	r4, r4
   b6dc0:	3c1f      	subs	r4, #31
   b6dc2:	da1c      	bge.n	b6dfe <__adddf3+0x1d2>
   b6dc4:	340c      	adds	r4, #12
   b6dc6:	dc0e      	bgt.n	b6de6 <__adddf3+0x1ba>
   b6dc8:	f104 0414 	add.w	r4, r4, #20
   b6dcc:	f1c4 0220 	rsb	r2, r4, #32
   b6dd0:	fa20 f004 	lsr.w	r0, r0, r4
   b6dd4:	fa01 f302 	lsl.w	r3, r1, r2
   b6dd8:	ea40 0003 	orr.w	r0, r0, r3
   b6ddc:	fa21 f304 	lsr.w	r3, r1, r4
   b6de0:	ea45 0103 	orr.w	r1, r5, r3
   b6de4:	bd30      	pop	{r4, r5, pc}
   b6de6:	f1c4 040c 	rsb	r4, r4, #12
   b6dea:	f1c4 0220 	rsb	r2, r4, #32
   b6dee:	fa20 f002 	lsr.w	r0, r0, r2
   b6df2:	fa01 f304 	lsl.w	r3, r1, r4
   b6df6:	ea40 0003 	orr.w	r0, r0, r3
   b6dfa:	4629      	mov	r1, r5
   b6dfc:	bd30      	pop	{r4, r5, pc}
   b6dfe:	fa21 f004 	lsr.w	r0, r1, r4
   b6e02:	4629      	mov	r1, r5
   b6e04:	bd30      	pop	{r4, r5, pc}
   b6e06:	f094 0f00 	teq	r4, #0
   b6e0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6e0e:	bf06      	itte	eq
   b6e10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6e14:	3401      	addeq	r4, #1
   b6e16:	3d01      	subne	r5, #1
   b6e18:	e74e      	b.n	b6cb8 <__adddf3+0x8c>
   b6e1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6e1e:	bf18      	it	ne
   b6e20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6e24:	d029      	beq.n	b6e7a <__adddf3+0x24e>
   b6e26:	ea94 0f05 	teq	r4, r5
   b6e2a:	bf08      	it	eq
   b6e2c:	ea90 0f02 	teqeq	r0, r2
   b6e30:	d005      	beq.n	b6e3e <__adddf3+0x212>
   b6e32:	ea54 0c00 	orrs.w	ip, r4, r0
   b6e36:	bf04      	itt	eq
   b6e38:	4619      	moveq	r1, r3
   b6e3a:	4610      	moveq	r0, r2
   b6e3c:	bd30      	pop	{r4, r5, pc}
   b6e3e:	ea91 0f03 	teq	r1, r3
   b6e42:	bf1e      	ittt	ne
   b6e44:	2100      	movne	r1, #0
   b6e46:	2000      	movne	r0, #0
   b6e48:	bd30      	popne	{r4, r5, pc}
   b6e4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6e4e:	d105      	bne.n	b6e5c <__adddf3+0x230>
   b6e50:	0040      	lsls	r0, r0, #1
   b6e52:	4149      	adcs	r1, r1
   b6e54:	bf28      	it	cs
   b6e56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6e5a:	bd30      	pop	{r4, r5, pc}
   b6e5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6e60:	bf3c      	itt	cc
   b6e62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6e66:	bd30      	popcc	{r4, r5, pc}
   b6e68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6e6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6e70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6e74:	f04f 0000 	mov.w	r0, #0
   b6e78:	bd30      	pop	{r4, r5, pc}
   b6e7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6e7e:	bf1a      	itte	ne
   b6e80:	4619      	movne	r1, r3
   b6e82:	4610      	movne	r0, r2
   b6e84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6e88:	bf1c      	itt	ne
   b6e8a:	460b      	movne	r3, r1
   b6e8c:	4602      	movne	r2, r0
   b6e8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6e92:	bf06      	itte	eq
   b6e94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6e98:	ea91 0f03 	teqeq	r1, r3
   b6e9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6ea0:	bd30      	pop	{r4, r5, pc}
   b6ea2:	bf00      	nop

000b6ea4 <__aeabi_ui2d>:
   b6ea4:	f090 0f00 	teq	r0, #0
   b6ea8:	bf04      	itt	eq
   b6eaa:	2100      	moveq	r1, #0
   b6eac:	4770      	bxeq	lr
   b6eae:	b530      	push	{r4, r5, lr}
   b6eb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6eb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6eb8:	f04f 0500 	mov.w	r5, #0
   b6ebc:	f04f 0100 	mov.w	r1, #0
   b6ec0:	e750      	b.n	b6d64 <__adddf3+0x138>
   b6ec2:	bf00      	nop

000b6ec4 <__aeabi_i2d>:
   b6ec4:	f090 0f00 	teq	r0, #0
   b6ec8:	bf04      	itt	eq
   b6eca:	2100      	moveq	r1, #0
   b6ecc:	4770      	bxeq	lr
   b6ece:	b530      	push	{r4, r5, lr}
   b6ed0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6ed4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6ed8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6edc:	bf48      	it	mi
   b6ede:	4240      	negmi	r0, r0
   b6ee0:	f04f 0100 	mov.w	r1, #0
   b6ee4:	e73e      	b.n	b6d64 <__adddf3+0x138>
   b6ee6:	bf00      	nop

000b6ee8 <__aeabi_f2d>:
   b6ee8:	0042      	lsls	r2, r0, #1
   b6eea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6eee:	ea4f 0131 	mov.w	r1, r1, rrx
   b6ef2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6ef6:	bf1f      	itttt	ne
   b6ef8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6efc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6f00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6f04:	4770      	bxne	lr
   b6f06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6f0a:	bf08      	it	eq
   b6f0c:	4770      	bxeq	lr
   b6f0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6f12:	bf04      	itt	eq
   b6f14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6f18:	4770      	bxeq	lr
   b6f1a:	b530      	push	{r4, r5, lr}
   b6f1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6f20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6f28:	e71c      	b.n	b6d64 <__adddf3+0x138>
   b6f2a:	bf00      	nop

000b6f2c <__aeabi_ul2d>:
   b6f2c:	ea50 0201 	orrs.w	r2, r0, r1
   b6f30:	bf08      	it	eq
   b6f32:	4770      	bxeq	lr
   b6f34:	b530      	push	{r4, r5, lr}
   b6f36:	f04f 0500 	mov.w	r5, #0
   b6f3a:	e00a      	b.n	b6f52 <__aeabi_l2d+0x16>

000b6f3c <__aeabi_l2d>:
   b6f3c:	ea50 0201 	orrs.w	r2, r0, r1
   b6f40:	bf08      	it	eq
   b6f42:	4770      	bxeq	lr
   b6f44:	b530      	push	{r4, r5, lr}
   b6f46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6f4a:	d502      	bpl.n	b6f52 <__aeabi_l2d+0x16>
   b6f4c:	4240      	negs	r0, r0
   b6f4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6f52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6f56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6f5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6f5e:	f43f aed8 	beq.w	b6d12 <__adddf3+0xe6>
   b6f62:	f04f 0203 	mov.w	r2, #3
   b6f66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6f6a:	bf18      	it	ne
   b6f6c:	3203      	addne	r2, #3
   b6f6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6f72:	bf18      	it	ne
   b6f74:	3203      	addne	r2, #3
   b6f76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6f7a:	f1c2 0320 	rsb	r3, r2, #32
   b6f7e:	fa00 fc03 	lsl.w	ip, r0, r3
   b6f82:	fa20 f002 	lsr.w	r0, r0, r2
   b6f86:	fa01 fe03 	lsl.w	lr, r1, r3
   b6f8a:	ea40 000e 	orr.w	r0, r0, lr
   b6f8e:	fa21 f102 	lsr.w	r1, r1, r2
   b6f92:	4414      	add	r4, r2
   b6f94:	e6bd      	b.n	b6d12 <__adddf3+0xe6>
   b6f96:	bf00      	nop

000b6f98 <__aeabi_dmul>:
   b6f98:	b570      	push	{r4, r5, r6, lr}
   b6f9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6f9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6fa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6fa6:	bf1d      	ittte	ne
   b6fa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6fac:	ea94 0f0c 	teqne	r4, ip
   b6fb0:	ea95 0f0c 	teqne	r5, ip
   b6fb4:	f000 f8de 	bleq	b7174 <__aeabi_dmul+0x1dc>
   b6fb8:	442c      	add	r4, r5
   b6fba:	ea81 0603 	eor.w	r6, r1, r3
   b6fbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6fc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6fc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6fca:	bf18      	it	ne
   b6fcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6fd8:	d038      	beq.n	b704c <__aeabi_dmul+0xb4>
   b6fda:	fba0 ce02 	umull	ip, lr, r0, r2
   b6fde:	f04f 0500 	mov.w	r5, #0
   b6fe2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6fe6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6fea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6fee:	f04f 0600 	mov.w	r6, #0
   b6ff2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6ff6:	f09c 0f00 	teq	ip, #0
   b6ffa:	bf18      	it	ne
   b6ffc:	f04e 0e01 	orrne.w	lr, lr, #1
   b7000:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7004:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7008:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b700c:	d204      	bcs.n	b7018 <__aeabi_dmul+0x80>
   b700e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7012:	416d      	adcs	r5, r5
   b7014:	eb46 0606 	adc.w	r6, r6, r6
   b7018:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b701c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7020:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7024:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7028:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b702c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7030:	bf88      	it	hi
   b7032:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7036:	d81e      	bhi.n	b7076 <__aeabi_dmul+0xde>
   b7038:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b703c:	bf08      	it	eq
   b703e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7042:	f150 0000 	adcs.w	r0, r0, #0
   b7046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b704a:	bd70      	pop	{r4, r5, r6, pc}
   b704c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7050:	ea46 0101 	orr.w	r1, r6, r1
   b7054:	ea40 0002 	orr.w	r0, r0, r2
   b7058:	ea81 0103 	eor.w	r1, r1, r3
   b705c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7060:	bfc2      	ittt	gt
   b7062:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7066:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b706a:	bd70      	popgt	{r4, r5, r6, pc}
   b706c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7070:	f04f 0e00 	mov.w	lr, #0
   b7074:	3c01      	subs	r4, #1
   b7076:	f300 80ab 	bgt.w	b71d0 <__aeabi_dmul+0x238>
   b707a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b707e:	bfde      	ittt	le
   b7080:	2000      	movle	r0, #0
   b7082:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7086:	bd70      	pople	{r4, r5, r6, pc}
   b7088:	f1c4 0400 	rsb	r4, r4, #0
   b708c:	3c20      	subs	r4, #32
   b708e:	da35      	bge.n	b70fc <__aeabi_dmul+0x164>
   b7090:	340c      	adds	r4, #12
   b7092:	dc1b      	bgt.n	b70cc <__aeabi_dmul+0x134>
   b7094:	f104 0414 	add.w	r4, r4, #20
   b7098:	f1c4 0520 	rsb	r5, r4, #32
   b709c:	fa00 f305 	lsl.w	r3, r0, r5
   b70a0:	fa20 f004 	lsr.w	r0, r0, r4
   b70a4:	fa01 f205 	lsl.w	r2, r1, r5
   b70a8:	ea40 0002 	orr.w	r0, r0, r2
   b70ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b70b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b70b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b70b8:	fa21 f604 	lsr.w	r6, r1, r4
   b70bc:	eb42 0106 	adc.w	r1, r2, r6
   b70c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b70c4:	bf08      	it	eq
   b70c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b70ca:	bd70      	pop	{r4, r5, r6, pc}
   b70cc:	f1c4 040c 	rsb	r4, r4, #12
   b70d0:	f1c4 0520 	rsb	r5, r4, #32
   b70d4:	fa00 f304 	lsl.w	r3, r0, r4
   b70d8:	fa20 f005 	lsr.w	r0, r0, r5
   b70dc:	fa01 f204 	lsl.w	r2, r1, r4
   b70e0:	ea40 0002 	orr.w	r0, r0, r2
   b70e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b70e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b70ec:	f141 0100 	adc.w	r1, r1, #0
   b70f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b70f4:	bf08      	it	eq
   b70f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b70fa:	bd70      	pop	{r4, r5, r6, pc}
   b70fc:	f1c4 0520 	rsb	r5, r4, #32
   b7100:	fa00 f205 	lsl.w	r2, r0, r5
   b7104:	ea4e 0e02 	orr.w	lr, lr, r2
   b7108:	fa20 f304 	lsr.w	r3, r0, r4
   b710c:	fa01 f205 	lsl.w	r2, r1, r5
   b7110:	ea43 0302 	orr.w	r3, r3, r2
   b7114:	fa21 f004 	lsr.w	r0, r1, r4
   b7118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b711c:	fa21 f204 	lsr.w	r2, r1, r4
   b7120:	ea20 0002 	bic.w	r0, r0, r2
   b7124:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7128:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b712c:	bf08      	it	eq
   b712e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7132:	bd70      	pop	{r4, r5, r6, pc}
   b7134:	f094 0f00 	teq	r4, #0
   b7138:	d10f      	bne.n	b715a <__aeabi_dmul+0x1c2>
   b713a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b713e:	0040      	lsls	r0, r0, #1
   b7140:	eb41 0101 	adc.w	r1, r1, r1
   b7144:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7148:	bf08      	it	eq
   b714a:	3c01      	subeq	r4, #1
   b714c:	d0f7      	beq.n	b713e <__aeabi_dmul+0x1a6>
   b714e:	ea41 0106 	orr.w	r1, r1, r6
   b7152:	f095 0f00 	teq	r5, #0
   b7156:	bf18      	it	ne
   b7158:	4770      	bxne	lr
   b715a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b715e:	0052      	lsls	r2, r2, #1
   b7160:	eb43 0303 	adc.w	r3, r3, r3
   b7164:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7168:	bf08      	it	eq
   b716a:	3d01      	subeq	r5, #1
   b716c:	d0f7      	beq.n	b715e <__aeabi_dmul+0x1c6>
   b716e:	ea43 0306 	orr.w	r3, r3, r6
   b7172:	4770      	bx	lr
   b7174:	ea94 0f0c 	teq	r4, ip
   b7178:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b717c:	bf18      	it	ne
   b717e:	ea95 0f0c 	teqne	r5, ip
   b7182:	d00c      	beq.n	b719e <__aeabi_dmul+0x206>
   b7184:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7188:	bf18      	it	ne
   b718a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b718e:	d1d1      	bne.n	b7134 <__aeabi_dmul+0x19c>
   b7190:	ea81 0103 	eor.w	r1, r1, r3
   b7194:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7198:	f04f 0000 	mov.w	r0, #0
   b719c:	bd70      	pop	{r4, r5, r6, pc}
   b719e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b71a2:	bf06      	itte	eq
   b71a4:	4610      	moveq	r0, r2
   b71a6:	4619      	moveq	r1, r3
   b71a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b71ac:	d019      	beq.n	b71e2 <__aeabi_dmul+0x24a>
   b71ae:	ea94 0f0c 	teq	r4, ip
   b71b2:	d102      	bne.n	b71ba <__aeabi_dmul+0x222>
   b71b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b71b8:	d113      	bne.n	b71e2 <__aeabi_dmul+0x24a>
   b71ba:	ea95 0f0c 	teq	r5, ip
   b71be:	d105      	bne.n	b71cc <__aeabi_dmul+0x234>
   b71c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b71c4:	bf1c      	itt	ne
   b71c6:	4610      	movne	r0, r2
   b71c8:	4619      	movne	r1, r3
   b71ca:	d10a      	bne.n	b71e2 <__aeabi_dmul+0x24a>
   b71cc:	ea81 0103 	eor.w	r1, r1, r3
   b71d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b71d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b71d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b71dc:	f04f 0000 	mov.w	r0, #0
   b71e0:	bd70      	pop	{r4, r5, r6, pc}
   b71e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b71e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b71ea:	bd70      	pop	{r4, r5, r6, pc}

000b71ec <__aeabi_ddiv>:
   b71ec:	b570      	push	{r4, r5, r6, lr}
   b71ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b71f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b71f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b71fa:	bf1d      	ittte	ne
   b71fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7200:	ea94 0f0c 	teqne	r4, ip
   b7204:	ea95 0f0c 	teqne	r5, ip
   b7208:	f000 f8a7 	bleq	b735a <__aeabi_ddiv+0x16e>
   b720c:	eba4 0405 	sub.w	r4, r4, r5
   b7210:	ea81 0e03 	eor.w	lr, r1, r3
   b7214:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7218:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b721c:	f000 8088 	beq.w	b7330 <__aeabi_ddiv+0x144>
   b7220:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7224:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7228:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b722c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7230:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7234:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7238:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b723c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7240:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7244:	429d      	cmp	r5, r3
   b7246:	bf08      	it	eq
   b7248:	4296      	cmpeq	r6, r2
   b724a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b724e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7252:	d202      	bcs.n	b725a <__aeabi_ddiv+0x6e>
   b7254:	085b      	lsrs	r3, r3, #1
   b7256:	ea4f 0232 	mov.w	r2, r2, rrx
   b725a:	1ab6      	subs	r6, r6, r2
   b725c:	eb65 0503 	sbc.w	r5, r5, r3
   b7260:	085b      	lsrs	r3, r3, #1
   b7262:	ea4f 0232 	mov.w	r2, r2, rrx
   b7266:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b726a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b726e:	ebb6 0e02 	subs.w	lr, r6, r2
   b7272:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7276:	bf22      	ittt	cs
   b7278:	1ab6      	subcs	r6, r6, r2
   b727a:	4675      	movcs	r5, lr
   b727c:	ea40 000c 	orrcs.w	r0, r0, ip
   b7280:	085b      	lsrs	r3, r3, #1
   b7282:	ea4f 0232 	mov.w	r2, r2, rrx
   b7286:	ebb6 0e02 	subs.w	lr, r6, r2
   b728a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b728e:	bf22      	ittt	cs
   b7290:	1ab6      	subcs	r6, r6, r2
   b7292:	4675      	movcs	r5, lr
   b7294:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7298:	085b      	lsrs	r3, r3, #1
   b729a:	ea4f 0232 	mov.w	r2, r2, rrx
   b729e:	ebb6 0e02 	subs.w	lr, r6, r2
   b72a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b72a6:	bf22      	ittt	cs
   b72a8:	1ab6      	subcs	r6, r6, r2
   b72aa:	4675      	movcs	r5, lr
   b72ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b72b0:	085b      	lsrs	r3, r3, #1
   b72b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b72b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b72ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b72be:	bf22      	ittt	cs
   b72c0:	1ab6      	subcs	r6, r6, r2
   b72c2:	4675      	movcs	r5, lr
   b72c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b72c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b72cc:	d018      	beq.n	b7300 <__aeabi_ddiv+0x114>
   b72ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b72d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b72d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b72da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b72de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b72e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b72e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b72ea:	d1c0      	bne.n	b726e <__aeabi_ddiv+0x82>
   b72ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b72f0:	d10b      	bne.n	b730a <__aeabi_ddiv+0x11e>
   b72f2:	ea41 0100 	orr.w	r1, r1, r0
   b72f6:	f04f 0000 	mov.w	r0, #0
   b72fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b72fe:	e7b6      	b.n	b726e <__aeabi_ddiv+0x82>
   b7300:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7304:	bf04      	itt	eq
   b7306:	4301      	orreq	r1, r0
   b7308:	2000      	moveq	r0, #0
   b730a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b730e:	bf88      	it	hi
   b7310:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7314:	f63f aeaf 	bhi.w	b7076 <__aeabi_dmul+0xde>
   b7318:	ebb5 0c03 	subs.w	ip, r5, r3
   b731c:	bf04      	itt	eq
   b731e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7326:	f150 0000 	adcs.w	r0, r0, #0
   b732a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b732e:	bd70      	pop	{r4, r5, r6, pc}
   b7330:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7334:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7338:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b733c:	bfc2      	ittt	gt
   b733e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7342:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7346:	bd70      	popgt	{r4, r5, r6, pc}
   b7348:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b734c:	f04f 0e00 	mov.w	lr, #0
   b7350:	3c01      	subs	r4, #1
   b7352:	e690      	b.n	b7076 <__aeabi_dmul+0xde>
   b7354:	ea45 0e06 	orr.w	lr, r5, r6
   b7358:	e68d      	b.n	b7076 <__aeabi_dmul+0xde>
   b735a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b735e:	ea94 0f0c 	teq	r4, ip
   b7362:	bf08      	it	eq
   b7364:	ea95 0f0c 	teqeq	r5, ip
   b7368:	f43f af3b 	beq.w	b71e2 <__aeabi_dmul+0x24a>
   b736c:	ea94 0f0c 	teq	r4, ip
   b7370:	d10a      	bne.n	b7388 <__aeabi_ddiv+0x19c>
   b7372:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7376:	f47f af34 	bne.w	b71e2 <__aeabi_dmul+0x24a>
   b737a:	ea95 0f0c 	teq	r5, ip
   b737e:	f47f af25 	bne.w	b71cc <__aeabi_dmul+0x234>
   b7382:	4610      	mov	r0, r2
   b7384:	4619      	mov	r1, r3
   b7386:	e72c      	b.n	b71e2 <__aeabi_dmul+0x24a>
   b7388:	ea95 0f0c 	teq	r5, ip
   b738c:	d106      	bne.n	b739c <__aeabi_ddiv+0x1b0>
   b738e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7392:	f43f aefd 	beq.w	b7190 <__aeabi_dmul+0x1f8>
   b7396:	4610      	mov	r0, r2
   b7398:	4619      	mov	r1, r3
   b739a:	e722      	b.n	b71e2 <__aeabi_dmul+0x24a>
   b739c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b73a0:	bf18      	it	ne
   b73a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b73a6:	f47f aec5 	bne.w	b7134 <__aeabi_dmul+0x19c>
   b73aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b73ae:	f47f af0d 	bne.w	b71cc <__aeabi_dmul+0x234>
   b73b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b73b6:	f47f aeeb 	bne.w	b7190 <__aeabi_dmul+0x1f8>
   b73ba:	e712      	b.n	b71e2 <__aeabi_dmul+0x24a>

000b73bc <__gedf2>:
   b73bc:	f04f 3cff 	mov.w	ip, #4294967295
   b73c0:	e006      	b.n	b73d0 <__cmpdf2+0x4>
   b73c2:	bf00      	nop

000b73c4 <__ledf2>:
   b73c4:	f04f 0c01 	mov.w	ip, #1
   b73c8:	e002      	b.n	b73d0 <__cmpdf2+0x4>
   b73ca:	bf00      	nop

000b73cc <__cmpdf2>:
   b73cc:	f04f 0c01 	mov.w	ip, #1
   b73d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b73d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b73d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b73dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b73e0:	bf18      	it	ne
   b73e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b73e6:	d01b      	beq.n	b7420 <__cmpdf2+0x54>
   b73e8:	b001      	add	sp, #4
   b73ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b73ee:	bf0c      	ite	eq
   b73f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b73f4:	ea91 0f03 	teqne	r1, r3
   b73f8:	bf02      	ittt	eq
   b73fa:	ea90 0f02 	teqeq	r0, r2
   b73fe:	2000      	moveq	r0, #0
   b7400:	4770      	bxeq	lr
   b7402:	f110 0f00 	cmn.w	r0, #0
   b7406:	ea91 0f03 	teq	r1, r3
   b740a:	bf58      	it	pl
   b740c:	4299      	cmppl	r1, r3
   b740e:	bf08      	it	eq
   b7410:	4290      	cmpeq	r0, r2
   b7412:	bf2c      	ite	cs
   b7414:	17d8      	asrcs	r0, r3, #31
   b7416:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b741a:	f040 0001 	orr.w	r0, r0, #1
   b741e:	4770      	bx	lr
   b7420:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7424:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7428:	d102      	bne.n	b7430 <__cmpdf2+0x64>
   b742a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b742e:	d107      	bne.n	b7440 <__cmpdf2+0x74>
   b7430:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7438:	d1d6      	bne.n	b73e8 <__cmpdf2+0x1c>
   b743a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b743e:	d0d3      	beq.n	b73e8 <__cmpdf2+0x1c>
   b7440:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7444:	4770      	bx	lr
   b7446:	bf00      	nop

000b7448 <__aeabi_cdrcmple>:
   b7448:	4684      	mov	ip, r0
   b744a:	4610      	mov	r0, r2
   b744c:	4662      	mov	r2, ip
   b744e:	468c      	mov	ip, r1
   b7450:	4619      	mov	r1, r3
   b7452:	4663      	mov	r3, ip
   b7454:	e000      	b.n	b7458 <__aeabi_cdcmpeq>
   b7456:	bf00      	nop

000b7458 <__aeabi_cdcmpeq>:
   b7458:	b501      	push	{r0, lr}
   b745a:	f7ff ffb7 	bl	b73cc <__cmpdf2>
   b745e:	2800      	cmp	r0, #0
   b7460:	bf48      	it	mi
   b7462:	f110 0f00 	cmnmi.w	r0, #0
   b7466:	bd01      	pop	{r0, pc}

000b7468 <__aeabi_dcmpeq>:
   b7468:	f84d ed08 	str.w	lr, [sp, #-8]!
   b746c:	f7ff fff4 	bl	b7458 <__aeabi_cdcmpeq>
   b7470:	bf0c      	ite	eq
   b7472:	2001      	moveq	r0, #1
   b7474:	2000      	movne	r0, #0
   b7476:	f85d fb08 	ldr.w	pc, [sp], #8
   b747a:	bf00      	nop

000b747c <__aeabi_dcmplt>:
   b747c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7480:	f7ff ffea 	bl	b7458 <__aeabi_cdcmpeq>
   b7484:	bf34      	ite	cc
   b7486:	2001      	movcc	r0, #1
   b7488:	2000      	movcs	r0, #0
   b748a:	f85d fb08 	ldr.w	pc, [sp], #8
   b748e:	bf00      	nop

000b7490 <__aeabi_dcmple>:
   b7490:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7494:	f7ff ffe0 	bl	b7458 <__aeabi_cdcmpeq>
   b7498:	bf94      	ite	ls
   b749a:	2001      	movls	r0, #1
   b749c:	2000      	movhi	r0, #0
   b749e:	f85d fb08 	ldr.w	pc, [sp], #8
   b74a2:	bf00      	nop

000b74a4 <__aeabi_dcmpge>:
   b74a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b74a8:	f7ff ffce 	bl	b7448 <__aeabi_cdrcmple>
   b74ac:	bf94      	ite	ls
   b74ae:	2001      	movls	r0, #1
   b74b0:	2000      	movhi	r0, #0
   b74b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b74b6:	bf00      	nop

000b74b8 <__aeabi_dcmpgt>:
   b74b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b74bc:	f7ff ffc4 	bl	b7448 <__aeabi_cdrcmple>
   b74c0:	bf34      	ite	cc
   b74c2:	2001      	movcc	r0, #1
   b74c4:	2000      	movcs	r0, #0
   b74c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b74ca:	bf00      	nop

000b74cc <__aeabi_dcmpun>:
   b74cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b74d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b74d4:	d102      	bne.n	b74dc <__aeabi_dcmpun+0x10>
   b74d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b74da:	d10a      	bne.n	b74f2 <__aeabi_dcmpun+0x26>
   b74dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b74e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b74e4:	d102      	bne.n	b74ec <__aeabi_dcmpun+0x20>
   b74e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b74ea:	d102      	bne.n	b74f2 <__aeabi_dcmpun+0x26>
   b74ec:	f04f 0000 	mov.w	r0, #0
   b74f0:	4770      	bx	lr
   b74f2:	f04f 0001 	mov.w	r0, #1
   b74f6:	4770      	bx	lr

000b74f8 <__aeabi_d2iz>:
   b74f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b74fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7500:	d215      	bcs.n	b752e <__aeabi_d2iz+0x36>
   b7502:	d511      	bpl.n	b7528 <__aeabi_d2iz+0x30>
   b7504:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7508:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b750c:	d912      	bls.n	b7534 <__aeabi_d2iz+0x3c>
   b750e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7516:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b751a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b751e:	fa23 f002 	lsr.w	r0, r3, r2
   b7522:	bf18      	it	ne
   b7524:	4240      	negne	r0, r0
   b7526:	4770      	bx	lr
   b7528:	f04f 0000 	mov.w	r0, #0
   b752c:	4770      	bx	lr
   b752e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7532:	d105      	bne.n	b7540 <__aeabi_d2iz+0x48>
   b7534:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b7538:	bf08      	it	eq
   b753a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b753e:	4770      	bx	lr
   b7540:	f04f 0000 	mov.w	r0, #0
   b7544:	4770      	bx	lr
   b7546:	bf00      	nop

000b7548 <__aeabi_d2uiz>:
   b7548:	004a      	lsls	r2, r1, #1
   b754a:	d211      	bcs.n	b7570 <__aeabi_d2uiz+0x28>
   b754c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7550:	d211      	bcs.n	b7576 <__aeabi_d2uiz+0x2e>
   b7552:	d50d      	bpl.n	b7570 <__aeabi_d2uiz+0x28>
   b7554:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7558:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b755c:	d40e      	bmi.n	b757c <__aeabi_d2uiz+0x34>
   b755e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7566:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b756a:	fa23 f002 	lsr.w	r0, r3, r2
   b756e:	4770      	bx	lr
   b7570:	f04f 0000 	mov.w	r0, #0
   b7574:	4770      	bx	lr
   b7576:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b757a:	d102      	bne.n	b7582 <__aeabi_d2uiz+0x3a>
   b757c:	f04f 30ff 	mov.w	r0, #4294967295
   b7580:	4770      	bx	lr
   b7582:	f04f 0000 	mov.w	r0, #0
   b7586:	4770      	bx	lr

000b7588 <__aeabi_d2f>:
   b7588:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b758c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7590:	bf24      	itt	cs
   b7592:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7596:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b759a:	d90d      	bls.n	b75b8 <__aeabi_d2f+0x30>
   b759c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b75a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b75a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b75a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b75ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b75b0:	bf08      	it	eq
   b75b2:	f020 0001 	biceq.w	r0, r0, #1
   b75b6:	4770      	bx	lr
   b75b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b75bc:	d121      	bne.n	b7602 <__aeabi_d2f+0x7a>
   b75be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b75c2:	bfbc      	itt	lt
   b75c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b75c8:	4770      	bxlt	lr
   b75ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b75ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b75d2:	f1c2 0218 	rsb	r2, r2, #24
   b75d6:	f1c2 0c20 	rsb	ip, r2, #32
   b75da:	fa10 f30c 	lsls.w	r3, r0, ip
   b75de:	fa20 f002 	lsr.w	r0, r0, r2
   b75e2:	bf18      	it	ne
   b75e4:	f040 0001 	orrne.w	r0, r0, #1
   b75e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b75ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b75f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b75f4:	ea40 000c 	orr.w	r0, r0, ip
   b75f8:	fa23 f302 	lsr.w	r3, r3, r2
   b75fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7600:	e7cc      	b.n	b759c <__aeabi_d2f+0x14>
   b7602:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7606:	d107      	bne.n	b7618 <__aeabi_d2f+0x90>
   b7608:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b760c:	bf1e      	ittt	ne
   b760e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7612:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7616:	4770      	bxne	lr
   b7618:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b761c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7620:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7624:	4770      	bx	lr
   b7626:	bf00      	nop

000b7628 <atexit>:
   b7628:	2300      	movs	r3, #0
   b762a:	4601      	mov	r1, r0
   b762c:	461a      	mov	r2, r3
   b762e:	4618      	mov	r0, r3
   b7630:	f000 b84c 	b.w	b76cc <__register_exitproc>

000b7634 <memcpy>:
   b7634:	440a      	add	r2, r1
   b7636:	4291      	cmp	r1, r2
   b7638:	f100 33ff 	add.w	r3, r0, #4294967295
   b763c:	d100      	bne.n	b7640 <memcpy+0xc>
   b763e:	4770      	bx	lr
   b7640:	b510      	push	{r4, lr}
   b7642:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7646:	f803 4f01 	strb.w	r4, [r3, #1]!
   b764a:	4291      	cmp	r1, r2
   b764c:	d1f9      	bne.n	b7642 <memcpy+0xe>
   b764e:	bd10      	pop	{r4, pc}

000b7650 <memset>:
   b7650:	4402      	add	r2, r0
   b7652:	4603      	mov	r3, r0
   b7654:	4293      	cmp	r3, r2
   b7656:	d100      	bne.n	b765a <memset+0xa>
   b7658:	4770      	bx	lr
   b765a:	f803 1b01 	strb.w	r1, [r3], #1
   b765e:	e7f9      	b.n	b7654 <memset+0x4>

000b7660 <srand>:
   b7660:	b538      	push	{r3, r4, r5, lr}
   b7662:	4b10      	ldr	r3, [pc, #64]	; (b76a4 <srand+0x44>)
   b7664:	681d      	ldr	r5, [r3, #0]
   b7666:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7668:	4604      	mov	r4, r0
   b766a:	b9b3      	cbnz	r3, b769a <srand+0x3a>
   b766c:	2018      	movs	r0, #24
   b766e:	f7fd fb41 	bl	b4cf4 <malloc>
   b7672:	4602      	mov	r2, r0
   b7674:	63a8      	str	r0, [r5, #56]	; 0x38
   b7676:	b920      	cbnz	r0, b7682 <srand+0x22>
   b7678:	4b0b      	ldr	r3, [pc, #44]	; (b76a8 <srand+0x48>)
   b767a:	480c      	ldr	r0, [pc, #48]	; (b76ac <srand+0x4c>)
   b767c:	2142      	movs	r1, #66	; 0x42
   b767e:	f7fd fb51 	bl	b4d24 <__assert_func>
   b7682:	490b      	ldr	r1, [pc, #44]	; (b76b0 <srand+0x50>)
   b7684:	4b0b      	ldr	r3, [pc, #44]	; (b76b4 <srand+0x54>)
   b7686:	e9c0 1300 	strd	r1, r3, [r0]
   b768a:	4b0b      	ldr	r3, [pc, #44]	; (b76b8 <srand+0x58>)
   b768c:	6083      	str	r3, [r0, #8]
   b768e:	230b      	movs	r3, #11
   b7690:	8183      	strh	r3, [r0, #12]
   b7692:	2100      	movs	r1, #0
   b7694:	2001      	movs	r0, #1
   b7696:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b769a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b769c:	2200      	movs	r2, #0
   b769e:	611c      	str	r4, [r3, #16]
   b76a0:	615a      	str	r2, [r3, #20]
   b76a2:	bd38      	pop	{r3, r4, r5, pc}
   b76a4:	2003e634 	.word	0x2003e634
   b76a8:	000b79a8 	.word	0x000b79a8
   b76ac:	000b79bf 	.word	0x000b79bf
   b76b0:	abcd330e 	.word	0xabcd330e
   b76b4:	e66d1234 	.word	0xe66d1234
   b76b8:	0005deec 	.word	0x0005deec

000b76bc <strlen>:
   b76bc:	4603      	mov	r3, r0
   b76be:	f813 2b01 	ldrb.w	r2, [r3], #1
   b76c2:	2a00      	cmp	r2, #0
   b76c4:	d1fb      	bne.n	b76be <strlen+0x2>
   b76c6:	1a18      	subs	r0, r3, r0
   b76c8:	3801      	subs	r0, #1
   b76ca:	4770      	bx	lr

000b76cc <__register_exitproc>:
   b76cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b76d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b778c <__register_exitproc+0xc0>
   b76d4:	4606      	mov	r6, r0
   b76d6:	f8d8 0000 	ldr.w	r0, [r8]
   b76da:	461f      	mov	r7, r3
   b76dc:	460d      	mov	r5, r1
   b76de:	4691      	mov	r9, r2
   b76e0:	f000 f856 	bl	b7790 <__retarget_lock_acquire_recursive>
   b76e4:	4b25      	ldr	r3, [pc, #148]	; (b777c <__register_exitproc+0xb0>)
   b76e6:	681c      	ldr	r4, [r3, #0]
   b76e8:	b934      	cbnz	r4, b76f8 <__register_exitproc+0x2c>
   b76ea:	4c25      	ldr	r4, [pc, #148]	; (b7780 <__register_exitproc+0xb4>)
   b76ec:	601c      	str	r4, [r3, #0]
   b76ee:	4b25      	ldr	r3, [pc, #148]	; (b7784 <__register_exitproc+0xb8>)
   b76f0:	b113      	cbz	r3, b76f8 <__register_exitproc+0x2c>
   b76f2:	681b      	ldr	r3, [r3, #0]
   b76f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b76f8:	6863      	ldr	r3, [r4, #4]
   b76fa:	2b1f      	cmp	r3, #31
   b76fc:	dd07      	ble.n	b770e <__register_exitproc+0x42>
   b76fe:	f8d8 0000 	ldr.w	r0, [r8]
   b7702:	f000 f847 	bl	b7794 <__retarget_lock_release_recursive>
   b7706:	f04f 30ff 	mov.w	r0, #4294967295
   b770a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b770e:	b34e      	cbz	r6, b7764 <__register_exitproc+0x98>
   b7710:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7714:	b988      	cbnz	r0, b773a <__register_exitproc+0x6e>
   b7716:	4b1c      	ldr	r3, [pc, #112]	; (b7788 <__register_exitproc+0xbc>)
   b7718:	b923      	cbnz	r3, b7724 <__register_exitproc+0x58>
   b771a:	f8d8 0000 	ldr.w	r0, [r8]
   b771e:	f000 f838 	bl	b7792 <__retarget_lock_release>
   b7722:	e7f0      	b.n	b7706 <__register_exitproc+0x3a>
   b7724:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7728:	f7fd fae4 	bl	b4cf4 <malloc>
   b772c:	2800      	cmp	r0, #0
   b772e:	d0f4      	beq.n	b771a <__register_exitproc+0x4e>
   b7730:	2300      	movs	r3, #0
   b7732:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7736:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b773a:	6863      	ldr	r3, [r4, #4]
   b773c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7740:	2201      	movs	r2, #1
   b7742:	409a      	lsls	r2, r3
   b7744:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7748:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b774c:	4313      	orrs	r3, r2
   b774e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7752:	2e02      	cmp	r6, #2
   b7754:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7758:	bf02      	ittt	eq
   b775a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b775e:	4313      	orreq	r3, r2
   b7760:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7764:	6863      	ldr	r3, [r4, #4]
   b7766:	f8d8 0000 	ldr.w	r0, [r8]
   b776a:	1c5a      	adds	r2, r3, #1
   b776c:	3302      	adds	r3, #2
   b776e:	6062      	str	r2, [r4, #4]
   b7770:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7774:	f000 f80e 	bl	b7794 <__retarget_lock_release_recursive>
   b7778:	2000      	movs	r0, #0
   b777a:	e7c6      	b.n	b770a <__register_exitproc+0x3e>
   b777c:	2003e7e8 	.word	0x2003e7e8
   b7780:	2003e75c 	.word	0x2003e75c
   b7784:	00000000 	.word	0x00000000
   b7788:	000b4cf5 	.word	0x000b4cf5
   b778c:	2003e698 	.word	0x2003e698

000b7790 <__retarget_lock_acquire_recursive>:
   b7790:	4770      	bx	lr

000b7792 <__retarget_lock_release>:
   b7792:	4770      	bx	lr

000b7794 <__retarget_lock_release_recursive>:
   b7794:	4770      	bx	lr

000b7796 <link_code_end>:
	...

000b7798 <dynalib_user>:
   b7798:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b77a8:	0000 0000 4844 7854 2078 6574 7473 0021     ....DHTxx test!.
   b77b8:	6146 6c69 6465 7420 206f 6572 6461 6620     Failed to read f
   b77c8:	6f72 206d 4844 2054 6573 736e 726f 0021     rom DHT sensor!.
   b77d8:	7548 656d 6164 3a64 0020 6554 706d 7265     Humedad: .Temper
   b77e8:	7461 7275 3a61 0020 6548 7461 6920 646e     atura: .Heat ind
   b77f8:	7865 203a 4400 7765 5020 696f 746e 203a     ex: .Dew Point: 
   b7808:	0000 0000                                   ....

000b780c <_ZTVN5spark13EthernetClassE>:
	...
   b7814:	4da3 000b 4d99 000b 4d8f 000b 4d85 000b     .M...M...M...M..
   b7824:	4d79 000b 4d6d 000b 55e1 000b 55e9 000b     yM..mM...U...U..
   b7834:	4d61 000b 4d59 000b 4d4f 000b 4d45 000b     aM..YM..OM..EM..
   b7844:	5619 000b 616e 006e 6e69 0066 766f 0066     .V..nan.inf.ovf.
   b7854:	002e 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   b7864:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   b7874:	0065 0000                                   e...

000b7878 <_ZTV9IPAddress>:
	...
   b7880:	5221 000b 5211 000b 5213 000b               !R...R...R..

000b788c <_ZTV9USBSerial>:
	...
   b7894:	5307 000b 536f 000b 5345 000b 4e09 000b     .S..oS..ES...N..
   b78a4:	5337 000b 5309 000b 5319 000b 5369 000b     7S...S...S..iS..
   b78b4:	5329 000b 5301 000b                         )S...S..

000b78bc <_ZTV11USARTSerial>:
	...
   b78c4:	5411 000b 547d 000b 5455 000b 4e09 000b     .T..}T..UT...N..
   b78d4:	5425 000b 5441 000b 5433 000b 544f 000b     %T..AT..3T..OT..
   b78e4:	5413 000b 5417 000b                         .T...T..

000b78ec <_ZTV7TwoWire>:
	...
   b78f4:	54b5 000b 54ff 000b 54d7 000b 54b7 000b     .T...T...T...T..
   b7904:	54df 000b 54e7 000b 54ef 000b 54f7 000b     .T...T...T...T..

000b7914 <_ZTVN5spark9WiFiClassE>:
	...
   b791c:	5583 000b 5579 000b 556f 000b 5531 000b     .U..yU..oU..1U..
   b792c:	5095 000b 5563 000b 55e1 000b 55e9 000b     .P..cU...U...U..
   b793c:	5557 000b 554f 000b 5545 000b 553b 000b     WU..OU..EU..;U..
   b794c:	5619 000b                                   .V..

000b7950 <_ZTVN5spark12NetworkClassE>:
	...
   b7958:	55a1 000b 55ab 000b 55b5 000b 55bf 000b     .U...U...U...U..
   b7968:	55c9 000b 55d5 000b 55e1 000b 55e9 000b     .U...U...U...U..
   b7978:	55f1 000b 55fd 000b 5605 000b 560f 000b     .U...U...V...V..
   b7988:	5619 000b                                   .V..

000b798c <_ZSt7nothrow>:
	...

000b7998 <TWO52>:
   b7998:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b79a8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b79b8:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b79c8:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b79d8:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b79e8:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b79f8:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b7a08:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b7a18:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b7a28:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b7a38:	2e64 0063                                   d.c.

000b7a3c <link_const_variable_data_end>:
   b7a3c:	000b41b1 	.word	0x000b41b1
   b7a40:	000b4dad 	.word	0x000b4dad
   b7a44:	000b4dd5 	.word	0x000b4dd5
   b7a48:	000b4df9 	.word	0x000b4df9
   b7a4c:	000b50a1 	.word	0x000b50a1
   b7a50:	000b50b1 	.word	0x000b50b1
   b7a54:	000b50cd 	.word	0x000b50cd
   b7a58:	000b558d 	.word	0x000b558d
   b7a5c:	000b56f1 	.word	0x000b56f1
